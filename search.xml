<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flex布局</title>
    <url>/2020/02/21/2875753233/</url>
    <content><![CDATA[<h1 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h1><p><img src="http://img.chensenran.top/1582300462845.jpg" alt=""></p>
<h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><blockquote>
<p>主轴方向。</p>
</blockquote>
<ul>
<li><p>row : 从左向右</p>
</li>
<li><p>row-reverse : 从右向左</p>
</li>
<li><p>column : 从上向下</p>
</li>
<li><p>column-reverse : 从下向上</p>
</li>
</ul>
<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><blockquote>
<p>单行或者多行，是否允许换行</p>
</blockquote>
<ul>
<li>nowrap : 不换行</li>
<li>wrap : 第一行在上方</li>
<li>wrap-reverse : 第一行在下方</li>
</ul>
<h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><blockquote>
<p>flex-direction | flex- wrap 简写</p>
</blockquote>
<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><blockquote>
<p>主轴对齐方式</p>
</blockquote>
<ul>
<li>flex-start : 左对齐</li>
<li>flex-end : 右对齐</li>
<li>center : 居中</li>
<li>space-between : 两端对齐，中间间隔相等</li>
<li>space-around : 每个项目两侧的间隔相等，所以项目之间的间隔比边缘大一倍</li>
</ul>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><blockquote>
<p>交叉轴上的对齐方式</p>
</blockquote>
<ul>
<li>stretch : 充满（默认）</li>
<li>flex-start : 起点对齐</li>
<li>flex-end : 终点对齐</li>
<li>center : 中点对齐</li>
<li>baseline : 第一行文字底部为基准线</li>
</ul>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><blockquote>
<p>多跟轴线对齐方式</p>
</blockquote>
<ul>
<li>stretch : 充满（默认）</li>
<li>flex-start : 起点对齐</li>
<li>flex-end : 终点对齐</li>
<li>center : 中点对齐</li>
<li>space-between : 轴线两端对齐，中间间隔相等</li>
<li>space-around : 每个项目两侧的间隔相等，所以项目之间的间隔比边缘大一倍</li>
</ul>
<h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><blockquote>
<p>定义项目排列顺序</p>
</blockquote>
<h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><blockquote>
<p>定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间</p>
</blockquote>
<h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><blockquote>
<p>定义项目的放大比例</p>
</blockquote>
<ul>
<li><p>默认值为 0，即如果存在剩余空间，也不放大 </p>
</li>
<li><p>如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间。</p>
</li>
<li><p>如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p>
</li>
</ul>
<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><blockquote>
<p>定义了项目的缩小比例</p>
</blockquote>
<ul>
<li>默认值: 1，即如果空间不足，该项目将缩小，负值对该属性无效。 </li>
<li>如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。 </li>
</ul>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><blockquote>
<p>flex-grow , flex-shrink, flex-basis 缩写</p>
</blockquote>
<ul>
<li>flex 的默认值是 0 1 auto </li>
<li>auto ：1 1 auto</li>
<li>none：0 0 auto</li>
</ul>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><blockquote>
<p>单个项目与其他项目不一样的对齐方式</p>
</blockquote>
<ul>
<li>align-self: auto | flex-start | flex-end | center | baseline | stretch;</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>Flex</tag>
      </tags>
  </entry>
  <entry>
    <title>Git命令整理</title>
    <url>/2020/02/23/2687911277/</url>
    <content><![CDATA[<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<h1 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h1><ul>
<li>添加文件：git add &lt;fileName&gt;</li>
<li>提交至暂存区：git commit -m “something”</li>
<li>查看状态：git status</li>
<li>查看不同：git diff &lt;fileName&gt;</li>
<li>查看日志：git log</li>
<li>回滚历史版本：git reset –hard &lt;commit_id&gt;</li>
<li>查看命令历史：git reflog</li>
<li>丢弃工作区修改：git checkout – file</li>
<li>丢弃暂存区修改：git reset HEAD &lt;fileName&gt;</li>
<li>删除文件：git rm &lt;fileName&gt;</li>
</ul>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><ul>
<li>关联远程仓库：git remote add origin &lt;address&gt;</li>
<li>推送并关联master分支：git push -u origin master</li>
<li>推送master分支：git push origin master</li>
<li>克隆项目：git clone &lt;address&gt;</li>
</ul>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><ul>
<li>创建分支：git branch &lt;name&gt;</li>
<li>切换分支：git checkout &lt;name&gt;</li>
<li>创建并切换分支：git checkout -b &lt;name&gt;</li>
<li>查看当前分支：git branch</li>
<li>与当前分支合并：git merge &lt;name&gt;</li>
<li>删除分支：git branch -d &lt;name&gt;</li>
<li>产看合并图：git log –graph</li>
<li>推送分支：git push origin &lt;name&gt;</li>
<li>拉取：git pull</li>
<li>链接关系创建：git branch –set-upstream-to &lt;name&gt; origin/&lt;name&gt;</li>
<li>查看远程库信息：git remote -v<h2 id="新版本命令"><a href="#新版本命令" class="headerlink" title="新版本命令"></a>新版本命令</h2></li>
<li>创建：git switch -c &lt;name&gt;</li>
<li>切换：git switch &lt;name&gt;</li>
</ul>
<h2 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h2><ul>
<li>暂存当前分支：git stash</li>
<li>查看当前暂存列表：git stash list</li>
<li>恢复暂存：git stash apply</li>
<li>删除暂存：git stash drop</li>
<li>恢复暂存并删除：git stash pop</li>
<li>复制bug分支修改内容到当前分支：git cherry-pick &lt;commit&gt;</li>
</ul>
<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><ul>
<li>创建标签：git tag &lt;name&gt; ?&lt;commit&gt;</li>
<li>查看所有标签：git tag</li>
<li>查看标签详情：git show &lt;name&gt;</li>
<li>创建带注释的标签：git tag -a &lt;name&gt; -m “&lt;message&gt;” &lt;commit&gt;</li>
<li>删除标签：git tag -d &lt;name&gt;</li>
<li>推送标签：git push origin &lt;name&gt;</li>
<li>推送所有标签：git push origin –tags</li>
<li>删除远程标签：git push origin :refs/tags/&lt;name&gt;</li>
</ul>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Grid布局</title>
    <url>/2020/02/22/3615068729/</url>
    <content><![CDATA[<h1 id="Grid布局"><a href="#Grid布局" class="headerlink" title="Grid布局"></a>Grid布局</h1><p><img src="http://img.chensenran.top/1582385835420.png" alt=""></p>
<h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><ul>
<li>grid</li>
<li>inline-grid</li>
<li>subgrid : 嵌套</li>
</ul>
<h3 id="grid-template-columns-grid-template-rows"><a href="#grid-template-columns-grid-template-rows" class="headerlink" title="grid-template-columns / grid-template-rows"></a>grid-template-columns / grid-template-rows</h3><blockquote>
<p>定义轨道大小和线名</p>
</blockquote>
<ul>
<li>[line-name line-name-second] &lt;tarck-size&gt; [line-name]</li>
<li>repeat(num, value) : 重复部分<ul>
<li>repeat(auto-fill, 100px) : 单元格宽度确定，容器不确定。auto-fill：尽可能多的排列</li>
</ul>
</li>
<li>fr : 设置为自由空间的一部分</li>
<li>minmax(minValue, maxValue) : 产生长度的范围</li>
<li>auto : 浏览器决定</li>
</ul>
<h3 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h3><blockquote>
<p>重复网格区域的名称，扩展到这些单元格。（grid-area 引用名称）</p>
</blockquote>
<ul>
<li>‘.‘ : 空单元</li>
<li>‘none’ : 没有定义网格的区域</li>
</ul>
<h3 id="grid-template"><a href="#grid-template" class="headerlink" title="grid-template"></a>grid-template</h3><blockquote>
<p>grid-template-columns 、grid-template-rows、grid-template-areas 简写</p>
</blockquote>
<ul>
<li><p>none : 初始值</p>
</li>
<li><p>subgrid : grid-template-columns 、grid-template-rows为subgrid，grid-template-areas为初始值</p>
</li>
<li><p>grid-template-rows / grid-template-columns</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">grid-template</span>: <span class="selector-attr">[header-left]</span> "<span class="selector-tag">head</span> <span class="selector-tag">head</span>" 30<span class="selector-tag">px</span> <span class="selector-attr">[header-right]</span></span><br><span class="line">               <span class="selector-attr">[main-left]</span>   "<span class="selector-tag">nav</span>  <span class="selector-tag">main</span>" 1<span class="selector-tag">fr</span>  <span class="selector-attr">[main-right]</span></span><br><span class="line">               <span class="selector-attr">[footer-left]</span> "<span class="selector-tag">nav</span>  <span class="selector-tag">foot</span>" 30<span class="selector-tag">px</span> <span class="selector-attr">[footer-right]</span></span><br><span class="line">               / 120px 1fr;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="column-gap-row-gap"><a href="#column-gap-row-gap" class="headerlink" title="column-gap / row-gap"></a>column-gap / row-gap</h3><blockquote>
<p>网格线的大小，行列的间距</p>
</blockquote>
<ul>
<li>&lt;number&gt;</li>
</ul>
<h3 id="gap"><a href="#gap" class="headerlink" title="gap"></a>gap</h3><blockquote>
<p>&lt;row-gap&gt; / &lt;column-gap&gt;简写</p>
</blockquote>
<h3 id="justify-items-align-items-place-items"><a href="#justify-items-align-items-place-items" class="headerlink" title="justify-items / align-items / place-items"></a>justify-items / align-items / place-items</h3><ul>
<li>jusify-items : 项目的水平位置</li>
</ul>
<p><img src="http://img.chensenran.top/1582384374826.png" alt=""></p>
<ul>
<li>align-items : 项目的垂直位置</li>
</ul>
<p><img src="http://img.chensenran.top/1582384444138.png" alt=""></p>
<ul>
<li><p>place-items</p>
<blockquote>
<p>&lt;align-items&gt; 和 &lt;justify-items&gt; 缩写</p>
</blockquote>
</li>
</ul>
<p>可选值为：</p>
<ul>
<li>start</li>
<li>end</li>
<li>center</li>
<li>stretch</li>
</ul>
<h3 id="justify-content-align-content-place-content"><a href="#justify-content-align-content-place-content" class="headerlink" title="justify-content / align-content / place-content"></a>justify-content / align-content / place-content</h3><ul>
<li>justify-content : 表格的水平位置</li>
</ul>
<p><img src="http://img.chensenran.top/1582384766966.png" alt=""></p>
<ul>
<li><p>align-content : 表格的垂直位置</p>
</li>
<li><p>place-content</p>
<blockquote>
<p>&lt;align-content&gt; 和 &lt;justify-content&gt; 简写</p>
</blockquote>
</li>
</ul>
<p>可选值为：</p>
<ul>
<li>start</li>
<li>end</li>
<li>center</li>
<li>space-between</li>
<li>space-around</li>
<li>space-evenly</li>
</ul>
<h3 id="grid-auto-columns-grid-auto-rows"><a href="#grid-auto-columns-grid-auto-rows" class="headerlink" title="grid-auto-columns / grid-auto-rows"></a>grid-auto-columns / grid-auto-rows</h3><blockquote>
<p>隐式网格大小，和 grid-template-columns 、grid-template-rows 用法相同</p>
</blockquote>
<h3 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h3><blockquote>
<p>容器放置的顺序</p>
</blockquote>
<ul>
<li>row  &lt;dense&gt;</li>
<li>column &lt;dense&gt;</li>
</ul>
<p>下图为 grid-auto-flow : column</p>
<p><img src="http://img.chensenran.top/1582385208388.png" alt=""></p>
<p>下图为 grid-auto-flow : column dense</p>
<p><img src="http://img.chensenran.top/1582385281591.png" alt=""></p>
<h3 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h3><ul>
<li>&lt;grid-template&gt; </li>
<li>&lt;grid-template-rows&gt; / [ auto-flow &amp;&amp; dense? ] &lt;grid-auto-columns&gt;?</li>
<li>[ auto-flow &amp;&amp; dense? ] &lt;grid-auto-rows&gt;? / &lt;grid-template-columns&gt;</li>
</ul>
<h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><h3 id="grid-column-start-grid-column-end-grid-row-start-grid-row-end"><a href="#grid-column-start-grid-column-end-grid-row-start-grid-row-end" class="headerlink" title="grid-column-start / grid-column-end / grid-row-start / grid-row-end"></a>grid-column-start / grid-column-end / grid-row-start / grid-row-end</h3><blockquote>
<p>griditem 的起始位置</p>
</blockquote>
<ul>
<li>&lt;line&gt; : 线名字</li>
<li>span &lt;number&gt; : 跨越指定数量的网格</li>
<li>span &lt;name&gt; : 跨域网格，直到指定的网格线</li>
<li>auto</li>
</ul>
<h3 id="grid-column-grid-row"><a href="#grid-column-grid-row" class="headerlink" title="grid-column / grid-row"></a>grid-column / grid-row</h3><blockquote>
<p>grid-column : 为 grid-column-start / grid-column-end 简写</p>
<p>grid-row : 为 grid-row-start / grid-row-end 简写</p>
</blockquote>
<h3 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h3><blockquote>
<p>放置在哪个区域内</p>
</blockquote>
<ul>
<li>&lt;name&gt; : 与 grid-template-area 内设置的值相对应 或与grid-column 、grid-row 一起确定</li>
</ul>
<h3 id="justify-self-align-self"><a href="#justify-self-align-self" class="headerlink" title="justify-self / align-self"></a>justify-self / align-self</h3><blockquote>
<p>单元格内的位置</p>
</blockquote>
<ul>
<li>start</li>
<li>end</li>
<li>center</li>
<li>stretch</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>Grid</tag>
      </tags>
  </entry>
  <entry>
    <title>Mockjs</title>
    <url>/2020/02/24/577341194/</url>
    <content><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="DTD（数据模板定义规范）"><a href="#DTD（数据模板定义规范）" class="headerlink" title="DTD（数据模板定义规范）"></a>DTD（数据模板定义规范）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 属性名   name</span></span><br><span class="line"><span class="comment">// 生成规则 rule</span></span><br><span class="line"><span class="comment">// 属性值   value</span></span><br><span class="line"><span class="string">'name|rule'</span>: value</span><br></pre></td></tr></table></figure>
<p>生成规则 有 7 种格式：</p>
<ol>
<li>‘name|min-max’: value</li>
<li>‘name|count’: value</li>
<li>‘name|min-max.dmin-dmax’: value</li>
<li>‘name|min-max.dcount’: value</li>
<li>‘name|count.dmin-dmax’: value</li>
<li>‘name|count.dcount’: value</li>
<li>‘name|+step’: value</li>
</ol>
<p>生成规则和示例：</p>
<ol>
<li><p>属性值是字符串 String</p>
<ul>
<li><p>‘name|min-max’: string</p>
<p>通过重复 string 生成一个字符串，重复次数大于等于 min，小于等于 max。</p>
</li>
<li><p>‘name|count’: string</p>
<p>通过重复 string 生成一个字符串，重复次数等于 count。</p>
</li>
</ul>
</li>
<li><p>属性值是数字 Number</p>
<ul>
<li><p>‘name|+1’: number</p>
<p>属性值自动加 1，初始值为 number。</p>
</li>
<li><p>‘name|min-max’: number</p>
<p>生成一个大于等于 min、小于等于 max 的整数，属性值 number 只是用来确定类型。</p>
</li>
<li><p>‘name|min-max.dmin-dmax’: number</p>
<p>生成一个浮点数，整数部分大于等于 min、小于等于 max，小数部分保留 dmin 到 dmax 位。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Mock.mock(&#123;</span><br><span class="line">    <span class="string">'number1|1-100.1-10'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'number2|123.1-10'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'number3|123.3'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'number4|123.10'</span>: <span class="number">1.123</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"number1"</span>: <span class="number">12.92</span>,</span><br><span class="line">    <span class="string">"number2"</span>: <span class="number">123.51</span>,</span><br><span class="line">    <span class="string">"number3"</span>: <span class="number">123.777</span>,</span><br><span class="line">    <span class="string">"number4"</span>: <span class="number">123.1231091814</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>属性值是布尔型 Boolean</p>
<ul>
<li><p>‘name|1’: boolean</p>
<p>随机生成一个布尔值，值为 true 的概率是 1/2，值为 false 的概率同样是 1/2。</p>
</li>
<li><p>‘name|min-max’: value</p>
<p>随机生成一个布尔值，值为 value 的概率是 min / (min + max)，值为 !value 的概率是 max / (min + max)。</p>
</li>
</ul>
</li>
<li><p>属性值是对象 Object</p>
<ul>
<li><p>‘name|count’: object</p>
<p>从属性值 object 中随机选取 count 个属性。</p>
</li>
<li><p>‘name|min-max’: object</p>
<p>从属性值 object 中随机选取 min 到 max 个属性。</p>
</li>
</ul>
</li>
<li><p>属性值是数组 Array</p>
<ul>
<li><p>‘name|1’: array</p>
<p>从属性值 array 中随机选取 1 个元素，作为最终值。</p>
</li>
<li><p>‘name|+1’: array</p>
<p>从属性值 array 中顺序选取 1 个元素，作为最终值。</p>
</li>
<li><p>‘name|min-max’: array</p>
<p>通过重复属性值 array 生成一个新数组，重复次数大于等于 min，小于等于 max。</p>
</li>
<li><p>‘name|count’: array</p>
<p>通过重复属性值 array 生成一个新数组，重复次数为 count。</p>
</li>
</ul>
</li>
<li><p>属性值是函数 Function</p>
<ul>
<li><p>‘name’: function</p>
<p>执行函数 function，取其返回值作为最终的属性值，函数的上下文为属性 ‘name’ 所在的对象。</p>
</li>
</ul>
</li>
<li><p>属性值是正则表达式 RegExp</p>
<ul>
<li><p>‘name’: regexp</p>
<p>根据正则表达式 regexp 反向生成可以匹配它的字符串。用于生成自定义格式的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Mock.mock(&#123;</span><br><span class="line">    <span class="string">'regexp1'</span>: <span class="regexp">/[a-z][A-Z][0-9]/</span>,</span><br><span class="line">    <span class="string">'regexp2'</span>: <span class="regexp">/\w\W\s\S\d\D/</span>,</span><br><span class="line">    <span class="string">'regexp3'</span>: <span class="regexp">/\d&#123;5,10&#125;/</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"regexp1"</span>: <span class="string">"pJ7"</span>,</span><br><span class="line">    <span class="string">"regexp2"</span>: <span class="string">"F)\fp1G"</span>,</span><br><span class="line">    <span class="string">"regexp3"</span>: <span class="string">"561659409"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h2 id="DPD（数据占位符定义规范）"><a href="#DPD（数据占位符定义规范）" class="headerlink" title="DPD（数据占位符定义规范）"></a>DPD（数据占位符定义规范）</h2><p>占位符 只是在属性值字符串中占个位置，并不出现在最终的属性值中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@占位符</span><br><span class="line">@占位符(参数 [, 参数])</span><br></pre></td></tr></table></figure>
<h1 id="Mock-mock"><a href="#Mock-mock" class="headerlink" title="Mock.mock()"></a>Mock.mock()</h1><blockquote>
<p>Mock.mock( rurl?, rtype?, template|function( options ) )</p>
</blockquote>
<ul>
<li>rurl：需要拦截的URL，字符串或正则</li>
<li>rtype：Ajax请求类型</li>
<li>template：数据模板，对象或模板</li>
<li>function：响应数据的函数</li>
<li>options：本请求的选项集，包含url/type/body</li>
</ul>
<h1 id="Mock-setup"><a href="#Mock-setup" class="headerlink" title="Mock.setup()"></a>Mock.setup()</h1><blockquote>
<p>配置拦截 Ajax 请求时的行为。支持的配置项有：timeout。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Mock.setup(&#123;</span><br><span class="line">    timeout: <span class="string">'200-600'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Mock-Random"><a href="#Mock-Random" class="headerlink" title="Mock.Random"></a>Mock.Random</h1><blockquote>
<p>Mock.Random 是一个工具类，用于生成各种随机数据。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Random = Mock.Random</span><br><span class="line">Random.email()</span><br><span class="line"><span class="comment">// =&gt; "n.clark@miller.io"</span></span><br><span class="line">Mock.mock(<span class="string">'@email'</span>)</span><br><span class="line"><span class="comment">// =&gt; "y.lee@lewis.org"</span></span><br><span class="line">Mock.mock( &#123; <span class="attr">email</span>: <span class="string">'@email'</span> &#125; )</span><br><span class="line"><span class="comment">// =&gt; &#123; email: "v.lewis@hall.gov" &#125;</span></span><br></pre></td></tr></table></figure>

<p>扩展</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Random.extend(&#123;</span><br><span class="line">    constellation: <span class="function"><span class="keyword">function</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> constellations = [<span class="string">'白羊座'</span>, <span class="string">'金牛座'</span>, <span class="string">'双子座'</span>, <span class="string">'巨蟹座'</span>, <span class="string">'狮子座'</span>, <span class="string">'处女座'</span>, <span class="string">'天秤座'</span>, <span class="string">'天蝎座'</span>, <span class="string">'射手座'</span>, <span class="string">'摩羯座'</span>, <span class="string">'水瓶座'</span>, <span class="string">'双鱼座'</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.pick(constellations)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">Random.constellation()</span><br><span class="line"><span class="comment">// =&gt; "水瓶座"</span></span><br><span class="line">Mock.mock(<span class="string">'@CONSTELLATION'</span>)</span><br><span class="line"><span class="comment">// =&gt; "天蝎座"</span></span><br><span class="line">Mock.mock(&#123;</span><br><span class="line">    constellation: <span class="string">'@CONSTELLATION'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; &#123; constellation: "射手座" &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><ol>
<li>Random.boolean( min?, max?, current? ) =&gt; 一个随机的布尔值</li>
<li>Random.natural( min?, max? ) =&gt; 一个随机的自然数</li>
<li>Random.integer( min?, max? ) =&gt; 一个随机的整数</li>
<li>Random.float( min?, max?, dmin?, dmax? ) =&gt; 一个浮点数</li>
<li>Random.character( pool? ) =&gt; 一个随机字符<br> pool: ‘lower’/ ‘upper’/‘number’/‘symbol’/字符串选项</li>
<li>Random.string( pool?, min?, max? ) =&gt; 一个随机字符串</li>
<li>Random.range( start, stop?, step? ) =&gt; 一个整型数组</li>
</ol>
<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><ol>
<li>Random.date( format? ) =&gt; 一个随机日期的字符串</li>
<li>Random.time( format? ) =&gt; 一个随机时间的字符串</li>
<li>Random.datetime( format? ) =&gt; 一个随机的日期和时间的字符串</li>
<li>Random.now( unit?, format? ) =&gt; 当前的日期和时间字符串</li>
</ol>
<h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><ol>
<li>Random.image( size?, background?, foreground?, format?, text? )</li>
<li>Random.dataImage( size?, text? ) =&gt; 一段随机的base64编码</li>
</ol>
<h2 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h2><ol>
<li>Random.color()</li>
<li>Random.hex()</li>
<li>Random.rgb()</li>
<li>Random.rgba()</li>
<li>Random.hsl()</li>
</ol>
<h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><ol>
<li>Random.paragraph( min?, max? ) =&gt; 一段文本</li>
<li>Random.cparagraph( min?, max? ) =&gt; 一段中文文本</li>
<li>Random.sentence( min?, max? ) =&gt; 一句话</li>
<li>Random.csentence( min?, max? ) =&gt; 一句中文句子</li>
<li>Random.word( min?, max? ) =&gt; 几个个字母</li>
<li>Random.cword( pool?, min?, max? ) =&gt; 几个汉字</li>
<li>Random.title( min?, max? ) =&gt; 一句标题</li>
<li>Random.ctitle( min?, max? ) =&gt; 一个中文标题</li>
</ol>
<h2 id="Name"><a href="#Name" class="headerlink" title="Name"></a>Name</h2><ol>
<li>Random.first()</li>
<li>Random.last()</li>
<li>Random.name( middle? )</li>
<li>Random.cfirst()</li>
<li>Random.clast()</li>
<li>Random.cname()</li>
</ol>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><ol>
<li>Random.url( protocol?, host? )</li>
<li>Random.protocol()</li>
<li>Random.domain()</li>
<li>Random.tld() =&gt; 一个顶级域名</li>
<li>Random.email( domain? ) =&gt; 随机邮箱</li>
<li>Random.ip()</li>
</ol>
<h2 id="Address"><a href="#Address" class="headerlink" title="Address"></a>Address</h2><ol>
<li>Random.region() =&gt; 区域（华北）</li>
<li>Random.province() =&gt; 省</li>
<li>Random.city( prefix? ) =&gt; 市</li>
<li>Random.county( prefix? ) =&gt; 县</li>
<li>Random.zip() =&gt; 邮政编码</li>
</ol>
<h2 id="Helper"><a href="#Helper" class="headerlink" title="Helper"></a>Helper</h2><ol>
<li>Random.capitalize( word ) =&gt; 首字母大写</li>
<li>Random.upper( str ) =&gt; 全部大写</li>
<li>Random.lower( str ) =&gt; 全部小写</li>
<li>Random.pick( arr ) =&gt; 随机选取元素</li>
<li>Random.shuffle( arr ) =&gt; 打乱数组</li>
</ol>
<h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><ol>
<li>Random.guid() =&gt; GUID</li>
<li>Random.id() =&gt; 18位身份证</li>
<li>Random.increment( step? ) =&gt; 全局递增整数</li>
</ol>
<h1 id="在Vue2项目中结合webpack4使用mock"><a href="#在Vue2项目中结合webpack4使用mock" class="headerlink" title="在Vue2项目中结合webpack4使用mock"></a>在Vue2项目中结合webpack4使用mock</h1><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>基于webpack-dev-server实现mock-serve。 通过chokidar来观察mock 文件夹内容的变化 ，并在发生变化时会清除之前注册的mock-api接口，重新动态挂载新的接口，从而支持热更新。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参考：https://github.com/PanJiaChen/vue-element-admin/blob/master/mock/mock-server.js</span></span><br><span class="line"><span class="keyword">const</span> chokidar = <span class="built_in">require</span>(<span class="string">'chokidar'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取绝对路径</span></span><br><span class="line"><span class="keyword">const</span> mockDir = path.join(process.cwd(), <span class="string">'mock'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册路由</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">app</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;&#123;mockStartIndex: number, mockRoutesLength: number&#125;</span></span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerRoutes</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> mockLastIndex</span><br><span class="line">  <span class="keyword">const</span> mocks = <span class="built_in">require</span>(<span class="string">'./index.js'</span>) <span class="comment">// Mock数据</span></span><br><span class="line">  <span class="keyword">const</span> mocksForServer = mocks.map(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> responseFake(route.url, route.type, route.response)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> mock <span class="keyword">of</span> mocksForServer) &#123;</span><br><span class="line">    app[mock.type](mock.url, mock.response) <span class="comment">// 添加路由 mock serve</span></span><br><span class="line">    mockLastIndex = app._router.stack.length</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> mockRoutesLength = <span class="built_in">Object</span>.keys(mocksForServer).length</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    mockRoutesLength: mockRoutesLength,</span><br><span class="line">    mockStartIndex: mockLastIndex - mockRoutesLength</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除缓存</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unregisterRoutes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(<span class="built_in">require</span>.cache).forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i.includes(mockDir)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">require</span>.cache[<span class="built_in">require</span>.resolve(i)]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建mock server</span></span><br><span class="line"><span class="keyword">const</span> responseFake = <span class="function">(<span class="params">url, type, respond</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    url: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`<span class="subst">$&#123;process.env.VUE_APP_BASE_API&#125;</span><span class="subst">$&#123;url&#125;</span>`</span>),</span><br><span class="line">    type: type || <span class="string">'get'</span>,</span><br><span class="line">    response(req, res) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'request invoke:'</span> + req.path)</span><br><span class="line">      res.json(Mock.mock(respond <span class="keyword">instanceof</span> <span class="built_in">Function</span> ? respond(req, res) : respond))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// parse app.body</span></span><br><span class="line">  <span class="comment">// https://expressjs.com/en/4x/api.html#req.body</span></span><br><span class="line">  app.use(bodyParser.json())</span><br><span class="line">  app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">    extended: <span class="literal">true</span></span><br><span class="line">  &#125;))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mockRoutes = registerRoutes(app)</span><br><span class="line">  <span class="keyword">let</span> mockRoutesLength = mockRoutes.mockRoutesLength</span><br><span class="line">  <span class="keyword">let</span> mockStartIndex = mockRoutes.mockStartIndex</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监测文件，热跟新</span></span><br><span class="line">  chokidar.watch(mockDir, &#123;</span><br><span class="line">    ignored: <span class="regexp">/mock-server/</span>,</span><br><span class="line">    ignoreInitial: <span class="literal">true</span></span><br><span class="line">  &#125;).on(<span class="string">'all'</span>, (event, path) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (event === <span class="string">'change'</span> || event === <span class="string">'add'</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 移除mock route</span></span><br><span class="line">        app._router.stack.splice(mockStartIndex, mockRoutesLength)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 清除缓存</span></span><br><span class="line">        unregisterRoutes()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> mockRoutes = registerRoutes(app)</span><br><span class="line">        mockRoutesLength = mockRoutes.mockRoutesLength</span><br><span class="line">        mockStartIndex = mockRoutes.mockStartIndex</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(chalk.magentaBright(<span class="string">`\n &gt; Mock Server hot reload success! changed  <span class="subst">$&#123;path&#125;</span>`</span>))</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.redBright(error))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mockjs</category>
      </categories>
      <tags>
        <tag>mockjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Router笔记</title>
    <url>/2020/03/01/1000998621/</url>
    <content><![CDATA[<h1 id="Vue-Router功能"><a href="#Vue-Router功能" class="headerlink" title="Vue Router功能"></a>Vue Router功能</h1><ul>
<li>嵌套的路由/视图表</li>
<li>模块化的、基于组件的路由配置</li>
<li>路由参数、查询、通配符</li>
<li>基于 Vue.js 过渡系统的视图过渡效果</li>
<li>细粒度的导航控制</li>
<li>带有自动激活的 CSS class 的链接</li>
<li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li>
<li>自定义的滚动条行为</li>
</ul>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0. 如果使用模块化机制编程，导入Vue和VueRouter，要调用 Vue.use(VueRouter)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义 (路由) 组件。</span></span><br><span class="line"><span class="comment">// 可以从其他文件 import 进来</span></span><br><span class="line"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定义路由</span></span><br><span class="line"><span class="comment">// 每个路由应该映射一个组件。 其中"component" 可以是</span></span><br><span class="line"><span class="comment">// 通过 Vue.extend() 创建的组件构造器，</span></span><br><span class="line"><span class="comment">// 或者，只是一个组件配置对象。</span></span><br><span class="line"><span class="comment">// 我们晚点再讨论嵌套路由。</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建 router 实例，然后传 `routes` 配置</span></span><br><span class="line"><span class="comment">// 你还可以传别的配置参数, 不过先这么简单着吧。</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes <span class="comment">// (缩写) 相当于 routes: routes</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建和挂载根实例。</span></span><br><span class="line"><span class="comment">// 记得要通过 router 配置参数注入路由，</span></span><br><span class="line"><span class="comment">// 从而让整个应用都有路由功能</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在，应用已经启动了！</span></span><br></pre></td></tr></table></figure>

<h1 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h1><blockquote>
<p>/user/:id</p>
</blockquote>
<p>一个“路径参数”使用冒号 <code>:</code> 标记。当匹配到一个路由时，参数值会被设置到 <code>this.$route.params</code></p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">匹配路径</th>
<th align="left">$route.params</th>
</tr>
</thead>
<tbody><tr>
<td align="left">/user/:username</td>
<td align="left">/user/evan</td>
<td align="left"><code>{ username: &#39;evan&#39; }</code></td>
</tr>
<tr>
<td align="left">/user/:username/post/:post_id</td>
<td align="left">/user/evan/post/123</td>
<td align="left"><code>{ username: &#39;evan&#39;, post_id: &#39;123&#39; }</code></td>
</tr>
</tbody></table>
<p>$route.query： URL查询参数、$route.hash</p>
<h2 id="响应路由参数的变化"><a href="#响应路由参数的变化" class="headerlink" title="响应路由参数的变化"></a>响应路由参数的变化</h2><blockquote>
<p>从 <code>/user/foo</code> 导航到 <code>/user/bar</code>，<strong>原来的组件实例会被复用</strong>。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。<strong>不过，这也意味着组件的生命周期钩子不会再被调用</strong>。</p>
</blockquote>
<ol>
<li><p>监测$route对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  template: <span class="string">'...'</span>,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="string">'$route'</span> (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">      <span class="comment">// 对路由变化作出响应...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>beforeRouteUpdate</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  template: <span class="string">'...'</span>,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// react to route changes...</span></span><br><span class="line">    <span class="comment">// don't forget to call next()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="捕获所有路由"><a href="#捕获所有路由" class="headerlink" title="捕获所有路由"></a>捕获所有路由</h2><p>匹配任意路径，通配符*</p>
<p><strong>注意使用顺序，应放最后</strong>，this.$route.params.pathMatch存放匹配路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 会匹配所有路径</span></span><br><span class="line">  path: <span class="string">'*'</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 会匹配以 `/user-` 开头的任意路径</span></span><br><span class="line">  path: <span class="string">'/user-*'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="匹配顺序"><a href="#匹配顺序" class="headerlink" title="匹配顺序"></a>匹配顺序</h2><p>先定义先匹配</p>
<h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><p>在 VueRouter 的参数中使用children配置</p>
<p><strong>以 <code>/</code> 开头的嵌套路径会被当作根路径。 这让你充分的使用嵌套组件而无须设置嵌套的路径</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User,</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// 当 /user/:id 匹配成功，</span></span><br><span class="line">        <span class="comment">// UserHome 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">component</span>: UserHome &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 当 /user/:id/profile 匹配成功，</span></span><br><span class="line">          <span class="comment">// UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">          path: <span class="string">'profile'</span>,</span><br><span class="line">          component: UserProfile</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 当 /user/:id/posts 匹配成功</span></span><br><span class="line">          <span class="comment">// UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中</span></span><br><span class="line">          path: <span class="string">'posts'</span>,</span><br><span class="line">          component: UserPosts</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h1><ol>
<li><p>router.push(location, onComplete?, onAbort?)</p>
<p>onComplete：导航成功完成 (在所有的异步钩子被解析之后) </p>
<p>onAbort：终止 (导航到相同的路由、或在当前导航完成之前导航到另一个不同的路由) 的时候进行相应的调用</p>
<p>返回Promise</p>
<table>
<thead>
<tr>
<th>声明式</th>
<th>编程式</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;router-link :to=”…&gt;</td>
<td><code>router.push(...)</code></td>
</tr>
</tbody></table>
<p><strong>path存在，则params会被忽略</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.push(<span class="string">'home'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'home'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="string">'123'</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'register'</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">'private'</span> &#125;&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>router.replace(location, onComplete?, onAbort?)</p>
<p>替换掉当前的 history 记录。</p>
<table>
<thead>
<tr>
<th>声明式</th>
<th>编程式</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;router-link :to=”…” replace&gt;</td>
<td>router.replace(…)</td>
</tr>
</tbody></table>
</li>
<li><p>router.go(n)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在浏览器记录中前进一步，等同于 history.forward()</span></span><br><span class="line">router.go(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后退一步记录，等同于 history.back()</span></span><br><span class="line">router.go(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前进 3 步记录</span></span><br><span class="line">router.go(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 history 记录不够用，那就默默地失败呗</span></span><br><span class="line">router.go(<span class="number">-100</span>)</span><br><span class="line">router.go(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h1><p>在创建 Router 实例的时候，在 <code>routes</code> 配置中给某个路由设置名称</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/user/:userId'</span>,</span><br><span class="line">      name: <span class="string">'user'</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125;&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;settings&#x2F;emails                                       &#x2F;settings&#x2F;profile</span><br><span class="line">+-----------------------------------+                  +------------------------------+</span><br><span class="line">| UserSettings                      |                  | UserSettings                 |</span><br><span class="line">| +-----+-------------------------+ |                  | +-----+--------------------+ |</span><br><span class="line">| | Nav | UserEmailsSubscriptions | |  +------------&gt;  | | Nav | UserProfile        | |</span><br><span class="line">| |     +-------------------------+ |                  | |     +--------------------+ |</span><br><span class="line">| |     |                         | |                  | |     | UserProfilePreview | |</span><br><span class="line">| +-----+-------------------------+ |                  | +-----+--------------------+ |</span><br><span class="line">+-----------------------------------+                  +------------------------------+</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Nav</code> 只是一个常规组件。</li>
<li><code>UserSettings</code> 是一个视图组件。</li>
<li><code>UserEmailsSubscriptions</code>、<code>UserProfile</code>、<code>UserProfilePreview</code> 是嵌套的视图组件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- UserSettings.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User Settings<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">NavBar</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"helper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/settings'</span>,</span><br><span class="line">  <span class="comment">// 你也可以在顶级路由就配置命名视图</span></span><br><span class="line">  component: UserSettings,</span><br><span class="line">  children: [&#123;</span><br><span class="line">    path: <span class="string">'emails'</span>,</span><br><span class="line">    component: UserEmailsSubscriptions</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'profile'</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      <span class="keyword">default</span>: UserProfile,</span><br><span class="line">      helper: UserProfilePreview</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="重定向和别名"><a href="#重定向和别名" class="headerlink" title="重定向和别名"></a>重定向和别名</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/a'</span>, <span class="attr">redirect</span>: &#123; <span class="attr">name</span>: <span class="string">'foo'</span> &#125;, <span class="attr">alias</span>: <span class="string">'/b'</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/a'</span>, <span class="attr">redirect</span>: <span class="function"><span class="params">to</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 方法接收 目标路由 作为参数</span></span><br><span class="line">      <span class="comment">// return 重定向的 字符串路径/路径对象</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="路由组件传参"><a href="#路由组件传参" class="headerlink" title="路由组件传参"></a>路由组件传参</h1><p>使用props将组件与路由解耦</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User, <span class="attr">props</span>: <span class="literal">true</span> &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于包含命名视图的路由，你必须分别为每个命名视图添加 `props` 选项：</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/user/:id'</span>,</span><br><span class="line">      components: &#123; <span class="attr">default</span>: User, <span class="attr">sidebar</span>: Sidebar &#125;,</span><br><span class="line">      props: &#123; <span class="attr">default</span>: <span class="literal">true</span>, <span class="attr">sidebar</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Props类型"><a href="#Props类型" class="headerlink" title="Props类型"></a>Props类型</h2><ol>
<li><p>Boolean</p>
<p>route.params 将会被设置为组件属性</p>
</li>
<li><p>对象</p>
<p>props是一个对象，它会被按原样设置为组件属性。当 props 是静态的时候有用</p>
</li>
<li><p>函数</p>
<p>创建一个函数返回 props</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/search'</span>, <span class="attr">component</span>: SearchUser, <span class="attr">props</span>: <span class="function">(<span class="params">route</span>) =&gt;</span> (&#123; <span class="attr">query</span>: route.query.q &#125;) &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="History模式"><a href="#History模式" class="headerlink" title="History模式"></a>History模式</h1><blockquote>
<p>mode: ‘history’</p>
</blockquote>
<h1 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h1><h2 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h2><ol>
<li><p>全局前置守卫</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>to: Route: 即将要进入的目标 路由对象</li>
<li>from: Route: 当前导航正要离开的路由</li>
<li>next: Function: 一定要调用该方法来 <strong>resolve</strong> 这个钩子。执行效果依赖 next 方法的调用参数。<ul>
<li>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 <strong>confirmed</strong> (确认的)。</li>
<li>next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</li>
<li>next(‘/‘) 或者 next({ path: ‘/‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: ‘home’ 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项。</li>
<li>next(error): (2.4.0+) 如果传入next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError() 注册过的回调。</li>
</ul>
</li>
</ul>
</li>
<li><p>全局解析守卫</p>
<p>router.beforeResolve</p>
<p>导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用</p>
</li>
<li><p>全局后置守卫</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="路由独享守卫"><a href="#路由独享守卫" class="headerlink" title="路由独享守卫"></a>路由独享守卫</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/foo'</span>,</span><br><span class="line">      component: Foo,</span><br><span class="line">      beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  template: <span class="string">`...`</span>,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">    next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">  	&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">    next(<span class="literal">false</span>) <span class="comment">// 取消离开</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="导航解析流程"><a href="#导航解析流程" class="headerlink" title="导航解析流程"></a>导航解析流程</h2><ol>
<li>导航被触发。</li>
<li>在失活的组件里调用离开守卫。</li>
<li>调用全局的 beforeEach 守卫。</li>
<li>在重用的组件里调用 beforeRouteUpdate 守卫。</li>
<li>在路由配置里调用 beforeEnter。</li>
<li>解析异步路由组件。</li>
<li>在被激活的组件里调用 beforeRouteEnter。</li>
<li>调用全局的 beforeResolve守卫 。</li>
<li>导航被确认。</li>
<li>调用全局的 afterEach 钩子。</li>
<li>触发 DOM 更新。</li>
<li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li>
</ol>
<h1 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h1><p>定义路由的时候可以配置 <code>meta</code> 字段</p>
<p>通过$route.matched 数组访问</p>
<h1 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="单个路由过渡"><a href="#单个路由过渡" class="headerlink" title="单个路由过渡"></a>单个路由过渡</h2><p>可在大部分组件内使用transition</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;transition name="slide"&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="foo"&gt;...&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/transition&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基于路由的动态过渡"><a href="#基于路由的动态过渡" class="headerlink" title="基于路由的动态过渡"></a>基于路由的动态过渡</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用动态的 transition name --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:name</span>=<span class="string">"transitionName"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接着在父组件内</span></span><br><span class="line"><span class="comment">// watch $route 决定使用哪种过渡</span></span><br><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">'$route'</span> (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> toDepth = to.path.split(<span class="string">'/'</span>).length</span><br><span class="line">    <span class="keyword">const</span> fromDepth = <span class="keyword">from</span>.path.split(<span class="string">'/'</span>).length</span><br><span class="line">    <span class="keyword">this</span>.transitionName = toDepth &lt; fromDepth ? <span class="string">'slide-right'</span> : <span class="string">'slide-left'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h1><ol>
<li>导航完成后，在组件生命周期钩子中获取数据</li>
<li>导航完成之前获取（beforeRouteEnter、beforeRouteUpdate）</li>
</ol>
<h1 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">	<span class="comment">// return 期望滚动到哪个的位置</span></span><br><span class="line">  <span class="keyword">if</span> (savedPosition) &#123;</span><br><span class="line">    <span class="keyword">return</span> savedPosition <span class="comment">// 浏览器 前进/后退 保持原状</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(to.hash)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      selector: to.hash</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>异步滚动</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(&#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;)</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Foo.vue'</span>)</span><br></pre></td></tr></table></figure>

<p>组件按组分块</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-foo" */</span> <span class="string">'./Foo.vue'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>vue-router</category>
      </categories>
      <tags>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex笔记</title>
    <url>/2020/02/29/2056824029/</url>
    <content><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><ul>
<li>Vuex 的状态存储是响应式的</li>
<li>改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong></li>
</ul>
<h1 id="Sate"><a href="#Sate" class="headerlink" title="Sate"></a>Sate</h1><p>单一状态树</p>
<p>在计算属性中返回某个状态。</p>
<ul>
<li><p>store.state.count</p>
</li>
<li><p>把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.state.count</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapSate</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mapState(&#123;</span><br><span class="line">  <span class="comment">// 箭头函数可使代码更简练</span></span><br><span class="line">  count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传字符串参数 'count' 等同于 `state =&gt; state.count`</span></span><br><span class="line">  countAlias: <span class="string">'count'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class="line">  countPlusLocalState (state) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.count + <span class="keyword">this</span>.localCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h1 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h1><p>store 的计算属性</p>
<ul>
<li><p>通过属性访问</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  doneTodos: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受getters作为第二参数</span></span><br><span class="line">doneTodosCount: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> getters.doneTodos.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过函数访问</p>
<p>返回函数，这样可以实现根据id查询，不会有缓存</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getTodoById: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.todos.find(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id === id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapGetters</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...mapGetters([</span><br><span class="line">  <span class="string">'doneTodosCount'</span>,</span><br><span class="line">  <span class="string">'anotherGetter'</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">mapGetters(&#123;</span><br><span class="line">  <span class="comment">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></span><br><span class="line">  doneCount: <span class="string">'doneTodosCount'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h1><ul>
<li><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong>。</p>
</li>
<li><p><strong>mutation 必须是同步函数</strong></p>
</li>
<li><p>使用常量替代 Mutation 事件类型</p>
<p>在mutation-types.js导出常量</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.commit(<span class="string">'increment'</span>, &#123;</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>mapMutations</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...mapMutations([</span><br><span class="line">  <span class="string">'increment'</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line">  <span class="string">'incrementBy'</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span></span><br><span class="line">]),</span><br><span class="line">...mapMutations(&#123;</span><br><span class="line">  add: <span class="string">'increment'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><ul>
<li>ction 提交的是 mutation，而不是直接变更状态。</li>
<li>Action 可以包含任意异步操作。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  increment (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'increment'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.dispatch(<span class="string">'increment'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>mapActions</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...mapActions([</span><br><span class="line">  <span class="string">'increment'</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.dispatch('increment')`</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `mapActions` 也支持载荷：</span></span><br><span class="line">  <span class="string">'incrementBy'</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch('incrementBy', amount)`</span></span><br><span class="line">]),</span><br><span class="line">...mapActions(&#123;</span><br><span class="line">  add: <span class="string">'increment'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.dispatch('increment')`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>Promise、async/await</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'someMutation'</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">  <span class="keyword">await</span> dispatch(<span class="string">'actionA'</span>) <span class="comment">// 等待 actionA 完成</span></span><br><span class="line">  commit(<span class="string">'gotOtherData'</span>, <span class="keyword">await</span> getOtherData())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h1><h2 id="局部状态"><a href="#局部状态" class="headerlink" title="局部状态"></a>局部状态</h2><p>可以访问模块的局部状态对象</p>
<p>根节点状态则为 <code>context.rootState</code></p>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p><code>namespaced: true</code> 的方式使其成为带命名空间的模块</p>
<h3 id="在带命名空间的模块内访问全局内容"><a href="#在带命名空间的模块内访问全局内容" class="headerlink" title="在带命名空间的模块内访问全局内容"></a>在带命名空间的模块内访问全局内容</h3><ul>
<li>全局 state 和 getter，<code>rootState</code> 和 <code>rootGetters</code> 会作为第三和第四参数传入 getter，也会通过 <code>context</code> 对象的属性传入 action</li>
<li>全局命名空间内分发 action 或提交 mutation，将 <code>{ root: true }</code> 作为第三参数传给 <code>dispatch</code> 或 <code>commit</code> 即可</li>
<li>注册全局 action，你可添加 <code>root: true</code>，并将这个 action 的定义放在函数 <code>handler</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...mapActions(<span class="string">'some/nested/module'</span>, [</span><br><span class="line">  <span class="string">'foo'</span>, <span class="comment">// -&gt; this.foo()</span></span><br><span class="line">  <span class="string">'bar'</span> <span class="comment">// -&gt; this.bar()</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<ul>
<li>通过使用 <code>createNamespacedHelpers</code> 创建基于某个命名空间辅助函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createNamespacedHelpers &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; mapState, mapActions &#125; = createNamespacedHelpers(<span class="string">'some/nested/module'</span>)</span><br></pre></td></tr></table></figure>



<h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><p>严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。<strong>不要在发布环境下启用严格模式</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">strict: process.env.NODE_ENV !== <span class="string">'production'</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vuex</category>
      </categories>
      <tags>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Widget小部件</title>
    <url>/2020/02/18/2959249981/</url>
    <content><![CDATA[<h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><ul>
<li>Center</li>
<li>Container 容器</li>
<li>ListView</li>
<li>ListTile</li>
<li>GirdView</li>
<li>Column</li>
<li>Row</li>
<li>wrap</li>
<li>Padding</li>
<li>Expanded flex布局</li>
<li>Stack</li>
<li>Align</li>
<li>Positioned</li>
<li>AspectRatio 子元素宽高比</li>
<li>SizedBox<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1></li>
<li>Image</li>
<li>NetWorkImage</li>
<li>CircleAvatar<h1 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h1></li>
<li>StatelessWidget</li>
<li>Text</li>
<li>MaterialApp</li>
<li>Scaffold</li>
<li>ChipOval 圆角</li>
<li>Icon</li>
<li>Card</li>
<li>RaisedButton</li>
<li>Chip</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>es6-es10语法整理</title>
    <url>/2019/10/30/3122517155/</url>
    <content><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// constructor 构造函数</span></span><br><span class="line">  <span class="keyword">constructor</span>(name, color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`name: <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, color: <span class="subst">$&#123;<span class="keyword">this</span>.color&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal(<span class="string">'dog'</span>, <span class="string">'black'</span>);</span><br><span class="line">animal.toString(); <span class="comment">// name: dog, color: black</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animal.hasOwnProperty(<span class="string">'name'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(animal.hasOwnProperty(<span class="string">'color'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(animal.__proto__.hasOwnProperty(<span class="string">'toString'</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类的继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(action) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'cat'</span>, <span class="string">'white'</span>);</span><br><span class="line">    <span class="keyword">this</span>.action = action;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">super</span>.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat(<span class="string">'run'</span>);</span><br><span class="line">cat.toString(); <span class="comment">// name: cat, color: white</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p><strong>ES6允许在一个模块中使用export来导出多个变量或函数。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sqrt = <span class="built_in">Math</span>.sqrt;</span><br><span class="line"><span class="keyword">export</span> &#123;name, sqrt&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123;name&#125; form <span class="string">'dome'</span></span><br></pre></td></tr></table></figure>

<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p><strong>注意this</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> <span class="number">1</span>)</span><br><span class="line">(<span class="function"><span class="params">v</span> =&gt;</span> v + <span class="number">1</span>)</span><br><span class="line">(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b)</span><br><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  alert(<span class="string">"hello"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> !e</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="设置默认值"><a href="#设置默认值" class="headerlink" title="设置默认值"></a>设置默认值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function">(<span class="params">a, b = <span class="number">10</span></span>) =&gt;</span> a + b)</span><br></pre></td></tr></table></figure>

<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`name is <span class="subst">$&#123;name&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>

<h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>];</span><br><span class="line"><span class="keyword">let</span> [one, two, ...dome] = foo</span><br><span class="line"><span class="built_in">console</span>.log(one, two, dome) <span class="comment">// one two [ 'three', 'four' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换</span></span><br><span class="line"><span class="built_in">console</span>.log(one, two);</span><br><span class="line">([one, two] = [two, one]);</span><br><span class="line"><span class="built_in">console</span>.log(one, two);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">  stuName: <span class="string">'Tom'</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;stuName, age&#125; = student;</span><br><span class="line"><span class="built_in">console</span>.log(stuName, age)</span><br></pre></td></tr></table></figure>

<h2 id="延展操作符"><a href="#延展操作符" class="headerlink" title="延展操作符"></a>延展操作符</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2];</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">name</span>: <span class="string">'Tome'</span>&#125;,</span><br><span class="line">  obj2 = &#123;<span class="attr">name</span>: <span class="string">'Sam'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> obj3 = &#123;...obj1, ...obj2&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="对象属性简写"><a href="#对象属性简写" class="headerlink" title="对象属性简写"></a>对象属性简写</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> t1 = <span class="string">'hello'</span>, t2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> objDome = &#123;</span><br><span class="line">  t1, t2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> waitSecond = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(resolve, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">waitSecond</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">return</span> waitSecond;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="built_in">console</span>.error(e))</span><br><span class="line">  .finally(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'finally'</span>))</span><br></pre></td></tr></table></figure>


<h2 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h2><h1 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h1><h2 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes()"></a>Array.prototype.includes()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">6</span>, <span class="number">1</span>)); <span class="comment">//  false 从下表1开始寻找6</span></span><br></pre></td></tr></table></figure>

<h2 id="幂指数运算"><a href="#幂指数运算" class="headerlink" title="幂指数运算"></a>幂指数运算</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> ** <span class="number">10</span>); <span class="comment">// 1024</span></span><br></pre></td></tr></table></figure>

<h1 id="ES8"><a href="#ES8" class="headerlink" title="ES8"></a>ES8</h1><h2 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> i <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> value = <span class="built_in">Object</span>.values(obj);</span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>
<h2 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`key:<span class="subst">$&#123;key&#125;</span>,value:<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="String-padding"><a href="#String-padding" class="headerlink" title="String padding"></a>String padding</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String.prototype.padStart</span></span><br><span class="line"><span class="comment">// String.padStart(targetLength,[padString])</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'0.0'</span>.padStart(<span class="number">5</span>, <span class="string">'12'</span>)) <span class="comment">// 120.0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'0.0'</span>.padStart(<span class="number">10</span>)) <span class="comment">//        0.0 ,参数省略为空格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String.prototype.padEnd</span></span><br><span class="line"><span class="comment">// String.padEnd(targetLength,padString])</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'0.0'</span>.padEnd(<span class="number">5</span>, <span class="string">'1'</span>)) <span class="comment">// 0.011</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'0.0'</span>.padEnd(<span class="number">5</span>)) <span class="comment">// 0.0     ,参数省略为空格</span></span><br></pre></td></tr></table></figure>

<h2 id="函数参数列表结尾允许逗号"><a href="#函数参数列表结尾允许逗号" class="headerlink" title="函数参数列表结尾允许逗号"></a>函数参数列表结尾允许逗号</h2><h2 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h2><blockquote>
<p>用来获取一个对象的所有自身属性的描述符,如果没有任何自身属性，则返回空对象。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  name: <span class="string">'Tom'</span>,</span><br><span class="line">  getName()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(obj2))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123; name:</span></span><br><span class="line"><span class="comment">   &#123; value: 'Tom',</span></span><br><span class="line"><span class="comment">     writable: true,</span></span><br><span class="line"><span class="comment">     enumerable: true,</span></span><br><span class="line"><span class="comment">     configurable: true &#125;,</span></span><br><span class="line"><span class="comment">  getName:</span></span><br><span class="line"><span class="comment">   &#123; value: [Function: getName],</span></span><br><span class="line"><span class="comment">     writable: true,</span></span><br><span class="line"><span class="comment">     enumerable: true,</span></span><br><span class="line"><span class="comment">     configurable: true &#125; &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="SharedArrayBuffer对象"><a href="#SharedArrayBuffer对象" class="headerlink" title="SharedArrayBuffer对象"></a>SharedArrayBuffer对象</h2><blockquote>
<p>SharedArrayBuffer 对象用来表示一个通用的，固定长度的原始二进制数据缓冲区，类似于 ArrayBuffer 对象，它们都可以用来在共享内存（shared memory）上创建视图。与 ArrayBuffer 不同的是，SharedArrayBuffer 不能被分离。</p>
</blockquote>
<h2 id="Atomics对象"><a href="#Atomics对象" class="headerlink" title="Atomics对象"></a>Atomics对象</h2><p>详见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics" target="_blank" rel="noopener">MDN</a></p>
<h1 id="ES9"><a href="#ES9" class="headerlink" title="ES9"></a>ES9</h1><h2 id="异步迭代"><a href="#异步迭代" class="headerlink" title="异步迭代"></a>异步迭代</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fun = <span class="keyword">async</span> (arr) =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Promise-finally"><a href="#Promise-finally" class="headerlink" title="Promise.finally()"></a>Promise.finally()</h2><blockquote>
<p>finally()允许你指定最终的逻辑</p>
</blockquote>
<h2 id="Rest-Spread-属性"><a href="#Rest-Spread-属性" class="headerlink" title="Rest/Spread 属性"></a>Rest/Spread 属性</h2><blockquote>
<p>可以使用扩展运算符拷贝一个对象，像是这样 obj2 = {…obj1}，但是 这只是一个对象的浅拷贝。另外，如果一个对象A的属性是对象B，那么在克隆后的对象cloneB中，该属性指向对象B。</p>
</blockquote>
<h2 id="正则表达式命名捕获组"><a href="#正则表达式命名捕获组" class="headerlink" title="正则表达式命名捕获组"></a>正则表达式命名捕获组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reDate = <span class="regexp">/(?&lt;year&gt;[0-9]&#123;4&#125;)-(?&lt;month&gt;[0-9]&#123;2&#125;)-(?&lt;day&gt;[0-9]&#123;2&#125;)/</span>,</span><br><span class="line">  match = reDate.exec(<span class="string">'2019-10-30'</span>),</span><br><span class="line">  &#123;year, month, day&#125; = match.groups</span><br><span class="line"><span class="built_in">console</span>.log(year, month, day) <span class="comment">// 2019 10 30</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="string">'2019-10-30'</span>).replace(reDate, <span class="string">`<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span>-<span class="subst">$&#123;year&#125;</span>`</span>)); <span class="comment">// 10-30-2019</span></span><br></pre></td></tr></table></figure>

<h2 id="正则表达式反向断言"><a href="#正则表达式反向断言" class="headerlink" title="正则表达式反向断言"></a>正则表达式反向断言</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 肯定反向断言</span></span><br><span class="line"><span class="keyword">const</span> reLookbehind = <span class="regexp">/(?&lt;=\D)\d+/</span>,</span><br><span class="line">  match1 = reLookbehind.exec(<span class="string">'$123.89'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(match1[<span class="number">0</span>]); <span class="comment">// 123</span></span><br><span class="line"><span class="comment">// 否定反向断言</span></span><br><span class="line"><span class="keyword">const</span> reLookBehindNeg = <span class="regexp">/(?&lt;!\D)\d+/</span>,</span><br><span class="line">  match2 = reLookBehindNeg.exec(<span class="string">'$123.89'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(match2[<span class="number">0</span>]) <span class="comment">// 23</span></span><br></pre></td></tr></table></figure>

<h2 id="正则表达式dotAll模式"><a href="#正则表达式dotAll模式" class="headerlink" title="正则表达式dotAll模式"></a>正则表达式dotAll模式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/hello.world/</span>.test(<span class="string">'hello\nworld'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/hello.world/</span>s.test(<span class="string">'hello\nworld'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="正则表达式-Unicode-转义"><a href="#正则表达式-Unicode-转义" class="headerlink" title="正则表达式 Unicode 转义"></a>正则表达式 Unicode 转义</h2><blockquote>
<p>此特性可以避免使用特定 Unicode 区间来进行内容类型判断，提升可读性和可维护性.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reGreekSymbol = <span class="regexp">/\p&#123;Script=Greek&#125;/u</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reGreekSymbol.test(<span class="string">'π'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="非转义序列的模板字符串"><a href="#非转义序列的模板字符串" class="headerlink" title="非转义序列的模板字符串"></a>非转义序列的模板字符串</h2><h1 id="ES10"><a href="#ES10" class="headerlink" title="ES10"></a>ES10</h1><h2 id="行分隔符（U-2028）和段分隔符（U-2029）符号现在允许在字符串文字中，与JSON匹配"><a href="#行分隔符（U-2028）和段分隔符（U-2029）符号现在允许在字符串文字中，与JSON匹配" class="headerlink" title="行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与JSON匹配"></a>行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与JSON匹配</h2><blockquote>
<p>以前，这些符号在字符串文字中被视为行终止符，因此使用它们会导致SyntaxError异常。</p>
</blockquote>
<h2 id="更加友好的-JSON-stringify"><a href="#更加友好的-JSON-stringify" class="headerlink" title="更加友好的 JSON.stringify"></a>更加友好的 JSON.stringify</h2><blockquote>
<p>如果输入 Unicode 格式但是超出范围的字符，在原先JSON.stringify返回格式错误的Unicode字符串。现在实现了一个改变JSON.stringify的第3阶段提案，因此它为其输出转义序列，使其成为有效Unicode（并以UTF-8表示）</p>
</blockquote>
<h2 id="Array的-flat-方法和-flatMap-方法"><a href="#Array的-flat-方法和-flatMap-方法" class="headerlink" title="Array的 flat()方法和 flatMap()方法"></a>Array的 flat()方法和 flatMap()方法</h2><blockquote>
<p>node -v &gt;= 11</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * flat()和 flatMap()本质上就是是归纳（reduce） 与 合并（concat）的操作。</span></span><br><span class="line"><span class="comment"> * Array.prototype.flat()</span></span><br><span class="line"><span class="comment"> * flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.flat());<span class="comment">// [ 1, 2, 3, 4 ] 默认值是 1</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]];</span><br><span class="line"><span class="built_in">console</span>.log(arr2.flat(<span class="literal">Infinity</span>));<span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"><span class="comment">// flatMap() 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 和 深度值1的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。这里我们拿map方法与flatMap方法做一个比较。</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="string">"今天天气不错"</span>, <span class="string">""</span>, <span class="string">"早上好"</span>]</span><br><span class="line">arr3.flatMap(<span class="function"><span class="params">s</span> =&gt;</span> s.split(<span class="string">''</span>));<span class="comment">// ["今", "天", "天", "气", "不", "错", "早", "上", "好"]</span></span><br></pre></td></tr></table></figure>

<h2 id="trimStart-方法和-trimEnd-方法"><a href="#trimStart-方法和-trimEnd-方法" class="headerlink" title="trimStart()方法和 trimEnd()方法"></a>trimStart()方法和 trimEnd()方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'   123 '</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.trimStart(), str.trimEnd());</span><br></pre></td></tr></table></figure>

<h2 id="Object-fromEntries-node-v-gt-12"><a href="#Object-fromEntries-node-v-gt-12" class="headerlink" title="Object.fromEntries() (node -v &gt;= 12)"></a>Object.fromEntries() (node -v &gt;= 12)</h2><blockquote>
<p>Object.fromEntries() 是 Object.entries() 的反转。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> entries = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'foo'</span>, <span class="string">'bar'</span>],</span><br><span class="line">  [<span class="string">'baz'</span>, <span class="number">42</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.fromEntries(entries));</span><br></pre></td></tr></table></figure>

<h2 id="Symbol-prototype-description"><a href="#Symbol-prototype-description" class="headerlink" title="Symbol.prototype.description()"></a>Symbol.prototype.description()</h2><blockquote>
<p>node 暂未实现</p>
</blockquote>
<h2 id="String-prototype-matchAll"><a href="#String-prototype-matchAll" class="headerlink" title="String.prototype.matchAll"></a>String.prototype.matchAll</h2><blockquote>
<p>方法返回一个包含所有匹配正则表达式及分组捕获结果的迭代器。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">'table football, foot'</span>;</span><br><span class="line"><span class="keyword">const</span> matches = str1.matchAll(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'foo*'</span>, <span class="string">'g'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(matches, m =&gt; m[<span class="number">0</span>]));</span><br></pre></td></tr></table></figure>

<h2 id="Function-prototype-toString-现在返回精确字符，包括空格和注释"><a href="#Function-prototype-toString-现在返回精确字符，包括空格和注释" class="headerlink" title="Function.prototype.toString()现在返回精确字符，包括空格和注释"></a>Function.prototype.toString()现在返回精确字符，包括空格和注释</h2><h2 id="修改-catch-绑定，catch可无参数"><a href="#修改-catch-绑定，catch可无参数" class="headerlink" title="修改 catch 绑定，catch可无参数"></a>修改 catch 绑定，catch可无参数</h2><blockquote>
<p>node暂未实现</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * try &#123;</span></span><br><span class="line"><span class="comment"> * &#125; catch () &#123;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="新的基本数据类型-BigInt"><a href="#新的基本数据类型-BigInt" class="headerlink" title="新的基本数据类型 BigInt"></a>新的基本数据类型 BigInt</h2><blockquote>
<p>node -v &gt;= 10.4<br>更多详见 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noopener">MDN</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> theBiggestInt = <span class="number">9007199254740991n</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alsoHuge = BigInt(<span class="number">9007199254740991</span>);</span><br><span class="line"><span class="comment">// ↪ 9007199254740991n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hugeString = BigInt(<span class="string">"9007199254740991"</span>);</span><br><span class="line"><span class="comment">// ↪ 9007199254740991n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hugeHex = BigInt(<span class="string">"0x1fffffffffffff"</span>);</span><br><span class="line"><span class="comment">// ↪ 9007199254740991n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hugeBin = BigInt(<span class="string">"0b11111111111111111111111111111111111111111111111111111"</span>);</span><br><span class="line"><span class="comment">// ↪ 9007199254740991n</span></span><br></pre></td></tr></table></figure>

<h2 id="globalThis-可以获取全局对象。"><a href="#globalThis-可以获取全局对象。" class="headerlink" title="globalThis 可以获取全局对象。"></a>globalThis 可以获取全局对象。</h2><blockquote>
<p>node -v &gt;= 12</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === globalThis);</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure>

<h2 id="import-可动态导入，分配给变量"><a href="#import-可动态导入，分配给变量" class="headerlink" title="import() 可动态导入，分配给变量"></a>import() 可动态导入，分配给变量</h2><h2 id="Legacy-RegEx（暂未解决）"><a href="#Legacy-RegEx（暂未解决）" class="headerlink" title="Legacy RegEx（暂未解决）"></a>Legacy RegEx（暂未解决）</h2><h2 id="私有的实例方法和访问器（暂未解决）"><a href="#私有的实例方法和访问器（暂未解决）" class="headerlink" title="私有的实例方法和访问器（暂未解决）"></a>私有的实例方法和访问器（暂未解决）</h2>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>es6-es10</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown基本语法</title>
    <url>/2019/10/27/1204465438/</url>
    <content><![CDATA[<h3 id="使用-号区别不同级别的标题（1-6级）"><a href="#使用-号区别不同级别的标题（1-6级）" class="headerlink" title="使用#号区别不同级别的标题（1-6级）　"></a>使用#号区别不同级别的标题（1-6级）　</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="无序列表（-号）"><a href="#无序列表（-号）" class="headerlink" title="无序列表（*号）"></a>无序列表（*号）</h3><ul>
<li>无序列表</li>
<li>无序列表</li>
<li>无序列表</li>
</ul>
<h3 id="有序列表（数字）"><a href="#有序列表（数字）" class="headerlink" title="有序列表（数字）"></a>有序列表（数字）</h3><ol>
<li>有序列表1</li>
<li>有序列表2</li>
<li>有序列表3</li>
</ol>
<h3 id="引用（-gt-大于号）"><a href="#引用（-gt-大于号）" class="headerlink" title="引用（&gt;大于号）"></a>引用（&gt;大于号）</h3><blockquote>
<p>这是引用</p>
</blockquote>
<h3 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h3><p>图片： ![]()</p>
<p>链接：[]()</p>
<p>测试链接： <a href="https://github.com/monkeycf" target="_blank" rel="noopener">我的GitHub</a></p>
<p>测试图片：</p>
<p><img src="https://avatars1.githubusercontent.com/u/41945134?s=460&v=4" alt="这是图片"></p>
<h3 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h3><p>粗体：   <strong>两个*包含文本段落</strong></p>
<p>斜体：   <em>一个*包含文本段落</em></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table>
<thead>
<tr>
<th>tables</th>
<th>hello</th>
<th>hi</th>
</tr>
</thead>
<tbody><tr>
<td>this</td>
<td>ok</td>
<td>bad</td>
</tr>
<tr>
<td>that</td>
<td>nice</td>
<td>good</td>
</tr>
</tbody></table>
<h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fun = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(hello);</span><br></pre></td></tr></table></figure>

<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>使用三个*即可</p>
<hr>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>plop自动构建</title>
    <url>/2019/12/03/1932534677/</url>
    <content><![CDATA[<h1 id="plop"><a href="#plop" class="headerlink" title="plop"></a>plop</h1><p> 用命令行就可以自动生成代码的工具</p>
<p><a href="https://www.npmjs.com/package/plop" target="_blank" rel="noopener">plop(npm)</a></p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p><a href="http://img.chensenran.top/plop-1575386228006.zip" target="_blank" rel="noopener">下载</a></p>
<h2 id="prompts"><a href="#prompts" class="headerlink" title="prompts"></a>prompts</h2><p>参数配置，来自<a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">SBoudrias/Inquirer.js</a></p>
<p>A question object is a <code>hash</code> containing question related values:</p>
<ul>
<li><strong>type</strong>: (String) Type of the prompt. Defaults: <code>input</code> - Possible values: <code>input</code>, <code>number</code>, <code>confirm</code>, <code>list</code>, <code>rawlist</code>, <code>expand</code>, <code>checkbox</code>, <code>password</code>, <code>editor</code></li>
<li><strong>name</strong>: (String) The name to use when storing the answer in the answers hash. If the name contains periods, it will define a path in the answers hash.</li>
<li><strong>message</strong>: (String|Function) The question to print. If defined as a function, the first parameter will be the current inquirer session answers. Defaults to the value of <code>name</code> (followed by a colon).</li>
<li><strong>default</strong>: (String|Number|Boolean|Array|Function) Default value(s) to use if nothing is entered, or a function that returns the default value(s). If defined as a function, the first parameter will be the current inquirer session answers.</li>
<li><strong>choices</strong>: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers. Array values can be simple <code>numbers</code>, <code>strings</code>, or <code>objects</code> containing a <code>name</code> (to display in list), a <code>value</code> (to save in the answers hash) and a <code>short</code> (to display after selection) properties. The choices array can also contain <a href="https://github.com/SBoudrias/Inquirer.js#separator" target="_blank" rel="noopener">a <code>Separator</code></a>.</li>
<li><strong>validate</strong>: (Function) Receive the user input and answers hash. Should return <code>true</code> if the value is valid, and an error message (<code>String</code>) otherwise. If <code>false</code> is returned, a default error message is provided.</li>
<li><strong>filter</strong>: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the <em>Answers</em> hash.</li>
<li><strong>transformer</strong>: (Function) Receive the user input, answers hash and option flags, and return a transformed value to display to the user. The transformation only impacts what is shown while editing. It does not modify the answers hash.</li>
<li><strong>when</strong>: (Function, Boolean) Receive the current user answers hash and should return <code>true</code> or <code>false</code> depending on whether or not this question should be asked. The value can also be a simple boolean.</li>
<li><strong>pageSize</strong>: (Number) Change the number of lines that will be rendered when using <code>list</code>, <code>rawList</code>, <code>expand</code> or <code>checkbox</code>.</li>
<li><strong>prefix</strong>: (String) Change the default <em>prefix</em> message.</li>
<li><strong>suffix</strong>: (String) Change the default <em>suffix</em> message.</li>
</ul>
]]></content>
      <categories>
        <category>plop</category>
      </categories>
      <tags>
        <tag>自动化构建</tag>
      </tags>
  </entry>
  <entry>
    <title>sass相关知识点</title>
    <url>/2019/11/18/2713175653/</url>
    <content><![CDATA[<h2 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a>特色功能</h2><ul>
<li>完全兼容 CSS3</li>
<li>在 CSS 基础上增加变量、嵌套 (nesting)、混合 (mixins) 等功能</li>
<li>通过函数进行颜色值与属性值的运算</li>
<li>提供控制指令等高级功能</li>
<li>自定义输出格式</li>
</ul>
<h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><ol>
<li><p>SCSS</p>
<p>所有符合 CSS3 语法的样式表也都是具有相同语法意义的 SCSS 文件</p>
</li>
<li><p>Sass（缩排语法）</p>
</li>
</ol>
<h2 id="CSS拓展功能"><a href="#CSS拓展功能" class="headerlink" title="CSS拓展功能"></a>CSS拓展功能</h2><h3 id="选择器嵌套"><a href="#选择器嵌套" class="headerlink" title="选择器嵌套"></a>选择器嵌套</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.hi</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="引用父元素-amp"><a href="#引用父元素-amp" class="headerlink" title="引用父元素 &amp;"></a>引用父元素 &amp;</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffb3ff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  &amp;-sidebar &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h3><blockquote>
<p>例如border-color属性嵌套</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.funky</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">20px</span>/<span class="number">24px</span> &#123;</span><br><span class="line">    family: fantasy;</span><br><span class="line">    weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="占位符选择器-（-foo）"><a href="#占位符选择器-（-foo）" class="headerlink" title="占位符选择器 （%foo）"></a>占位符选择器 （%foo）</h3><blockquote>
<p>暂时空</p>
</blockquote>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="css注释"><a href="#css注释" class="headerlink" title="css注释"></a>css注释</h3><blockquote>
<p>标准css注释，编译后保留</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  标准的css注释，编译后保留</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="sass注释"><a href="#sass注释" class="headerlink" title="sass注释"></a>sass注释</h3><blockquote>
<p>单行注释，只在sass中保留</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单行注释，只在sass中保留</span></span><br></pre></td></tr></table></figure>

<h3 id="重要注释"><a href="#重要注释" class="headerlink" title="重要注释"></a>重要注释</h3><blockquote>
<p>重要注释，在压缩文件中保留（通常为版本信息）</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment"> * 重要注释！</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="SassScript"><a href="#SassScript" class="headerlink" title="SassScript"></a>SassScript</h2><blockquote>
<p> 在 CSS 属性的基础上 Sass 提供了一些名为 SassScript 的新功能。 SassScript 可作用于任何属性，允许属性使用变量、算数运算等额外功能。 </p>
</blockquote>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote>
<p> 变量以美元符号开头，赋值方法与 CSS 属性的写法一样</p>
</blockquote>
<h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><blockquote>
<p>变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。 </p>
</blockquote>
<h4 id="global"><a href="#global" class="headerlink" title="global"></a>global</h4><blockquote>
<p>将局部变量转换为全局变量可以添加 <strong>!global</strong></p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="variable">$normalFontSize</span>: <span class="number">20px</span> !global;</span><br><span class="line">  <span class="variable">$blue</span>: blue;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$normalFontSize</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$blue</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: calc(#&#123;<span class="variable">$normalFontSize</span>&#125; + <span class="number">2px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$normalFontSize</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span> * <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><blockquote>
<p>1, 2, 13, 10px</p>
</blockquote>
<h4 id="字符串，有引号字符串与无引号字符串"><a href="#字符串，有引号字符串与无引号字符串" class="headerlink" title="字符串，有引号字符串与无引号字符串"></a>字符串，有引号字符串与无引号字符串</h4><blockquote>
<p>“foo”, ‘bar’, baz</p>
</blockquote>
<h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><blockquote>
<p>blue, #04a3f9, rgba(255,0,0,0.5)</p>
</blockquote>
<h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><blockquote>
<p>true, false</p>
</blockquote>
<h4 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h4><blockquote>
<p>null</p>
</blockquote>
<h4 id="数组-list-，用空格或逗号作分隔符"><a href="#数组-list-，用空格或逗号作分隔符" class="headerlink" title="数组 (list)，用空格或逗号作分隔符"></a>数组 (list)，用空格或逗号作分隔符</h4><blockquote>
<p>1.5em 1em 0 2em, Helvetica, Arial, sans-serif</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$stars</span>: (</span><br><span class="line">        (size: <span class="number">40px</span>, left: <span class="number">22px</span>, top: <span class="number">97px</span>),</span><br><span class="line">        (size: <span class="number">32px</span>, left: <span class="number">42px</span>, top: <span class="number">70px</span>),</span><br><span class="line">        (size: <span class="number">31px</span>, left: <span class="number">464px</span>, top: <span class="number">273px</span>),</span><br><span class="line">        (size: <span class="number">28px</span>, left: <span class="number">240px</span>, top: <span class="number">402px</span>),</span><br><span class="line">        (size: <span class="number">25px</span>, left: <span class="number">289px</span>, top: <span class="number">557px</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through length(<span class="variable">$stars</span>) &#123;</span><br><span class="line">  <span class="variable">$item</span>: nth(<span class="variable">$stars</span>, <span class="variable">$i</span>);</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">:nth-child</span>(#&#123;<span class="variable">$i</span>&#125;) &#123;</span><br><span class="line">    <span class="attribute">width</span>: map-get(<span class="variable">$item</span>, size);</span><br><span class="line">    <span class="attribute">height</span>: map-get(<span class="variable">$item</span>, size);</span><br><span class="line">    <span class="attribute">left</span>: map-get(<span class="variable">$item</span>, left);</span><br><span class="line">    <span class="attribute">top</span>: map-get(<span class="variable">$item</span>, top);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span>:<span class="string">"lili"</span>,<span class="string">"yaya"</span>,<span class="string">"sansa"</span>;  <span class="comment">//注意数组list的写法</span></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$i</span> in <span class="variable">$name</span> &#123;</span><br><span class="line">  .#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="maps-相当于-JavaScript-的-object"><a href="#maps-相当于-JavaScript-的-object" class="headerlink" title="maps, 相当于 JavaScript 的 object"></a>maps, 相当于 JavaScript 的 object</h4><blockquote>
<p>(key1: value1, key2: value2)</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name2</span>: (name21:<span class="string">"lili"</span>, name22:<span class="string">"yaya"</span>, name23:<span class="string">"sansa"</span>);</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$i</span> in <span class="variable">$name2</span> &#123;</span><br><span class="line">  <span class="selector-class">.test9</span>.#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$name3</span>: (name31:<span class="number">1</span>, name32:<span class="number">2</span>, name33:<span class="number">3</span>);</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$key</span>, <span class="variable">$value</span> in <span class="variable">$name3</span> &#123;</span><br><span class="line">  <span class="selector-class">.test10</span>.#&#123;<span class="variable">$key</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>*<span class="variable">$value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><h4 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h4><blockquote>
<p><code>/</code> 在 CSS 中通常起到分隔数字的用途，SassScript 作为 CSS 语言的拓展当然也支持这个功能，同时也赋予了 <code>/</code> 除法运算的功能。 </p>
</blockquote>
<ul>
<li>如果值，或值的一部分，是变量或者函数的返回值</li>
<li>如果值被圆括号包裹</li>
<li>如果值是算数表达式的一部分</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">10px</span>/<span class="number">8px</span>;             <span class="comment">// Plain CSS, no division</span></span><br><span class="line">  <span class="variable">$width</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>/<span class="number">2</span>;            <span class="comment">// Uses a variable, does division</span></span><br><span class="line">  <span class="attribute">width</span>: round(<span class="number">1.5</span>)/<span class="number">2</span>;        <span class="comment">// Uses a function, does division</span></span><br><span class="line">  <span class="attribute">height</span>: (<span class="number">500px</span>/<span class="number">2</span>);          <span class="comment">// Uses parentheses, does division</span></span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span> + <span class="number">8px</span>/<span class="number">2px</span>; <span class="comment">// Uses +, does division</span></span><br><span class="line">  <span class="attribute">font</span>: #&#123;<span class="variable">$font-size</span>&#125;/#&#123;<span class="variable">$line-height</span>&#125;; <span class="comment">// 使用变量，也使用 分隔符 /</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="颜色运算符"><a href="#颜色运算符" class="headerlink" title="颜色运算符"></a>颜色运算符</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#010203</span> + <span class="number">#040506</span>; <span class="comment">// #050709</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 当包含alpha channel 时，透明度必须相等才可以进行计算。</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: rgba(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>) + rgba(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.75</span>); <span class="comment">// rgba(255, 255, 0, 0.75);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="alpha-channel-调整"><a href="#alpha-channel-调整" class="headerlink" title="alpha channel 调整"></a>alpha channel 调整</h5><ul>
<li>opacify 增减</li>
<li>transparentize 直接调整</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$translucent-red</span>: rgba(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: opacify(<span class="variable">$translucent-red</span>, <span class="number">0.3</span>); <span class="comment">// rgba(255, 0, 0, 0.8);</span></span><br><span class="line">  <span class="attribute">background-color</span>: transparentize(<span class="variable">$translucent-red</span>, <span class="number">0.25</span>); <span class="comment">// rgba(255, 0, 0, 0.25);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h4><blockquote>
<p> 如果有引号字符串（位于 <code>+</code> 左侧）连接无引号字符串，运算结果是有引号的，相反，无引号字符串（位于 <code>+</code> 左侧）连接有引号字符串，运算结果则没有引号。 </p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"Foo "</span> + Bar; <span class="comment">// "Foo Bar"</span></span><br><span class="line">  <span class="attribute">font-family</span>: sans- + <span class="string">"serif"</span>; <span class="comment">// sans-serif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在有引号的文本字符串中使用 <code>#{}</code> 插值语句可以添加动态的值： </p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"I ate #&#123;5 + 10&#125; pies!"</span>; <span class="comment">// "I ate 15 pies!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="布尔运算-Boolean-Operations"><a href="#布尔运算-Boolean-Operations" class="headerlink" title="布尔运算 (Boolean Operations)"></a>布尔运算 (Boolean Operations)</h4><blockquote>
<p>SassScript 支持布尔型的 <code>and</code> <code>or</code> 以及 <code>not</code> 运算</p>
</blockquote>
<h4 id="数组运算-List-Operations"><a href="#数组运算-List-Operations" class="headerlink" title="数组运算 (List Operations)"></a>数组运算 (List Operations)</h4><blockquote>
<p> 数组不支持任何运算方式，只能使用 list functions 控制</p>
</blockquote>
<h3 id="圆括号"><a href="#圆括号" class="headerlink" title="圆括号"></a>圆括号</h3><blockquote>
<p>圆括号可以用来影响运算的顺序</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span> + (<span class="number">2em</span> * <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="关键词参数"><a href="#关键词参数" class="headerlink" title="关键词参数"></a>关键词参数</h4><blockquote>
<p>关键词参数给函数提供了更灵活的接口，以及容易调用的参数。关键词参数可以打乱顺序使用，如果使用默认值也可以省缺，另外，参数名被视为变量名，下划线、短横线可以互换使用。 </p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: hsl(<span class="variable">$hue</span>: <span class="number">0</span>, <span class="variable">$saturation</span>: <span class="number">100%</span>, <span class="variable">$lightness</span>: <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo</span><span class="selector-class">.bar</span> <span class="selector-class">.baz</span><span class="selector-class">.bang</span>, <span class="selector-class">.bip</span><span class="selector-class">.qux</span> &#123;</span><br><span class="line">  <span class="variable">$selector</span>: &amp;; <span class="comment">// &amp; -&gt; ((.foo.bar .baz.bang), .bip.qux)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>判断&amp;是否存在</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> does-parent-exist &#123;</span><br><span class="line">  <span class="keyword">@if</span> &amp; &#123;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="变量定义-default"><a href="#变量定义-default" class="headerlink" title="变量定义 !default"></a>变量定义 <code>!default</code></h3><p><strong>变量是 null 空值时将视为未被 <code>!default</code> 赋值。</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$content</span>: <span class="string">"First content"</span>;</span><br><span class="line"><span class="variable">$content</span>: <span class="string">"Second content?"</span> !default;</span><br><span class="line"><span class="variable">$new_content</span>: <span class="string">"First time reference"</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="variable">$content</span>; <span class="comment">// "First content"</span></span><br><span class="line">  new-<span class="attribute">content</span>: <span class="variable">$new_content</span>; <span class="comment">// "First time reference"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Rules-与指令"><a href="#Rules-与指令" class="headerlink" title="@-Rules 与指令"></a>@-Rules 与指令</h2><h3 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h3><blockquote>
<p> 许其导入 SCSS 或 Sass 文件。</p>
<p>被导入的文件将合并编译到同一个 CSS 文件中</p>
<p>被导入的文件中所包含的变量或者混合指令 (mixin) 都可以在导入的文件中使用。 </p>
</blockquote>
<p> Sass 允许同时导入多个文件，例如同时导入 rounded-corners 与 text-shadow 两个文件： </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"rounded-corners"</span>, <span class="string">"text-shadow"</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>导入文件也可以使用 <code>#{ }</code> 插值语句，但不是通过变量动态导入 Sass 文件，只能作用于 CSS 的 <code>url()</code> 导入方式： </p>
</blockquote>
<p><strong>注意：</strong></p>
<p> 通常，<code>@import</code> 寻找 Sass 文件并将其导入， 除以下情况：</p>
<ul>
<li>文件拓展名是 <code>.css</code>；</li>
<li>文件名以 <code>http://</code> 开头；</li>
<li>文件名是 <code>url()</code>；</li>
<li><code>@import</code> 包含 media queries。</li>
</ul>
<h4 id="分音-Partials"><a href="#分音-Partials" class="headerlink" title="分音 (Partials)"></a>分音 (Partials)</h4><p> 如果需要导入 SCSS 或者 Sass 文件，但又不希望将其编译为 CSS，只需要在文件名前添加下划线 </p>
<blockquote>
<p>将文件命名为 <code>_colors.scss</code>，便不会编译 <code>_colours.css</code> 文件。</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"colors"</span>;</span><br></pre></td></tr></table></figure>

<h4 id="嵌套-import"><a href="#嵌套-import" class="headerlink" title="嵌套 @import"></a>嵌套 @import</h4><blockquote>
<p>可以将 <code>@import</code> 嵌套进 CSS 样式或者 <code>@media</code> 中，与平时的用法效果相同，只是这样导入的样式只能出现在嵌套的层中。 </p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example.scss</span></span><br><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="keyword">@import</span> <span class="string">"example"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt;</span></span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="media"><a href="#media" class="headerlink" title="@media"></a>@media</h3><blockquote>
<p>允许其在 CSS 规则中嵌套 </p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (orientation: landscape) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@media 的 queries 允许互相嵌套使用，编译时，Sass 自动添加 and</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="keyword">@media</span> (orientation: landscape) &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>@media</code> 可以使用 SassScript（比如变量，函数，以及运算符）代替条件的名称或者值：</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$media</span>: screen;</span><br><span class="line"><span class="variable">$feature</span>: -webkit-min-device-pixel-ratio;</span><br><span class="line"><span class="variable">$value</span>: <span class="number">1.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> #&#123;<span class="variable">$media</span>&#125; and (<span class="variable">$feature</span>: <span class="variable">$value</span>) &#123;</span><br><span class="line">  .sidebar &#123;</span><br><span class="line">    width: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="extend"><a href="#extend" class="headerlink" title="@extend"></a>@extend</h3><blockquote>
<p> 一个选择器下的所有样式继承给另一个选择器</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">"/image/hacked.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span>, <span class="selector-class">.seriousError</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/image/hacked.png"</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="延伸复杂的选择器"><a href="#延伸复杂的选择器" class="headerlink" title="延伸复杂的选择器"></a>延伸复杂的选择器</h4><blockquote>
<p> Class 选择器并不是唯一可以被延伸 (extend) 的，Sass 允许延伸任何定义给单个元素的选择器 </p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hoverlink</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> a:hover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.hoverlink</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="多重延伸"><a href="#多重延伸" class="headerlink" title="多重延伸"></a>多重延伸</h4><blockquote>
<p>同一个选择器可以延伸给多个选择器，它所包含的属性将继承给所有被延伸的选择器</p>
<p> 多重延伸可以使用逗号分隔选择器名，比如 <code>@extend .error, .attention;</code> 与 <code>@extend .error;</code> <code>@extend.attention</code> 有相同的效果。 </p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.attention</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .error;</span><br><span class="line">  <span class="keyword">@extend</span> .attention;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.attention</span>, <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="继续延伸"><a href="#继续延伸" class="headerlink" title="继续延伸"></a>继续延伸</h4><blockquote>
<p>当一个选择器延伸给第二个后，可以继续将第二个选择器延伸给第三个 </p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.criticalError</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .seriousError;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span>, <span class="selector-class">.seriousError</span>, <span class="selector-class">.criticalError</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span>, <span class="selector-class">.criticalError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.criticalError</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10%</span>; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="选择器列"><a href="#选择器列" class="headerlink" title="选择器列"></a>选择器列</h4><ul>
<li><p>暂时<strong>不可以</strong>将选择器列 (Selector Sequences)，比如 <code>.foo .bar</code> 或 <code>.foo + .bar</code>，延伸给其他元素</p>
</li>
<li><p>可以将其他元素延伸给选择器列</p>
</li>
</ul>
<h5 id="合并选择器列"><a href="#合并选择器列" class="headerlink" title="合并选择器列"></a>合并选择器列</h5><ol>
<li>当两个列 (sequence) 合并时，如果没有包含相同的选择器，将生成两个新选择器：第一列出现在第二列之前，或者第二列出现在第一列之前：</li>
</ol>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span>,</span><br><span class="line"><span class="selector-id">#demo</span> <span class="selector-class">.overview</span> <span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如果两个列 (sequence) 包含了相同的选择器，相同部分将会合并在一起，其他部分交替输出。在下面的例子里，两个列都包含 <code>#admin</code>，输出结果中它们合并在了一起：</li>
</ol>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.overview</span> <span class="selector-class">.fakelink</span>,</span><br><span class="line"><span class="selector-id">#admin</span> <span class="selector-class">.overview</span> <span class="selector-class">.tabbar</span> <span class="selector-class">.fakelink</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="extend-Only-选择器"><a href="#extend-Only-选择器" class="headerlink" title="@extend-Only 选择器"></a>@extend-Only 选择器</h4><h4 id="optional-声明"><a href="#optional-声明" class="headerlink" title="!optional 声明"></a>!optional 声明</h4><h4 id="在指令中延伸"><a href="#在指令中延伸" class="headerlink" title="在指令中延伸"></a>在指令中延伸</h4><blockquote>
<p>Sass 不可以将 <code>@media</code> 层外的 CSS 规则延伸给指令层内的 CSS </p>
<p>*<em>如果在 <code>@media</code> （或者其他 CSS 指令）中使用 <code>@extend</code>，必须延伸给相同指令层中的选择器。 *</em></p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .error;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但不可以这样：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">    <span class="comment">// INVALID EXTEND: .error is used outside of the "@media print" directive</span></span><br><span class="line">    <span class="keyword">@extend</span> .error;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="at-root"><a href="#at-root" class="headerlink" title="@at-root"></a>@at-root</h3><p>将会渲染到根目录下而不是作用块内。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">@at-root</span> &#123;</span><br><span class="line">    <span class="selector-class">.child1</span> &#123; ... &#125;</span><br><span class="line">    <span class="selector-class">.child2</span> &#123; ... &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.step-child</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">.parent &#123; ... &#125;</span><br><span class="line">.child1 &#123; ... &#125;</span><br><span class="line">.child2 &#123; ... &#125;</span><br><span class="line">.parent .step-child &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h4 id="at-root-without-…"><a href="#at-root-without-…" class="headerlink" title="@at-root (without: …)"></a>@at-root (without: …)</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8in</span>;</span><br><span class="line">    <span class="keyword">@at-root</span> (without: media) &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8in</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="at-root-with-…"><a href="#at-root-with-…" class="headerlink" title="@at-root (with: …)"></a>@at-root (with: …)</h4><h3 id="debug"><a href="#debug" class="headerlink" title="@debug"></a>@debug</h3><blockquote>
<p>打印计算值到控制台，便于调试</p>
</blockquote>
<h3 id="warn"><a href="#warn" class="headerlink" title="@warn"></a>@warn</h3><blockquote>
<p>打印标准错误输出流</p>
</blockquote>
<p>@warn 和 @debug 的区别</p>
<ul>
<li>可以使用 quiet 关闭警告</li>
<li>追踪栈也会一起打印出来，以便调试</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> adjust-location(<span class="variable">$x</span>, <span class="variable">$y</span>) &#123;</span><br><span class="line">  <span class="keyword">@if</span> unitless(<span class="variable">$x</span>) &#123;</span><br><span class="line">    <span class="keyword">@warn</span> <span class="string">"Assuming #&#123;$x&#125; to be in pixels"</span>;</span><br><span class="line">    <span class="variable">$x</span>: <span class="number">1px</span> * <span class="variable">$x</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@if</span> unitless(<span class="variable">$y</span>) &#123;</span><br><span class="line">    <span class="keyword">@warn</span> <span class="string">"Assuming #&#123;$y&#125; to be in pixels"</span>;</span><br><span class="line">    <span class="variable">$y</span>: <span class="number">1px</span> * <span class="variable">$y</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">position</span>: relative; </span><br><span class="line">  <span class="attribute">left</span>: <span class="variable">$x</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="error"><a href="#error" class="headerlink" title="@error"></a>@error</h3><blockquote>
<p>抛出致命错误</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> adjust-location(<span class="variable">$x</span>, <span class="variable">$y</span>) &#123;</span><br><span class="line">  <span class="keyword">@if</span> unitless(<span class="variable">$x</span>) &#123;</span><br><span class="line">    <span class="keyword">@error</span> <span class="string">"$x may not be unitless, was #&#123;$x&#125;."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@if</span> unitless(<span class="variable">$y</span>) &#123;</span><br><span class="line">    <span class="keyword">@error</span> <span class="string">"$y may not be unitless, was #&#123;$y&#125;."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">position</span>: relative; <span class="attribute">left</span>: <span class="variable">$x</span>; <span class="attribute">top</span>: <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制指令"><a href="#控制指令" class="headerlink" title="控制指令"></a>控制指令</h2><blockquote>
<p> 控制指令是一种高级功能，日常编写过程中并不常用到，主要与混合指令 (mixin) 配合使用 </p>
</blockquote>
<h3 id="if"><a href="#if" class="headerlink" title="if()"></a>if()</h3><blockquote>
<p>不建议使用</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: if(false, <span class="number">1px</span>, <span class="number">2px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if-1"><a href="#if-1" class="headerlink" title="@if"></a>@if</h3><p>当 <code>@if</code> 的表达式返回值不是 <code>false</code> 或者 <code>null</code> 时，条件成立，输出 <code>{}</code> 内的代码：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid; &#125;</span><br><span class="line">  <span class="keyword">@if</span> <span class="number">5</span> &lt; <span class="number">3</span> &#123; <span class="attribute">border</span>: <span class="number">2px</span> dotted; &#125;</span><br><span class="line">  <span class="keyword">@if</span> null  &#123; <span class="attribute">border</span>: <span class="number">3px</span> double; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="eles"><a href="#eles" class="headerlink" title="@eles"></a>@eles</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$type</span>: monster;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$type</span> == ocean &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125; <span class="keyword">@else</span> if <span class="variable">$type</span> == matador &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125; <span class="keyword">@else</span> if <span class="variable">$type</span> == monster &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="for"><a href="#for" class="headerlink" title="@for"></a>@for</h3><ul>
<li>@for $var from <start> through <end>  , [start, end]</li>
<li>@for $var from <start> to <end>  , [start, end)</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">3</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h3><blockquote>
<p><code>@each</code> 指令的格式是 $var in  <list></p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$animal</span> in puma, sea-slug, egret, salamander &#123;</span><br><span class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/images/#&#123;$animal&#125;.png'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Multiple-Assignment"><a href="#Multiple-Assignment" class="headerlink" title="Multiple Assignment"></a>Multiple Assignment</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$animal</span>, <span class="variable">$color</span>, <span class="variable">$cursor</span> in (puma, black, default),</span><br><span class="line">                                  (sea-slug, blue, pointer),</span><br><span class="line">                                  (egret, white, move) &#123;</span><br><span class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/images/#&#123;$animal&#125;.png'</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="variable">$cursor</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.puma-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/puma.png'</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">cursor</span>: default; &#125;</span><br><span class="line"><span class="selector-class">.sea-slug-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/sea-slug.png'</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer; &#125;</span><br><span class="line"><span class="selector-class">.egret-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/egret.png'</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid white;</span><br><span class="line">  <span class="attribute">cursor</span>: move; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$header</span>, <span class="variable">$size</span> in (h1: <span class="number">2em</span>, h2: <span class="number">1.5em</span>, h3: <span class="number">1.2em</span>) &#123;</span><br><span class="line">  #&#123;<span class="variable">$header</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>; &#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>; &#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="while"><a href="#while" class="headerlink" title="@while"></a>@while</h3><blockquote>
<p><code>@while</code> 指令重复输出格式直到表达式返回结果为 <code>false</code> </p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$i</span>: <span class="number">6</span>;</span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$i</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">  <span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12em</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8em</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4em</span>; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="混合指令"><a href="#混合指令" class="headerlink" title="混合指令"></a>混合指令</h2><h3 id="定义混合指令-mixin"><a href="#定义混合指令-mixin" class="headerlink" title="定义混合指令 @mixin"></a>定义混合指令 <code>@mixin</code></h3><blockquote>
<p>混合指令的用法是在 <code>@mixin</code> 后添加名称与样式 </p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> clearfix &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  * <span class="selector-tag">html</span> &amp; &#123; <span class="attribute">height</span>: <span class="number">1px</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="引用混合样式-include"><a href="#引用混合样式-include" class="headerlink" title="引用混合样式 @include"></a>引用混合样式 <code>@include</code></h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.page-title</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> large-text;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p> 参数用于给混合指令中的样式设定变量，并且赋值使用(可以设定默认值 )</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> sexy-border(<span class="variable">$color</span>, <span class="variable">$width</span>: <span class="number">1in</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    color: <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">    <span class="selector-tag">style</span>: dashed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="关键词参数-1"><a href="#关键词参数-1" class="headerlink" title="关键词参数"></a>关键词参数</h4><blockquote>
<p>类似于解构</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="keyword">@include</span> sexy-border(<span class="variable">$color</span>: blue); &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="keyword">@include</span> sexy-border(<span class="variable">$color</span>: blue, <span class="variable">$width</span>: <span class="number">2in</span>); &#125;</span><br></pre></td></tr></table></figure>

<h4 id="参数变量"><a href="#参数变量" class="headerlink" title="参数变量"></a>参数变量</h4><p>可以使用参数变量 <code>…</code> 声明（写在参数的最后方）告诉 Sass 将这些参数视为值列表处理：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> box-shadow(<span class="variable">$shadows</span>...) &#123;</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shadows</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> box-shadow(<span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.shadowed</span> &#123;</span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 参数变量也可以用在引用混合指令的时候 (<code>@include</code>) </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> colors(<span class="variable">$text</span>, <span class="variable">$background</span>, <span class="variable">$border</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$text</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$background</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="variable">$border</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$values</span>: <span class="number">#ff0000</span>, <span class="number">#00ff00</span>, <span class="number">#0000ff</span>;</span><br><span class="line"><span class="selector-class">.primary</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> colors(<span class="variable">$values</span>...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.primary</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#00ff00</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#0000ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="向混合样式中导入内容"><a href="#向混合样式中导入内容" class="headerlink" title="向混合样式中导入内容"></a>向混合样式中导入内容</h3><p>在引用混合样式的时候，可以先将一段代码导入到混合指令中，然后再输出混合样式，额外导入的部分将出现在 <code>@content</code> 标志的地方：</p>
<p> <strong>注意：</strong> 当 <code>@content</code> 在指令中出现过多次或者出现在循环中时，额外的代码将被导入到每一个地方。 </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> apply-to-ie6-<span class="keyword">only</span> &#123;</span><br><span class="line">  * <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="keyword">@content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@include</span> apply-to-ie6-<span class="keyword">only</span> &#123;</span><br><span class="line">  <span class="selector-id">#logo</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(/logo.gif);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* <span class="selector-tag">html</span> <span class="selector-id">#logo</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(/logo.gif);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Variable-Scope-and-Content-Blocks"><a href="#Variable-Scope-and-Content-Blocks" class="headerlink" title="Variable Scope and Content Blocks"></a>Variable Scope and Content Blocks</h4><blockquote>
<p>mixin的变量是块作用域不能在全局使用</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$color</span>: white;</span><br><span class="line"><span class="keyword">@mixin</span> colors(<span class="variable">$color</span>: blue) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="keyword">@content</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.colors</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> colors &#123; <span class="attribute">color</span>: <span class="variable">$color</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.colors</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数指令"><a href="#函数指令" class="headerlink" title="函数指令"></a>函数指令</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$grid-width</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="variable">$gutter-width</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@function</span> grid-width(<span class="variable">$n</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$n</span> * <span class="variable">$grid-width</span> + (<span class="variable">$n</span> - <span class="number">1</span>) * <span class="variable">$gutter-width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#sidebar</span> &#123; <span class="attribute">width</span>: grid-width(<span class="number">5</span>); &#125;</span><br></pre></td></tr></table></figure>

<p>编译为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">240px</span>; &#125;</span><br></pre></td></tr></table></figure>

<p>与 mixin 相同，也可以传递若干个全局变量给函数作为参数。一个函数可以含有多条语句，需要调用 <code>@return</code> 输出结果。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>Sass 提供了四种输出格式，可以通过 <code>:style option</code> 选项设定，或者在命令行中使用 <code>--style</code> 选项。</p>
<h3 id="nested"><a href="#nested" class="headerlink" title=":nested"></a>:nested</h3><p>Nested （嵌套）样式是 Sass 默认的输出格式，能够清晰反映 CSS 与 HTML 的结构关系。选择器与属性等单独占用一行，缩进量与 Sass 文件中一致，每行的缩进量反映了其在嵌套规则内的层数。当阅读大型 CSS 文件时，这种样式可以很容易地分析文件的主要结构。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>; &#125;</span><br><span class="line">  <span class="selector-id">#main</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10em</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.huge</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="expanded"><a href="#expanded" class="headerlink" title=":expanded"></a>:expanded</h3><p>Expanded 输出更像是手写的样式，选择器、属性等各占用一行，属性根据选择器缩进，而选择器不做任何缩进。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.huge</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="compact"><a href="#compact" class="headerlink" title=":compact"></a>:compact</h3><p>Compact 输出方式比起上面两种占用的空间更少，每条 CSS 规则只占一行，包含其下的所有属性。嵌套过的选择器在输出时没有空行，不嵌套的选择器会输出空白行作为分隔符。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123; <span class="attribute">color</span>: <span class="number">#fff</span>; <span class="attribute">background-color</span>: <span class="number">#000</span>; &#125;</span><br><span class="line"><span class="selector-id">#main</span> <span class="selector-tag">p</span> &#123; <span class="attribute">width</span>: <span class="number">10em</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.huge</span> &#123; <span class="attribute">font-size</span>: <span class="number">10em</span>; <span class="attribute">font-weight</span>: bold; <span class="attribute">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="compressed"><a href="#compressed" class="headerlink" title=":compressed"></a>:compressed</h3><p>Compressed 输出方式删除所有无意义的空格、空白行、以及注释，力求将文件体积压缩到最小，同时也会做出其他调整，比如会自动替换占用空间最小的颜色表达方式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span>&#123;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">background-color</span>:<span class="number">#000</span>&#125;<span class="selector-id">#main</span> <span class="selector-tag">p</span>&#123;<span class="attribute">width</span>:<span class="number">10em</span>&#125;<span class="selector-class">.huge</span>&#123;<span class="attribute">font-size</span>:<span class="number">10em</span>;<span class="attribute">font-weight</span>:bold;<span class="attribute">text-decoration</span>:underline&#125;</span><br></pre></td></tr></table></figure>

<h2 id="知识结构"><a href="#知识结构" class="headerlink" title="知识结构"></a>知识结构</h2><p><img src="http://img.chensenran.top/1574177707099.jpg" alt="知识结构"></p>
]]></content>
      <categories>
        <category>sass</category>
      </categories>
      <tags>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>trump</title>
    <url>/2020/02/17/3643414376/</url>
    <content><![CDATA[<h1 id="trump"><a href="#trump" class="headerlink" title="trump"></a>trump</h1><ul>
<li><a href="https://github.com/monkeycf/trump" target="_blank" rel="noopener">github</a>: <a href="https://github.com/monkeycf/trump" target="_blank" rel="noopener">https://github.com/monkeycf/trump</a></li>
<li><a href="https://www.npmjs.com/package/@monkeycf/trump" target="_blank" rel="noopener">npm</a>: <a href="https://www.npmjs.com/package/@monkeycf/trump" target="_blank" rel="noopener">https://www.npmjs.com/package/@monkeycf/trump</a></li>
<li><a href="https://trump.chensenran.top" target="_blank" rel="noopener">document</a>: <a href="https://trump.chensenran.top" target="_blank" rel="noopener">https://trump.chensenran.top</a></li>
</ul>
<h1 id="组织架构"><a href="#组织架构" class="headerlink" title="组织架构"></a>组织架构</h1><ul>
<li>TypeScript</li>
<li>Jest</li>
<li>webpack</li>
<li>ESLint</li>
<li>Prettier</li>
<li>VuePress</li>
<li>pre-commit</li>
<li>Treavis CI</li>
</ul>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><ul>
<li><p>项目使用TypeScript版本为3.7.5</p>
</li>
<li><p>编译脚本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>



</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"ESNext"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [</span><br><span class="line">      <span class="string">"DOM"</span>,</span><br><span class="line">      <span class="string">"DOM.Iterable"</span>,</span><br><span class="line">      <span class="string">"ESNext"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./lib"</span>, <span class="comment">// 输出的目录，npm发布的入口</span></span><br><span class="line">    <span class="attr">"isolatedModules"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"strict"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="attr">"paths"</span>: &#123;</span><br><span class="line">      <span class="attr">"*"</span>: [</span><br><span class="line">        <span class="string">"./*"</span>,</span><br><span class="line">        <span class="string">"types/*"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"esModuleInterop"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"forceConsistentCasingInFileNames"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    <span class="string">"node_modules"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"include"</span>: [ <span class="comment">// 源文件的路径</span></span><br><span class="line">    <span class="string">"types/**/*"</span>,</span><br><span class="line">    <span class="string">"src/**/*"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h2><ul>
<li><p>实现单元测试</p>
</li>
<li><p>运行测试</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run test</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><ul>
<li><p>运行example目录下的例子</p>
</li>
<li><p>运行脚本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><ul>
<li><p>代码监测工具</p>
</li>
<li><p>运行脚本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run lint</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  parser: '@typescript-eslint/parser', // ESLint的解析器</span><br><span class="line">  extends: ['plugin:@typescript-eslint/recommended'],</span><br><span class="line">  plugins: ['@typescript-eslint'],</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: true,</span><br><span class="line">    node: true,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><ul>
<li><p>代码格式化工具</p>
</li>
<li><p>运行脚本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run fix</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="VuePress"><a href="#VuePress" class="headerlink" title="VuePress"></a>VuePress</h2><ul>
<li><p>Vue静态网站生成器，构建相关API文档（<a href="https://trump.chensenran.top" target="_blank" rel="noopener">doc</a>: <a href="https://trump.chensenran.top）" target="_blank" rel="noopener">https://trump.chensenran.top）</a></p>
</li>
<li><p>文档预览</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run docs:dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>文档打包</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm run docs:build</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a>pre-commit</h2><ul>
<li>管理维护（在预提交时运行相关脚本，以实现对提交代码的审核）</li>
</ul>
<h2 id="Treavis-CI"><a href="#Treavis-CI" class="headerlink" title="Treavis CI"></a>Treavis CI</h2><ul>
<li><p>持续集成服务</p>
</li>
<li><p>相关配置</p>
<p>目前有3个job，其中 ‘npm release’ 只在修改tag的提交中运行。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">.travis.yml</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'12'</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">include:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">script:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">unit</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">stage:</span> <span class="string">GitHubPages</span></span><br><span class="line">      <span class="attr">script:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">docs:build</span></span><br><span class="line">      <span class="attr">deploy:</span></span><br><span class="line">        <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">        <span class="attr">skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">github_token:</span> <span class="string">$GET_REPO_TOKEN</span></span><br><span class="line">        <span class="attr">keep_history:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">local_dir:</span> <span class="string">./docs/.vuepress/dist</span></span><br><span class="line">        <span class="attr">fqdn:</span> <span class="string">trump.chensenran.top</span></span><br><span class="line">        <span class="attr">on:</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">stage:</span> <span class="string">npm</span> <span class="string">release</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">tag</span> <span class="string">IS</span> <span class="string">present</span></span><br><span class="line">      <span class="attr">node_js:</span> <span class="string">"12"</span></span><br><span class="line">      <span class="attr">script:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="attr">deploy:</span></span><br><span class="line">        <span class="attr">provider:</span> <span class="string">npm</span></span><br><span class="line">        <span class="attr">email:</span> <span class="string">$NPM_EMAIL</span></span><br><span class="line">        <span class="attr">api_key:</span> <span class="string">$NPM_TOKEN</span></span><br><span class="line">        <span class="attr">skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">tag:</span> <span class="string">latest</span></span><br><span class="line">        <span class="attr">on:</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>trump</category>
      </categories>
      <tags>
        <tag>trump</tag>
      </tags>
  </entry>
  <entry>
    <title>大文件上传</title>
    <url>/2020/04/19/4090159482/</url>
    <content><![CDATA[<h1 id="校验文件类型"><a href="#校验文件类型" class="headerlink" title="校验文件类型"></a>校验文件类型</h1><ol>
<li><p>根据文件后缀名判断</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验文件名后缀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>fileName 文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span> </span>flag 文件后缀是否正确</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">checkSuffixes(fileName) &#123;</span><br><span class="line">  <span class="keyword">const</span> SUFFIXES_PNG = <span class="string">'PNG'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.getSuffixes(fileName).toUpperCase() === SUFFIXES_PNG;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取文件后缀名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>fileName 文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span> </span>suffixes 文件类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getSuffixes(fileName) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!fileName) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fileName.split(<span class="string">'.'</span>).pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据文件内容判断</p>
<p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200419195155853.png" alt=""></p>
<p>以png图片为例，所有png图片开始的十六进制都为 89 50 4E 47。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取BASE64</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Blob&#125;</span> </span>blob 需要读取的Blob</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Promise&lt;&gt;&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">blobToHexadecimalString(blob) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> render = <span class="keyword">new</span> FileReader();</span><br><span class="line">    render.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">this</span>.result</span><br><span class="line">        .split(<span class="string">''</span>)</span><br><span class="line">        .map(<span class="function"><span class="params">i</span> =&gt;</span> i.charCodeAt())</span><br><span class="line">        .map(<span class="function"><span class="params">i</span> =&gt;</span> i.toString(<span class="number">16</span>).toUpperCase())</span><br><span class="line">        .map(<span class="function"><span class="params">i</span> =&gt;</span> i.padStart(<span class="number">2</span>, <span class="string">'0'</span>))</span><br><span class="line">        .join(<span class="string">' '</span>);</span><br><span class="line">      resolve(res);</span><br><span class="line">    &#125;</span><br><span class="line">    render.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.abort();</span><br><span class="line">      reject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    render.readAsBinaryString(blob);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验是否为PNG格式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Blob&#125;</span> <span class="variable">file</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span> </span>flag 是否为PNG格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> checkHexPNG(file) &#123;</span><br><span class="line">  <span class="keyword">const</span> HEX_PNG = <span class="string">'89 50 4E 47'</span>;</span><br><span class="line">  <span class="keyword">const</span> str = <span class="keyword">await</span> <span class="keyword">this</span>.blobToHexadecimalString(file.slice(<span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">  <span class="keyword">return</span> str === HEX_PNG;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><p>将大文件切片成chunk，进行分片上传</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成切片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>file 需要生成切片的文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>chunkSize 切片大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;[]&#125;</span> </span>切片数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">createChunks(file, chunkSize = CHUNK_SIZE) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="attr">size</span>: fileSize&#125; = file;</span><br><span class="line">  <span class="keyword">const</span> chunks = [];</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (index &lt; fileSize) &#123;</span><br><span class="line">    chunks.push(&#123;</span><br><span class="line">      index,</span><br><span class="line">      chunk: file.slice(index, index + chunkSize),</span><br><span class="line">    &#125;);</span><br><span class="line">    index += chunkSize;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> chunks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="计算MD5"><a href="#计算MD5" class="headerlink" title="计算MD5"></a>计算MD5</h1><ol>
<li><p>直接计算md5</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接计算md5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>file 需要计算的文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Promise&lt;*&gt;&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> calculateHash(file) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.blobToData(file);</span><br><span class="line">  <span class="keyword">return</span> md5(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>应用层协议原理</title>
    <url>/2019/10/28/2645272983/</url>
    <content><![CDATA[<h1 id="应用层协议原理"><a href="#应用层协议原理" class="headerlink" title="应用层协议原理"></a>应用层协议原理</h1><ul>
<li>客户-服务器体系结构</li>
<li>P2P体系结构</li>
</ul>
<p>在一对进程之间的通信会话场景中，发起通信的进程为<strong>客户</strong>，等待联系的进程为<strong>服务器</strong>。</p>
<h3 id="应用程序编程接口"><a href="#应用程序编程接口" class="headerlink" title="应用程序编程接口"></a>应用程序编程接口</h3><p>进程通过套接字的软件接口向网络发送接收报文。</p>
<ul>
<li>可靠数据传输</li>
<li>吞吐量</li>
<li>定时</li>
<li>安全性</li>
</ul>
<h4 id="TCP服务"><a href="#TCP服务" class="headerlink" title="TCP服务"></a>TCP服务</h4><ul>
<li>面向连接的服务：握手阶段后，在两个进程的套接字之间建立一个TCP连接。链接双方的进程可以在此连接上同时进行报文收发。</li>
<li>可靠的数据传送服务</li>
</ul>
<h4 id="UDP服务"><a href="#UDP服务" class="headerlink" title="UDP服务"></a>UDP服务</h4><h3 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h3><p>定义了运行在不同端系统上的应用程序进程如何相互传递报文。</p>
<ul>
<li>交换的报文类型（请求报文、响应报文）</li>
<li>各种报文类型的语法</li>
<li>字段的语义</li>
<li>确定一个进程何时以及如何发送报文</li>
</ul>
<p><strong>应层协议只是网络应用的一部分</strong></p>
]]></content>
      <categories>
        <category>多媒体网络</category>
      </categories>
      <tags>
        <tag>应用层</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2020/03/22/1935562632/</url>
    <content><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>重复遍数组，两两之间相互比较，按照一定规则交换。</p>
<p>优化：当一次遍历未发生交换时，排序结束</p>
<p>时间复杂度：平均：O(n^2)，最差：O(n^2)</p>
<p>空间复杂度：O(1)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化冒泡排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span><span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Array&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">optimizeBubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = len; j &gt; i; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        [arr[i], arr[j]] = [arr[j], arr[i]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>与冒泡排序相比，每次循环记录最大（最小）的索引值，一遍循环结束后再进行交换。</p>
<p>时间复杂度：平均：O(n^2)，最差：O(n^2)</p>
<p>空间复杂度：O(1)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span><span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Array&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[flag] &gt; arr[j]) &#123;</span><br><span class="line">        flag = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag !== i) &#123;</span><br><span class="line">      [arr[flag], arr[i]] = [arr[i], arr[flag]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>将当前元素，插入到之前已有序的元素中。</p>
<p>时间复杂度：平均：O(n^2)，最差：O(n^2)</p>
<p>空间复杂度：O(1)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span><span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Array&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> value = arr[i];</span><br><span class="line">    <span class="keyword">while</span> (index &gt;= <span class="number">0</span> &amp;&amp; arr[index] &gt; value) &#123;</span><br><span class="line">      arr[index + <span class="number">1</span>] = arr[index];</span><br><span class="line">      index--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[index + <span class="number">1</span>] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>对插入排序的改进版。先将整个待排序的数组分割成诺干个子序列，分别进行插入排序。不断进行，直至全部数组进行一次插入排序。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 希尔排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span><span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Array&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> gen = len / <span class="number">2</span> | <span class="number">0</span>; <span class="comment">// 间隔，增量</span></span><br><span class="line">  <span class="keyword">while</span> (gen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = gen; i &lt; len; i++) &#123; <span class="comment">// 对诺干个子序列进行插入排序</span></span><br><span class="line">      <span class="keyword">const</span> temp = arr[i];</span><br><span class="line">      <span class="keyword">let</span> index = i - gen;</span><br><span class="line">      <span class="keyword">while</span> (index &gt;= <span class="number">0</span> &amp;&amp; arr[index] &gt; temp) &#123;</span><br><span class="line">        arr[index + gen] = arr[index]</span><br><span class="line">        index -= gen;</span><br><span class="line">      &#125;</span><br><span class="line">      arr[index + gen] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    gen = gen / <span class="number">2</span> | <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>分治算法，将元素不断一分为二。接着将小数组进行归并操作。</p>
<p>时间复杂度：O(nlogn)</p>
<p>空间复杂度：O(n)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> <span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">begin</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">end</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Array&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr, begin = <span class="number">0</span>, end = arr.length</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (end - begin &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.slice(begin, end);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> mid = begin + ((end - begin) / <span class="number">2</span> | <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 分治，向下递归</span></span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(arr, begin, mid), mergeSort(arr, mid, end));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并两个数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span><span class="variable">leftArr</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span><span class="variable">rightArr</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">leftArr, rightArr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="comment">// 归并操作</span></span><br><span class="line">  <span class="keyword">while</span> (leftArr.length &amp;&amp; rightArr.length) &#123;</span><br><span class="line">    res.push(</span><br><span class="line">      leftArr[<span class="number">0</span>] &lt; rightArr[<span class="number">0</span>]</span><br><span class="line">        ? leftArr.shift()</span><br><span class="line">        : rightArr.shift()</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (leftArr.length) &#123;</span><br><span class="line">    res.push(leftArr.shift())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (rightArr.length) &#123;</span><br><span class="line">    res.push(rightArr.shift())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>分治算法，根据选择的基准数将数组一分为二。一侧都比基准数小或等于，一侧都比基准数大。</p>
<p>时间复杂度：平均：O(nlogn)  最差：O(n^2)</p>
<p>空间复杂度：O(logn) ~ O(n)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> <span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">begin</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">end</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Array&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr, begin = <span class="number">0</span>, end = arr.length</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = end - begin;</span><br><span class="line">  <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> temp = arr[begin]; <span class="comment">// 基准值</span></span><br><span class="line">  <span class="keyword">let</span> l = begin, r = end - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r &amp;&amp; temp &lt; arr[r]) &#123;</span><br><span class="line">      r--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[l] = arr[r];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (l &lt; r &amp;&amp; temp &gt;= arr[l]) &#123;</span><br><span class="line">      l++;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[r] = arr[l];</span><br><span class="line">  &#125;</span><br><span class="line">  arr[l] = temp;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 分别递归</span></span><br><span class="line">  quickSort(arr, begin, l);</span><br><span class="line">  quickSort(arr, l + <span class="number">1</span>, end);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>大根堆/小根堆。创建一个堆，并把队尾与队首进行交换，不断维护堆。</p>
<p>时间复杂度：O(nlogn)</p>
<p>空间复杂度：O(1)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span><span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Array&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  createHeap(arr); <span class="comment">// 创建堆</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> lastIndex = arr.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (lastIndex) &#123;</span><br><span class="line">    swap(arr, <span class="number">0</span>, lastIndex);</span><br><span class="line">    lastIndex--;</span><br><span class="line">    heap(arr, <span class="number">0</span>, lastIndex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建堆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span><span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHeap</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = arr.length;</span><br><span class="line">  <span class="keyword">let</span> index = len / <span class="number">2</span> | <span class="number">0</span>; <span class="comment">// 非叶子节点的索引值</span></span><br><span class="line">  <span class="keyword">while</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    heap(arr, index--, len - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个堆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span><span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span><span class="variable">index</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span><span class="variable">laseIndex</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heap</span>(<span class="params">arr, index, laseIndex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> leftIndex = index * <span class="number">2</span> + <span class="number">1</span>, rightIndex = (index + <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> flag = index; <span class="comment">// 最小元素索引值</span></span><br><span class="line">  <span class="keyword">if</span> (leftIndex &lt;= laseIndex &amp;&amp; arr[flag] &gt; arr[leftIndex]) &#123;</span><br><span class="line">    flag = leftIndex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (rightIndex &lt;= laseIndex &amp;&amp; arr[flag] &gt; arr[rightIndex]) &#123;</span><br><span class="line">    flag = rightIndex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 最小元素为根元素，则无需递归</span></span><br><span class="line">  <span class="keyword">if</span> (flag !== index) &#123;</span><br><span class="line">    swap(arr, index, flag);</span><br><span class="line">    heap(arr, flag, laseIndex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">l</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">r</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, l, r</span>) </span>&#123;</span><br><span class="line">  [arr[l], arr[r]] = [arr[r], arr[l]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><p>利用空间换取时间，数据的范围必须是有限确定的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计数排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&lt;number&gt;&#125;</span><span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span><span class="variable">minValue</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span><span class="variable">maxValue</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Array&lt;number&gt;&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countSort</span>(<span class="params">arr, minValue, maxValue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建计数数组</span></span><br><span class="line">  <span class="keyword">const</span> result = arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> differenceValue = cur - minValue;</span><br><span class="line">    pre[differenceValue]++;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">  &#125;, <span class="keyword">new</span> <span class="built_in">Array</span>(maxValue - minValue + <span class="number">1</span>).fill(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  result.forEach(<span class="function">(<span class="params">item, itemIndex</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; item; i++) &#123;</span><br><span class="line">      arr[index++] = itemIndex + minValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>数字图像处理复习</title>
    <url>/2019/12/28/2879251901/</url>
    <content><![CDATA[<h3 id="imadjust-反相，幂次变化，变化"><a href="#imadjust-反相，幂次变化，变化" class="headerlink" title="imadjust(反相，幂次变化，变化)"></a>imadjust(反相，幂次变化，变化)</h3><ul>
<li><p>imadjust ( img, [0 1], [ 1 0]); % 实现图像<strong>反相</strong>效果</p>
</li>
<li><p>g = imadjust(f,[low_in high_in], [low_out high_out],gamma) ;</p>
</li>
<li><p>imajust(f,[0 0.5],[0.5 1]); % 图像变亮</p>
</li>
<li><p>g2=imadjust(f,[0.5 0.75],[0 1]); % 将部分灰度区域扩展 </p>
<ul>
<li>gamma: 幂次基本变化</li>
</ul>
</li>
<li><p>g = imadjust(f, [], [] , 0.3); %幂次变化</p>
</li>
</ul>
<p><img src="http://img.chensenran.top/1577521736881.png" alt="image-20191228162735178"></p>
<h3 id="imcomplement-img"><a href="#imcomplement-img" class="headerlink" title="imcomplement(img);"></a><strong>imcomplement</strong>(img);</h3><blockquote>
<p> 实现图像反相效果</p>
<p>img = imcomplement(img);</p>
</blockquote>
<h3 id="im2uint8和uint8函数的区别"><a href="#im2uint8和uint8函数的区别" class="headerlink" title="im2uint8和uint8函数的区别"></a>im2uint8<strong>和</strong>uint8函数的区别</h3><p>数据类型uint8，以此方式存储的图像称为8位图像，可以节省存储空间。matlab读入图像的数据是uint8，而matlab中数值一般采用double型（64位）存储和运算，若要imshow显示图像结果，就需要再im2uint8，把数据类型转换成uint8类型，如果超过0~1范围，就要用uint8（）或者mat2gray（）把矩阵转化为灰度图像格式double </p>
<h3 id="对比度拉伸"><a href="#对比度拉伸" class="headerlink" title="对比度拉伸"></a>对比度拉伸</h3><p><strong>在处理图片前需要对图片进行mat2gray函数处理</strong></p>
<ul>
<li>例 g = 1. / ( 1 + (0.15./(double(‘image’) + eps)).^E);</li>
</ul>
<img src="http://img.chensenran.top/1577523059490.png" alt="image-20191228165035818" style="zoom: 33%;" />

<h3 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h3><ol>
<li><p><strong>histeq</strong>直方图均衡化函数</p>
<ul>
<li>g = histeq( f , nlev )<ul>
<li>其中f为原图像， nlev是为输出图像指定的灰度级数；默认64级</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>归一化</strong>直方图获取</p>
<ul>
<li>p = imhist（f，b）/ numel(f)</li>
</ul>
</li>
<li><p><strong>imhist</strong>绘制</p>
<ul>
<li>imhist(f, b); %默认方式绘制直方图 b默认值为256</li>
<li>若b=2则原图像的亮度被分成两个级别统计</li>
</ul>
</li>
<li><p>例子：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">g = histeq(f,<span class="number">200</span>);</span><br><span class="line">imhist(g);<span class="comment">% 和imshow一样，会直接显示</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="线性空间滤波"><a href="#线性空间滤波" class="headerlink" title="线性空间滤波"></a>线性空间滤波</h3><ul>
<li>线性过滤器是线性系统和频域过滤概念在空域 的自然延伸。 </li>
<li>模板尺寸对过滤器效果的影响 – 模板尺寸越大，图像越模糊，图像细节丢失越多 </li>
</ul>
<h4 id="空间域线性滤波函数"><a href="#空间域线性滤波函数" class="headerlink" title="空间域线性滤波函数"></a>空间域线性滤波函数</h4><ol>
<li><p><strong>fspecial</strong>（创建滤波器）</p>
<ul>
<li>w = fspecial(‘type’,parameters)  % 创建滤波器</li>
<li>其中type为滤波器类型；parameters参数（可多个，根据类型决定）</li>
<li>type:<ul>
<li>‘average’：<strong>均值滤波</strong>，默认值为[3,3]</li>
<li>‘disk’： <strong>圆形区域均值滤波</strong>，参数代表区域半径，默认值为5.</li>
<li>‘gaussian’：高斯低通滤波** fspecial(‘gaussian’,hsize,sigma)  <ul>
<li>hsize表示模板尺寸，默认值为[3  3]，sigma为滤波器的标准值，单位为像素，默认值为0.5</li>
</ul>
</li>
<li>‘ laplacian’： <strong>拉普拉斯算子</strong>， FSPECIAL(‘laplacian’,ALPHA)  <ul>
<li>参数alpha用于控制算子形状，取值范围为[0，1]，默认值为0.2</li>
</ul>
</li>
<li>‘log’： <strong>拉普拉斯高斯算子</strong>，  FSPECIAL(‘log’,HSIZE,SIGMA)  <ul>
<li>hsize表示模板尺寸，默认值为[3  3]，sigma为滤波器的标准差，单位为像素，默认值为0.5 </li>
</ul>
</li>
<li>‘motion’：<strong>运动模糊算子</strong>， FSPECIAL(‘motion’,LEN,THETA) <ul>
<li>表示摄像物体逆时针方向以theta角度运动了len个像素，len的默认值为9，theta的默认值为0； </li>
</ul>
</li>
<li>‘prewitt’：<strong>边缘增强</strong>，大小为[3  3]，无参数   FSPECIAL(‘prewitt’) </li>
<li>‘sobel’：<strong>边缘提取</strong>，无参数  FSPECIAL(‘sobel’) </li>
<li>‘unsharp’：<strong>对比度增强滤波器</strong>，FSPECIAL(‘unsharp’,ALPHA) <ul>
<li>参数alpha用于控制滤波器的形状，范围为[0，1]，默认值为0.2 </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>imfilter</strong>(<strong>空间域线性滤波</strong>函数 )</p>
<ul>
<li>g = imfilter(f,w,filtering_mode,boundary_opotion,size_option) %  空间域线性滤波函数</li>
<li>其中f为输入图像， w为掩模（滤波器），g为滤波结果图像</li>
<li>filtering_mode指明 使用相关（‘corr ’） 还是卷积（‘conv ’） </li>
<li>boundary_opotion 指明图像边界如何填充(‘replicate’，’symmetric’, ‘circular’)</li>
<li>size_option指明计 算采用’ same ’还是 ‘full’ </li>
</ul>
</li>
<li><p>例子</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">w = fspecial(<span class="string">'average'</span>,<span class="number">31</span>); <span class="comment">% 掩模采用31x31的盒滤波器</span></span><br><span class="line">g = imfilter(f, w, <span class="string">'conv'</span>, <span class="string">'replicate'</span>, <span class="string">'full'</span>);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="非线性空间滤波"><a href="#非线性空间滤波" class="headerlink" title="非线性空间滤波"></a>非线性空间滤波</h3><ul>
<li>定义： 使用模板进行结果像素值的计算，结果值直接取决于 像素邻域的值，而不使用乘积和的计算</li>
<li>中值滤波<ul>
<li>主要用途：钝化图像、去除噪音</li>
<li>计算公式：R = mid {zk | k = 1,2,…,9}</li>
</ul>
</li>
<li>最大值滤波<ul>
<li>主要用途：寻找最亮点</li>
<li>计算公式：R = max {zk | k = 1,2,…,9}</li>
</ul>
</li>
<li>最小值滤波<ul>
<li>主要用途：寻找最暗点</li>
<li>计算公式：R = min {zk | k = 1,2,…,9} </li>
</ul>
</li>
</ul>
<h4 id="非线性空间滤波函数"><a href="#非线性空间滤波函数" class="headerlink" title="非线性空间滤波函数"></a>非线性空间滤波函数</h4><ol>
<li><p><strong>medfilt2</strong>( 二维中值滤波器）</p>
<ul>
<li>g = medfilt2(f,[m n],padopt) <ul>
<li>其中[m n]指明领域范围</li>
<li>padopt指明边界填充方式：<ul>
<li>’ zero ’–0值填充(默认填充方 式)’symmetric’—镜像反射方式填充</li>
<li>‘indexed’–若图像是double类型，则用1填充， 否则用0填充 </li>
</ul>
</li>
</ul>
</li>
<li>中值滤波对椒盐噪声的滤除效果非常好 </li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">f = medfilt2(f); <span class="comment">% 中值滤波</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ordfilt2</strong>（排序滤波器）</p>
<ul>
<li>可以生成统计排序滤波器 （也称为排序滤波器）</li>
<li>原理：对图像领域中所包含的像素进行排序，然后 使用排序结果确定的值代替领域中的中心像素的值。 </li>
<li>用法：  g= ordfilt2(f,order,domain)  <ul>
<li>其中f为输入图像;order指明领域内像素排序后用以代替领域中心像素的元素序号; domain指明领域范围，由0、 1组成。</li>
</ul>
</li>
<li>例：g= ordfilt2(f,1,ones(m,n))%最小滤波器</li>
<li>例：g= ordfilt2(f,m*n,ones(m,n))%最大滤波器</li>
<li>例：g= ordfilt2(f,median(1:m*n),ones(m,n))%中值滤波器</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">g = ordfilt2(f,<span class="number">13</span>,<span class="built_in">ones</span>(<span class="number">5</span>,<span class="number">5</span>));</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="线性滤波器与非线性滤波器区别"><a href="#线性滤波器与非线性滤波器区别" class="headerlink" title="线性滤波器与非线性滤波器区别"></a>线性滤波器与非线性滤波器<strong>区别</strong></h3><ul>
<li><p>线性滤波器的原始数据与滤波结果是一种算术运算，即用加减乘除等运算实现。由于线性滤波器是算术运算，有固定的模板，因此滤波器的转移函数是可以确定并且是唯一的。</p>
</li>
<li><p>非线性滤波器的原始数据与滤波结果是一种逻辑关系，即用逻辑运算实现，是通过比较一定邻域内的灰度值大小来实现的，没有固定的模板。</p>
</li>
</ul>
<h3 id="增强图像"><a href="#增强图像" class="headerlink" title="增强图像"></a>增强图像</h3><ol>
<li><p><strong>拉普拉斯</strong>算子</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">f=imread(‘moon.tif’); </span><br><span class="line">w4=fspecial(‘laplacian’,<span class="number">0</span>); <span class="comment">% 使用fspecial函数创建拉普拉斯滤波器</span></span><br><span class="line">w8=[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>;<span class="number">1</span> <span class="number">-8</span> <span class="number">1</span>;<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]; <span class="comment">% 手工创建拉普拉斯滤波器</span></span><br><span class="line"></span><br><span class="line">f=im2double(f);</span><br><span class="line">g4=f-imfilter(f,w4,’replicate’); <span class="comment">% 使用拉普拉多算子和imfilter函数对图像进行增强操作</span></span><br><span class="line">g8=f-imfilter(f,w8,’replicate’);</span><br><span class="line"></span><br><span class="line">imshow(f);</span><br><span class="line"><span class="built_in">figure</span>,imshow(g4);</span><br><span class="line"><span class="built_in">figure</span>,imshow(g8);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>sobel</strong>算子</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">f=imread(‘moon.tif’); </span><br><span class="line">w4=fspecial(‘sobel’,<span class="number">0</span>); <span class="comment">% 使用sobel函数创建拉普拉斯滤波器</span></span><br><span class="line"></span><br><span class="line">f=im2double(f);</span><br><span class="line">g4=f-imfilter(f,w4,’replicate’); <span class="comment">% 使用sobel算子和imfilter函数对图像进行增强操作</span></span><br><span class="line"></span><br><span class="line">imshow(f);</span><br><span class="line"><span class="built_in">figure</span>,imshow(g4);</span><br><span class="line"><span class="built_in">figure</span>,imshow(g8);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="imnoise-生成噪声"><a href="#imnoise-生成噪声" class="headerlink" title="imnoise(生成噪声)"></a><strong>imnoise</strong>(生成噪声)</h3><blockquote>
<p>​    <strong>注意</strong>   函数imnoise在给图像f添加噪声之前先 将它转换为范围[0, 1]的double图像；  </p>
<p>​        f = im2double(f);</p>
</blockquote>
<ol>
<li><p>g = imnoise(f, type, parameters)</p>
<ul>
<li>f 为输入图像，函数imnoise在给图像f添加噪声之前先 将它转换为范围[0, 1]的double图像；</li>
<li>type为噪声的类型，有 ‘gaussian’, ‘localvar’, ‘salt &amp; pepper’, ‘speckle’, ‘poisson’等等。</li>
<li>parameters为参数，根据不同类型的噪声而不同。 </li>
</ul>
</li>
<li><p>各种形式</p>
<ol>
<li>g = imnoise(f, ‘gaussian’, m, var)<ul>
<li>将均值为m，方差为var的<strong>高斯噪声</strong>添加到图像f中</li>
<li>默认值：均值m为0, 方差var为0.01</li>
</ul>
</li>
<li>g = imnoise(f, ‘localvar’,v) <ul>
<li>将均值为0、局部方差为V的<strong>高斯噪声</strong>添加到图像f中</li>
<li>V为与f大小相同的一个数组，它包含每个点的理想方差</li>
</ul>
</li>
<li>g = imnoise(f, ‘localvar’, image_intensity, var)<ul>
<li>将均值为0的<strong>高斯噪声</strong>添加到图像f中</li>
<li>局部方差var是图像f的亮度值函数</li>
<li>image_intensity</li>
</ul>
</li>
<li>g = imnoise(f, ‘salt &amp; pepper’,d) <ul>
<li>将<strong>椒盐噪声</strong>添加到图像f中 </li>
<li>d为噪声密度，即包含噪声值的图像区域的百分比，因 此大约有d*numel(f)个像素受到影响。 </li>
<li>d的默认值为0.05</li>
</ul>
</li>
<li>g = imnoise(f, ‘speckle’, var) <ul>
<li>用方程g = f + nf将乘性噪声添加到图像中f </li>
<li>n是均值为0，方差为var的均匀分布的<strong>随机噪声</strong></li>
<li>Var的默认值为0.04</li>
</ul>
</li>
<li>g = imnoise(f, ‘poisson’) <ul>
<li>从数据中生成<strong>泊松噪声</strong>，而不是将人工的噪声添加到数据中 </li>
</ul>
</li>
</ol>
</li>
<li><p><strong>高斯噪声</strong>直方图分布特点</p>
<blockquote>
<p><strong>高斯噪声</strong>特点是它主要由阻性元器件内部产生，它的概率密度函数 服从高斯分布（即正态分布）</p>
</blockquote>
</li>
<li><p><strong>椒盐噪声</strong>直方图分布特点</p>
<blockquote>
<p>在密度标度的白端有一个额外的尖峰，因为噪声成分为纯黑或纯白</p>
</blockquote>
</li>
</ol>
<h3 id="imread-（提取分量图像）"><a href="#imread-（提取分量图像）" class="headerlink" title="imread （提取分量图像）"></a>imread （提取分量图像）</h3><blockquote>
<p>从彩色图像中提取三幅分量图像</p>
</blockquote>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">file = imread(‘*.tif’) <span class="comment">% 使用imread函数读文件</span></span><br><span class="line">fr = file(:, :, <span class="number">1</span>); <span class="comment">% 提取红色通道</span></span><br><span class="line">fg = file(:, :, <span class="number">2</span>); <span class="comment">% 绿色通道</span></span><br><span class="line">fb = file(:, :, <span class="number">3</span>); <span class="comment">% 蓝色通道</span></span><br></pre></td></tr></table></figure>

<h3 id="cat-将分量图像合成彩色图像"><a href="#cat-将分量图像合成彩色图像" class="headerlink" title="cat (将分量图像合成彩色图像)"></a>cat (将分量图像合成彩色图像)</h3><ol>
<li><p>C = cat(dim,A1,A2,A3,A4,…) </p>
<ul>
<li>dim为1时，将矩阵上下拼接 ：[A; B] (注意 分号！分号！分号！)</li>
<li>dim为2时，将矩阵左右拼接：[A, B]</li>
<li>dim=3时则可以构造三维数组</li>
</ul>
</li>
<li><p>例</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">cat</span>(<span class="number">3</span>,fr,fg,fb); <span class="comment">% 将rgb三个分量合成一个彩色图像</span></span><br></pre></td></tr></table></figure>

<p><img src="http://img.chensenran.top/1577542646115.png" alt="image-20191228221648733"></p>
</li>
</ol>
<h3 id="size（-获取数组的行数和列数-）"><a href="#size（-获取数组的行数和列数-）" class="headerlink" title="size（ 获取数组的行数和列数 ）"></a>size（ 获取数组的行数和列数 ）</h3><blockquote>
<p>size中的A为数组A</p>
<p>注：在使用该函数前，先用double进行处理。例： f = double(f);  </p>
</blockquote>
<ol>
<li><p>s=size(A)   </p>
<ul>
<li>一个输出参数</li>
<li>返回一个行向量(s)，该行向量的第一个元素是数组A的行数，第 二个元素是数组A的列数 </li>
</ul>
</li>
<li><p>[r,c]=size(A) </p>
<ul>
<li>有两个输出参数时</li>
<li>将数组的行数返回到第一个输出变量， 将数组的列 数返回到第二个输出变量（ r行数，c列数）</li>
</ul>
</li>
<li><p>r=size(A,1) </p>
<ul>
<li>r 为数组A的行数</li>
</ul>
</li>
<li><p>c=size(A,2)</p>
<ul>
<li>c 为数组B的列数</li>
</ul>
</li>
</ol>
<h3 id="rgb2hsi-rgb彩色图像转为HSI空间图像"><a href="#rgb2hsi-rgb彩色图像转为HSI空间图像" class="headerlink" title="rgb2hsi rgb彩色图像转为HSI空间图像"></a>rgb2hsi rgb彩色图像转为HSI空间图像</h3><h3 id="hsi2rgb-调用函数将HSI图像转化为RGB图像"><a href="#hsi2rgb-调用函数将HSI图像转化为RGB图像" class="headerlink" title="hsi2rgb 调用函数将HSI图像转化为RGB图像"></a>hsi2rgb 调用函数将HSI图像转化为RGB图像</h3>]]></content>
      <categories>
        <category>数字图像处理</category>
      </categories>
      <tags>
        <tag>数字图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Dart变量的两种类型</title>
    <url>/2019/11/05/290223578/</url>
    <content><![CDATA[<h2 id="弱类型"><a href="#弱类型" class="headerlink" title="弱类型"></a>弱类型</h2><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><ul>
<li>如果没有初始值，可以变成任何类型<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没有初始值</span></span><br><span class="line"><span class="keyword">var</span> dome1;</span><br><span class="line">dome1 = <span class="number">123</span>;</span><br><span class="line">dome1 = <span class="string">"helo"</span>;</span><br></pre></td></tr></table></figure></li>
<li>如果有初始值，类型被锁定<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有初始值，确定类型 无法改变类型</span></span><br><span class="line"><span class="keyword">var</span> dome2 = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// dome2 = "hello"; error</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h3><ul>
<li>动态任意类型，编译阶段不检查检查类型<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dynamic</span> dome3 = <span class="number">123</span>;</span><br><span class="line">dome3 = <span class="string">"hello"</span>;</span><br><span class="line"><span class="comment">// dome3.text(); error 运行时报错</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><ul>
<li>动态任意类型，编译阶段检查类型<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span> dome4 = <span class="number">123</span>;</span><br><span class="line">dome4 = <span class="string">"hello"</span>;</span><br><span class="line"><span class="comment">// dome4.text(); error 编译时报错</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="强类型"><a href="#强类型" class="headerlink" title="强类型"></a>强类型</h2><h3 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h3><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>num</td>
<td>数字</td>
</tr>
<tr>
<td>int</td>
<td>整型</td>
</tr>
<tr>
<td>double</td>
<td>浮点</td>
</tr>
<tr>
<td>bool</td>
<td>布尔</td>
</tr>
<tr>
<td>String</td>
<td>字符串</td>
</tr>
<tr>
<td>StringBuffer</td>
<td>字符串buffer</td>
</tr>
<tr>
<td>DateTime</td>
<td>时间日期</td>
</tr>
<tr>
<td>Duration</td>
<td>时间区间</td>
</tr>
<tr>
<td>List</td>
<td>列表</td>
</tr>
<tr>
<td>Sets</td>
<td>集合</td>
</tr>
<tr>
<td>Maps</td>
<td>kv容器</td>
</tr>
<tr>
<td>enum</td>
<td>枚举</td>
</tr>
</tbody></table>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> str = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">int</span> i = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">double</span> d = <span class="number">12.12</span>;</span><br><span class="line"><span class="built_in">bool</span> b = <span class="keyword">false</span>;</span><br><span class="line"><span class="built_in">DateTime</span> dt = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now();</span><br><span class="line"><span class="built_in">List</span> l = [str, i, d, b, dt];</span><br></pre></td></tr></table></figure>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>一切都是 Object，默认值为 null</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> a;</span><br><span class="line"><span class="built_in">print</span>(a);</span><br><span class="line"><span class="keyword">assert</span>(a == <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>assert 检查点函数，如果不符合条件直接抛出错误并终止程序进程</p>
</blockquote>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><ul>
<li>在写 API 接口的时候，请用强类型，一旦不符合约定，接收数据时能方便排查故障</li>
<li>你在写个小工具时，可以用弱类型，这样代码写起来很快，类型自动适应</li>
</ul>
]]></content>
      <categories>
        <category>Dart</category>
      </categories>
      <tags>
        <tag>Dart变量</tag>
      </tags>
  </entry>
  <entry>
    <title>Dart常量</title>
    <url>/2019/11/06/3634359325/</url>
    <content><![CDATA[<h2 id="定义可以省略类型"><a href="#定义可以省略类型" class="headerlink" title="定义可以省略类型"></a>定义可以省略类型</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> a = <span class="string">"csr"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">String</span> b = <span class="string">'www'</span>;</span><br><span class="line"><span class="keyword">final</span> c = <span class="string">"com"</span>;</span><br><span class="line"><span class="keyword">const</span> d = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure>

<h2 id="不可修改"><a href="#不可修改" class="headerlink" title="不可修改"></a>不可修改</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不能修改</span></span><br><span class="line"><span class="comment">//  a = '123'; error</span></span><br></pre></td></tr></table></figure>

<h2 id="不可与-var-同用"><a href="#不可与-var-同用" class="headerlink" title="不可与 var 同用"></a>不可与 var 同用</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不能和 var 同用</span></span><br><span class="line"><span class="comment">// final var d = "123"; error</span></span><br><span class="line"><span class="comment">// const var e = "456"; error</span></span><br></pre></td></tr></table></figure>

<h2 id="const-赋值，可省略-const-申明的值（2-0以下必须，2-0以上可省略）"><a href="#const-赋值，可省略-const-申明的值（2-0以下必须，2-0以上可省略）" class="headerlink" title="const 赋值，可省略 const 申明的值（2.0以下必须，2.0以上可省略）"></a>const 赋值，可省略 const 申明的值（2.0以下必须，2.0以上可省略）</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">List</span> ls = <span class="keyword">const</span> [<span class="number">11</span>, <span class="number">22</span>, <span class="number">55</span>];</span><br><span class="line"><span class="built_in">print</span>(ls);</span><br></pre></td></tr></table></figure>

<h2 id="const-与-final-区别"><a href="#const-与-final-区别" class="headerlink" title="const 与 final 区别"></a>const 与 final 区别</h2><h3 id="需要确认值"><a href="#需要确认值" class="headerlink" title="需要确认值"></a>需要确认值</h3><blockquote>
<p>final 运行时决定值<br>const 编译时确定值，可用于定义常量</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> dt = <span class="built_in">DateTime</span>.now();</span><br><span class="line"><span class="built_in">print</span>(dt);</span><br><span class="line"><span class="comment">//  const dt = DateTime.now(); error</span></span><br><span class="line"><span class="comment">// 需明确的值，DataTime.now()在运行时才确定</span></span><br></pre></td></tr></table></figure>

<h3 id="不可变性可传递"><a href="#不可变性可传递" class="headerlink" title="不可变性可传递"></a>不可变性可传递</h3><blockquote>
<p>final 子元素可修改<br>const 子元素不可修改，常量特性传到子元素</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="built_in">List</span> ls1 = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line">ls1[<span class="number">1</span>] = <span class="number">44</span>;</span><br><span class="line"><span class="built_in">print</span>(ls1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">List</span> ls2 = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"><span class="comment">//  ls2[1] = 44; error 子元素不可修改，常量特性传到子元素</span></span><br><span class="line"><span class="built_in">print</span>(ls2);</span><br></pre></td></tr></table></figure>

<h3 id="内存中重复创建"><a href="#内存中重复创建" class="headerlink" title="内存中重复创建"></a>内存中重复创建</h3><blockquote>
<p><strong>identical 比较内存中是否为同一对象</strong></p>
</blockquote>
<blockquote>
<p>const 如遇到相同的内容，不会重新创建新的内存空间</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> ls3 = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"><span class="keyword">final</span> ls4 = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"><span class="built_in">print</span>(identical(ls3, ls4)); <span class="comment">// false </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ls5 = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"><span class="keyword">const</span> ls6 = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"><span class="built_in">print</span>(identical(ls5, ls6)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Dart</category>
      </categories>
      <tags>
        <tag>Dart常量</tag>
      </tags>
  </entry>
  <entry>
    <title>BOM</title>
    <url>/2020/03/04/4090752603/</url>
    <content><![CDATA[<h1 id="window"><a href="#window" class="headerlink" title="window"></a>window</h1><blockquote>
<p>浏览器的一个实例</p>
</blockquote>
<ol>
<li>全局变量不能通过delete操作符删除，而直接在window对象上定义的属性可以</li>
<li>尝试访问未声明的变量会抛出错误，但是通过查询window对象，可以得到该变量是否存在</li>
</ol>
<ul>
<li>top：始终指向最高层框架，浏览器窗口</li>
<li>parent：始终指向当前框架的直接上层框架</li>
</ul>
<h1 id="窗口位置"><a href="#窗口位置" class="headerlink" title="窗口位置"></a>窗口位置</h1><h2 id="窗口相对于屏幕"><a href="#窗口相对于屏幕" class="headerlink" title="窗口相对于屏幕"></a>窗口相对于屏幕</h2><ul>
<li>window.screenLeft</li>
<li>window.screenTop</li>
</ul>
<h2 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h2><ul>
<li>window.outerHeight、window.outerWidth 返回浏览器本身尺寸</li>
<li>window.innerHeight、window.innerWidth 返回视口（除去边框）的大小</li>
<li>document.documentElement.clientHeight、document.documentElement.clientWidth 返回DOM可见区域大小（不算滚动条）</li>
</ul>
<h2 id="间歇调用和超时调用"><a href="#间歇调用和超时调用" class="headerlink" title="间歇调用和超时调用"></a>间歇调用和超时调用</h2><ul>
<li>setTimeout</li>
<li>setInterval</li>
</ul>
<h1 id="系统对话框"><a href="#系统对话框" class="headerlink" title="系统对话框"></a>系统对话框</h1><ul>
<li><p>alert</p>
</li>
<li><p>confirm</p>
</li>
<li><p>prompt</p>
</li>
<li><p>window.print() //打印</p>
</li>
<li><p>window.find(msg) // 查询</p>
</li>
</ul>
<h1 id="location"><a href="#location" class="headerlink" title="location"></a>location</h1><ul>
<li>hash</li>
<li>host</li>
<li>hostname</li>
<li>href</li>
<li>pathname</li>
<li>port</li>
<li>protocol</li>
<li>search</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// URLSearchParams</span></span><br><span class="line"><span class="keyword">var</span> paramsString = <span class="string">"q=URLUtils.searchParams&amp;topic=api"</span></span><br><span class="line"><span class="keyword">var</span> searchParams = <span class="keyword">new</span> URLSearchParams(paramsString);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> searchParams) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">searchParams.has(<span class="string">"topic"</span>) === <span class="literal">true</span>; <span class="comment">// true</span></span><br><span class="line">searchParams.get(<span class="string">"topic"</span>) === <span class="string">"api"</span>; <span class="comment">// true</span></span><br><span class="line">searchParams.getAll(<span class="string">"topic"</span>); <span class="comment">// ["api"]</span></span><br><span class="line">searchParams.get(<span class="string">"foo"</span>) === <span class="literal">null</span>; <span class="comment">// true</span></span><br><span class="line">searchParams.append(<span class="string">"topic"</span>, <span class="string">"webdev"</span>);</span><br><span class="line">searchParams.toString(); <span class="comment">// "q=URLUtils.searchParams&amp;topic=api&amp;topic=webdev"</span></span><br><span class="line">searchParams.set(<span class="string">"topic"</span>, <span class="string">"More webdev"</span>);</span><br><span class="line">searchParams.toString(); <span class="comment">// "q=URLUtils.searchParams&amp;topic=More+webdev"</span></span><br><span class="line">searchParams.delete(<span class="string">"topic"</span>);</span><br><span class="line">searchParams.toString(); <span class="comment">// "q=URLUtils.searchParams"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>assign</li>
<li>href</li>
<li>replace // 重定向</li>
<li>reload // 重新加载</li>
</ul>
<h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><ul>
<li>go</li>
<li>back</li>
<li>forward</li>
<li>length // == 0 检查是否是第一个打开的窗口</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript高级程序设计</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM</title>
    <url>/2019/11/04/4150170345/</url>
    <content><![CDATA[<h2 id="node-类型"><a href="#node-类型" class="headerlink" title="node 类型"></a>node 类型</h2><p>JavaScript中所有节点类型都继承于Node类型，因此所有节点类型都共享着相同的基本属性和方法。</p>
<ol>
<li>nodeName 和 nodeValue属性</li>
<li>节点关系</li>
</ol>
<p><strong>NodeList不是Array的实例，是有生命、有呼吸的对象。</strong><br>3. parentNode属性指向文档树中的父节点。<br>4. hasChildNodes() 查询该节点是否包含一个或多个子节点<br>5. appendChild() 向childNodes列表的末尾添加一个节点<br>6. insertBefore() </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> returnedNode = someNode.insertBefore(newNode,someNode.lastChild);</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>replaceChild() 替换节点</li>
<li>removeChild()</li>
<li>cloneNode() // true 深拷贝，false 浅拷贝</li>
</ol>
<h2 id="寻找元素"><a href="#寻找元素" class="headerlink" title="寻找元素"></a>寻找元素</h2><ul>
<li>getElementById()</li>
<li>getElementsByTagName() 获得 HTMLCollection对象，通过 namedItem() 根据name特性取得集合中的项</li>
</ul>
<h2 id="取得特性"><a href="#取得特性" class="headerlink" title="取得特性"></a>取得特性</h2><ul>
<li>getAttribute()</li>
<li>setAttribute()</li>
<li>removeAttribute()</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><img src="http://img.chensenran.top/1572839285302.png" alt="小结1"><br><img src="http://img.chensenran.top/1572839341114.png" alt="小结2"></p>
]]></content>
      <categories>
        <category>JavaScript高级程序设计</category>
      </categories>
      <tags>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>JS函数表达式</title>
    <url>/2020/03/01/1592492931/</url>
    <content><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ol>
<li><p>函数声明</p>
<p><strong>函数提升</strong>：执行代码前会先读取函数声明</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">arg0, arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数表达式（匿名函数）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> functionName = <span class="function"><span class="keyword">function</span>(<span class="params">arg0, arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数体 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><blockquote>
<p>arguments.callee 指向正在执行的函数的指针</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匿名函数实现</span></span><br><span class="line"><span class="keyword">const</span> factorial = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * f(num - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p><strong>闭包</strong>：有权访问另一个函数作用域中的变量的函数</p>
<p><strong>作用域链</strong>：是一个指向变量对象的指针列表，只引用但不实际包含变量对象</p>
<p><img src="http://img.chensenran.top/1583051309606.png" alt=""></p>
<ul>
<li><p><strong>闭包</strong>只能取得包含函数中任何变量的最后一个值。</p>
</li>
<li><p><strong>this对象</strong>是在运行时基于函数的执行环境绑定的。</p>
</li>
<li><p>块级作用域</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 块级作用域</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>私有变量</p>
<p>任何在函数中定义的变量，都可以认为是私有变量，包括函数的参数、局部变量和在函数内部定义的其他函数</p>
<ol>
<li><p>在构造函数中定义特权方法</p>
<p>问题：构造函数针对每个实例都会创建同样一组新方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 私有变量和私有函数</span></span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getIndex</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 特权方法（公有）</span></span><br><span class="line">  <span class="keyword">this</span>.getNumber = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>静态私有变量</p>
<p>问题：所有实例都共享同一静态属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 私有变量和私有函数</span></span><br><span class="line">  <span class="keyword">let</span> index;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getIndex</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数（全局变量）</span></span><br><span class="line">  MyObject = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  MyObject.prototype.publicGetIndex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<h1 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h1><p><strong>单例</strong>：只有一个实例的对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> singleton = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 私有变量和函数</span></span><br><span class="line">	<span class="keyword">const</span> components = [];</span><br><span class="line">  components.push(<span class="string">'1'</span>); <span class="comment">// 初始化</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 公有方法和属性</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getComponentCount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> components.length;</span><br><span class="line">    &#125;,</span><br><span class="line">    addComponent: <span class="function"><span class="keyword">function</span>(<span class="params">component</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> component == <span class="string">"object"</span>) &#123;</span><br><span class="line">        components.push(component);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>函数表达式：</p>
<ul>
<li><p>函数表达式不同于函数声明，注意函数提升</p>
</li>
<li><p>arguments.callee</p>
</li>
</ul>
<p>闭包有权访问包含函数内部的所有变量。</p>
<ul>
<li>闭包的作用域链包含它自己的作用域、包含函数的作用域和全局作用域</li>
<li>通常，函数的作用域及其变量都会在函数执行结束后销毁。但是闭包，这个函数的作用域将会一直存在内存中知道闭包不存在为止。</li>
</ul>
<p>模仿块级作用域：</p>
<ul>
<li>创建并立即调用一个函数</li>
<li>可以使用构造函数模式、原型模式实现自定义类型的特权方法，使用模块模式实现单例的特权方法</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript高级程序设计</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS变量、作用域和内存问题</title>
    <url>/2020/02/25/2393279188/</url>
    <content><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul>
<li>基本类型值：简单数据段</li>
<li>引用类型值：可能由多个值构成的对象</li>
</ul>
<p><em>JavaScript不允许直接访问内存中的位置，不能直接操作对象的内存空间。</em></p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>只能给引用类型值动态地添加属性。</p>
<h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><ul>
<li><p>基本类型值：会在变量对象上创建一个新值</p>
<p><img src="http://img.chensenran.top/1582599615107.png" alt=""></p>
</li>
<li><p>引用类型值：本质上都是指针，两个指针引用同一个对象</p>
<p><img src="http://img.chensenran.top/1582599641076.png" alt=""></p>
</li>
</ul>
<h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>所有函数的参数都是按值传递的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  obj.name = <span class="string">'Sam'</span>;</span><br><span class="line">  obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  obj.name = <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">setName(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 'Sam'</span></span><br></pre></td></tr></table></figure>

<h2 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h2><ul>
<li>typeof：检测基本类型</li>
<li>instanceof：检测引用类型，根据它的原型链来识别</li>
<li>Object.prototype.toString()</li>
</ul>
<h1 id="执行环境及作用域"><a href="#执行环境及作用域" class="headerlink" title="执行环境及作用域"></a>执行环境及作用域</h1><p>每个函数都有自己的执行环境，当执行流进入一个函数时，该函数的环境就会推入一个环境栈中。</p>
<p>当代码在一个环境中执行时，会创建变量对象的一个<strong>作用域链</strong>（保证对执行环境有权访问的所有变量和函数的有序访问）。</p>
<p><strong>全局执行环境的变量对象始终都是作用域链的最后一个对象。</strong></p>
<p>标识符解析就是沿着作用域链一级一级地搜索标识符的过程，搜索过程始终从作用域链的前端开始，然后逐级向后回溯，直到找到标识符为止。</p>
<p>内部环境可以通过作用域链访问所有的外部环境，但外部环境不能访问内部环境中的任何变量和函数。</p>
<h2 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h2><ul>
<li>try-catch中的catch</li>
<li>with</li>
</ul>
<h2 id="没有块级作用域（var）"><a href="#没有块级作用域（var）" class="headerlink" title="没有块级作用域（var）"></a>没有块级作用域（var）</h2><ul>
<li>在函数内部，最接近的环境就是函数的局部环境</li>
<li>查询标识符：搜索过程从作用域链的前端开始，向上逐级查询与给定名字匹配的标识符</li>
</ul>
<h1 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h1><ol>
<li><p>标记清除：垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记，接着会去掉环境中的变量以及被环境中变量引用的变量的标记。最后，垃圾收集器完成内存清除工作，销毁带有标记的值并回收所占用的内存空间</p>
</li>
<li><p>引用计数：跟踪记录每个值被引用的次数，当这个值为0，则回收</p>
<p>问题：<strong>循环</strong>引用，对象A包含对象B的指针，对象B包含对象A的指针</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">problem</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> objA = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  consy objB = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  objA.some = objB;</span><br><span class="line">  objB.any = objA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="管理内存"><a href="#管理内存" class="headerlink" title="管理内存"></a>管理内存</h2><p><strong>解除引用</strong>：一旦数据不再使用，最好通过将其值设置为null来释放引用</p>
<p>解除一个值的引用并不意味着自动挥手该值所占用的内存。接触引用的真正作用是让<strong>值脱离执行环境</strong>，以便垃圾收集器下次运行时将其回收。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol>
<li>变量分两种类型：基本类型值和引用类型值<ul>
<li>基本类型：Undefined，Null，Boolean，Number，String</li>
<li>基本类型值在内存中占据固定大小，<strong>保存在栈内存中</strong></li>
<li>复制基本变量会创建值的副本</li>
<li>引用类型的值是对象，保存在<strong>堆内存中</strong></li>
<li>引用类型值并不包含对象本身，是指向该对象的一个<strong>指针</strong></li>
<li>复制引用类型实则复制指针，两个变量都指向同一个对象</li>
<li>typeof、instanceof、Object.prototype.toString()</li>
</ul>
</li>
<li>所有变量都存在一个执行环境（作用域）中，决定了变量的生命周期，以及哪部分代码可以访问<ul>
<li>执行环境有全局执行环境和函数执行环境之分</li>
<li>作用域链：用于搜索变量和函数</li>
<li>局部环境可以访问父环境，反之则不行</li>
<li>变量的执行环境有助于确定何时释放内存</li>
</ul>
</li>
<li>垃圾收集<ul>
<li>“标记清除”是主流的垃圾收集算法：给当前不使用的值加上标记，然后回收其内存</li>
<li>”引用计数“：跟踪记录所有值被引用的次数</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript高级程序设计</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基本概念</title>
    <url>/2020/02/13/3719758484/</url>
    <content><![CDATA[<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span></span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>undefined</li>
<li>boolean</li>
<li>string</li>
<li>number</li>
<li>object</li>
<li>function</li>
</ul>
<blockquote>
<p>注意：</p>
</blockquote>
<ol>
<li><p>Boolean</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[] == <span class="literal">true</span> <span class="comment">// false</span></span><br><span class="line">!![] == <span class="literal">true</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Number</p>
<ul>
<li><p>浮点数最高精度17位</p>
</li>
<li><pre><code class="javascript"><span class="built_in">isFinite</span>(num) <span class="comment">// boolean num是否位于最小与最大数值之间</span>
&lt;!--￼<span class="number">2</span>--&gt;</code></pre>
</li>
<li><p>数值转化</p>
<ul>
<li><p>Number(num)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">'123a'</span>) <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>parseInt(num, system)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(num, system) <span class="comment">// num：需要转化的值，system：进制</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>parseFloat(num)</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>String</p>
<ul>
<li>toString(system)</li>
</ul>
</li>
<li><p>Object</p>
<ul>
<li>实例都具有的属性和方法<ul>
<li>constructor：保存当前构造函数</li>
<li>hasOwnProperty(propetryName)：属性是否属于当前实例，而不在原型链上</li>
<li>isPrototypeOf(object)：传入的对象是否属于当前对象的原型</li>
<li>propertyIsEnumerable(propetryName)：该属性是否可枚举</li>
<li>toLocaleString()</li>
<li>toString()</li>
<li>valueOf()</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="label语句"><a href="#label语句" class="headerlink" title="label语句"></a>label语句</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mum = <span class="number">0</span>;</span><br><span class="line">outermost:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j === <span class="number">5</span>)&#123;        </span><br><span class="line">            <span class="keyword">break</span> outermost;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h3 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h3><p>将代码的作用域设置到一个特定的对象中</p>
<p>with (expression) statement;</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>arguments</li>
<li>不存在函数签名的特性，没有函数重载</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript高级程序设计</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS引用类型</title>
    <url>/2020/02/26/60633937/</url>
    <content><![CDATA[<h1 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obja = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">const</span> objb = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="Array类型"><a href="#Array类型" class="headerlink" title="Array类型"></a>Array类型</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arra = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">const</span> arrb = [];</span><br></pre></td></tr></table></figure>

<p>length属性：不是只读的，可修改。</p>
<h2 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr))&#123;</span><br><span class="line">  <span class="comment">// do some</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li><p>join()</p>
</li>
<li><p>push()</p>
</li>
<li><p>pop()</p>
</li>
<li><p>push()</p>
</li>
<li><p>unshift()</p>
</li>
<li><p>shift()</p>
</li>
<li><p>reverse()</p>
</li>
<li><p>sort() =&gt; 升序</p>
</li>
<li><p>concat()</p>
</li>
<li><p>slice()</p>
</li>
<li><p>splice() =&gt; 删除的元素</p>
</li>
<li><p>indexOf()</p>
</li>
<li><p>lastIndexOf()</p>
</li>
<li><p>every() =&gt; 每一项true，则true</p>
</li>
<li><p>filter() =&gt; 返回true的元素数组</p>
</li>
<li><p>forEach()</p>
</li>
<li><p>map() =&gt; 调用结果组成的新数组</p>
</li>
<li><p>some() =&gt; 某一项true，则true</p>
</li>
<li><p>reduce()</p>
</li>
<li><p>reduceRight()</p>
</li>
</ul>
<h1 id="Date类型"><a href="#Date类型" class="headerlink" title="Date类型"></a>Date类型</h1><ul>
<li>Date.parse()</li>
<li>Date.now()</li>
<li>getTime()</li>
<li>getFullYear()</li>
<li>getMonth()</li>
<li>getDate()</li>
<li>getDay()</li>
<li>getHours()</li>
<li>getMinutes()</li>
<li>getSeconds()</li>
<li>getMillseconds()</li>
</ul>
<h1 id="RegExp类型"><a href="#RegExp类型" class="headerlink" title="RegExp类型"></a>RegExp类型</h1><p>标志：</p>
<ul>
<li>g：全部</li>
<li>i：不区分大小写</li>
<li>m：多行模式</li>
</ul>
<p>方法：</p>
<ul>
<li>exec()</li>
<li>test()</li>
</ul>
<h1 id="Function类型"><a href="#Function类型" class="headerlink" title="Function类型"></a>Function类型</h1><p>由于函数是对象，因此函数名实际上是一个指向函数对象的指针，不会与某个函数绑定</p>
<p><strong>没有重载！！！</strong></p>
<ul>
<li>函数声明：解析器会率先读取函数声明，并使其在执行任何代码前可用（函数声明提升）</li>
<li>函数表达式：必须等到解析器执行到它所在的代码才会被解析</li>
</ul>
<h2 id="内部属性"><a href="#内部属性" class="headerlink" title="内部属性"></a>内部属性</h2><ul>
<li>arguments<ul>
<li>arguments.callee</li>
<li>arguments.caller</li>
</ul>
</li>
<li>this</li>
</ul>
<h2 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h2><ul>
<li>length：希望接受的命名参数个数</li>
<li>prototype：保存所有实例方法的真正所在</li>
<li>call()</li>
<li>apply()</li>
<li>bind()</li>
</ul>
<h1 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h1><ul>
<li>Number</li>
<li>Boolean</li>
<li>String</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">"some"</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = s1.substring(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li>创建一个string类型的一个实例</li>
<li>在实例上调用指定的方法</li>
<li>销毁这个实例</li>
</ol>
<p>基本包装类型的对象，只存于一行代码的执行瞬间，然后立即销毁。</p>
<p>可以显示调用创建基本包装类型的对象，且type 的值为object</p>
<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><ul>
<li>toString() // 转进制</li>
<li>toFixed()</li>
<li>toExponential()</li>
<li>toPrecision()</li>
</ul>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul>
<li>length</li>
<li>charAt()</li>
<li>charCodeAt()</li>
<li>concat()</li>
<li>slice()</li>
<li>substr()</li>
<li>substring()</li>
<li>indexOf()</li>
<li>lastIndexOf()</li>
<li>trim()</li>
<li>toLowerCase()</li>
<li>toUpperCase()</li>
<li>match()</li>
<li>search()</li>
<li>replace()</li>
<li>split()</li>
<li>localeCompare()</li>
<li>fromCharCode</li>
</ul>
<h1 id="单体内置对象"><a href="#单体内置对象" class="headerlink" title="单体内置对象"></a>单体内置对象</h1><h2 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h2><ul>
<li>isNaN()</li>
<li>isFinite()</li>
<li>parseInt()</li>
<li>parseFloat</li>
<li>encodeURI()</li>
<li>encodeURIComponent()</li>
<li>decodeURI()</li>
<li>decodeURIComponent()</li>
<li>eval()</li>
<li>window</li>
</ul>
<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><ul>
<li>min()</li>
<li>max()</li>
<li>ceil()</li>
<li>floor()</li>
<li>round()</li>
<li>random() =&gt; [0, 1)</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript高级程序设计</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS面向对象的程序设计</title>
    <url>/2020/02/27/664560717/</url>
    <content><![CDATA[<h1 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h1><h2 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h2><ul>
<li>[[Configurable]]：是否可以通过delete删除属性，能否修改属性特征</li>
<li>[[Enumerable]]：能否用过for-in循环返回属性</li>
<li>[[Writable]]：是否修改属性的值</li>
<li>[[Value]]：包含属性的数据值</li>
</ul>
<h2 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h2><ul>
<li>[[Configurable]]：是否可以通过delete删除属性，能否修改属性特征</li>
<li>[[Enumerable]]：能否用过for-in循环返回属性</li>
<li>[[Get]]：读取属性时调用的函数</li>
<li>[[Set]]：写入属性时调用的函数</li>
</ul>
<h2 id="定义读取属性"><a href="#定义读取属性" class="headerlink" title="定义读取属性"></a>定义读取属性</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"name"</span>, &#123;&#125;)</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line">  <span class="string">"name"</span>: &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">"name"</span>)</span><br></pre></td></tr></table></figure>

<h1 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h1><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>用函数封装特定接口创建对象的细节，但是无法识别对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    job,</span><br><span class="line">    getName() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><p>调用构造函数的过程：</p>
<ol>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋给新对象（所以this就指向了该对象）</li>
<li>执行构造函数</li>
<li>返回新对象</li>
</ol>
<p>构造函数模式的问题：</p>
<ol>
<li>不同实例上的同名函数是不相等的</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.getName = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>可以让所有对象实例共享所含的属性和方法</p>
<p><img src="http://img.chensenran.top/1582772357763.png" alt=""></p>
<p><img src="http://img.chensenran.top/1582772435935.png" alt=""></p>
<p>如图所示，实例的__proto__属性指向他的构造函数的prototype。</p>
<ul>
<li><p>通过Object.getPrototypeOf(obj)可以返回这个对象的原型。</p>
</li>
<li><p>通过Object.hasOwnProperty(“name”)可以检测一个属性是否存在该实例中，而不是在原型中。</p>
</li>
<li><p>通过Object.keys()可以取得随向上所有可枚举的实例属性。</p>
</li>
</ul>
<p>原型模式的问题：</p>
<ul>
<li>省略了为构造函数传参的过程，所有实例默认情况下将取得相同的属性值</li>
<li>共享的本性（特别对包含引用类型值的属性）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">City</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">City.prototype.name = <span class="string">'HANGZHOU'</span>;</span><br><span class="line">City.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更简单的原型语法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">City</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">City.prototype = &#123;</span><br><span class="line">  name: <span class="string">'HANGZHOU'</span>,</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(City.prototype, <span class="string">"constructor"</span>, &#123;</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  value: City</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="组合使用构造函数和原型模式"><a href="#组合使用构造函数和原型模式" class="headerlink" title="组合使用构造函数和原型模式"></a>组合使用构造函数和原型模式</h2><p>构造函数模式用于定义实例属性，原型模式用于定义方法和共享属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">City</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">City.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">City</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getName === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="comment">// 此处不能使用对象字面量重写</span></span><br><span class="line">    City.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h2><p>创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后在返回新创建的对象。</p>
<p>问题：构造函数返回的对象与构造函数外部创建的对象没有什么不同，所以不能依赖instanceof来确定对象类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialArray</span>(<span class="params">...arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> values = [];</span><br><span class="line">  values.push.apply(values, arr);</span><br><span class="line">  values.toPipedString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.join(<span class="string">'|'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h2><p><strong>稳妥对象</strong>：没有公共属性，并且方法也不引用this的对象（安全性） </p>
<p>稳妥构造函数与寄生构造函数类似，但有两点不同：</p>
<ul>
<li>新创建对象的实例方法不引用this</li>
<li>不适用new操作符调用构造函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 稳妥构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> o = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 可以在这里定义私有变量和函数</span></span><br><span class="line">  o.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tom = Person(<span class="string">'Tom'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(tom.getName()); <span class="comment">// 除了通过getName方法，其他方法都不能访问name属性</span></span><br></pre></td></tr></table></figure>

<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>利用原型让一个引用类型继承另一个引用类型的属性和方法。</p>
<p><img src="http://img.chensenran.top/1582785916295.png" alt=""></p>
<p>问题：</p>
<ul>
<li>主要问题是包含引用类型值的原型</li>
<li>在创建子类型的实例时，不能想超类型的构造函数中传递参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'super'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.subName = <span class="string">'sub'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType(); <span class="comment">// 子类的原型为 父类的实例</span></span><br><span class="line"></span><br><span class="line">SubType.prototype.getSubName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.subName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h2><p>问题：</p>
<ul>
<li>方法都在构造函数中定义，因此函数复用就无从谈起</li>
<li>在父类的原型中定义的方法，对于子类是不可见的。必须所有类都采用构造函数模式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  SuperType.call(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>使用原型链实现对原型属性和方法的继承，解用构造函数来实现对实例属性的继承。</p>
<p>问题：会调用两次父类的构造函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  SuperType.call(<span class="keyword">this</span>, name); <span class="comment">// 第二次调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.constructor = SubType; <span class="comment">// 第一次调用</span></span><br></pre></td></tr></table></figure>

<h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>)　</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Obejct.create()</span></span><br></pre></td></tr></table></figure>

<p><strong>包含引用类型值的属性始终都会共享响应的值</strong>（浅复制）</p>
<h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> clone = <span class="built_in">Object</span>.create(o);</span><br><span class="line">  clone.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hi'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h2><p>通过构造函数来继承属性，通过原型链的混成形式来继承。</p>
<p>不必为了指定子类型的原型而调用超类型的构造函数，使用寄生式继承超类型的原型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  SuperType.call(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="built_in">Object</span>.create(SuperType.prototype);</span><br><span class="line">SubType.prototype.constructor = SubType;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript高级程序设计</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>script元素属性</title>
    <url>/2020/01/06/2575492771/</url>
    <content><![CDATA[<h1 id="async"><a href="#async" class="headerlink" title="async"></a>async</h1><p>异步执行脚本，<strong>仅适用于外部脚本</strong></p>
<p>立即下载脚本，但不应该妨碍页面中的其他操作。</p>
<ul>
<li>如果 async=”async”：脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）</li>
</ul>
<ul>
<li>如果不使用 async 且 defer=”defer”：脚本将在页面完成解析时执行</li>
<li>如果既不使用 async 也不使用 defer：在浏览器继续解析页面之前，立即读取并执行脚本</li>
</ul>
<h1 id="crossorigin"><a href="#crossorigin" class="headerlink" title="crossorigin"></a>crossorigin</h1><p>允许本地获取到跨域脚本的错误信息</p>
<blockquote>
<p>引入跨域的脚本，如果这个脚本有错误，因为浏览器的限制（根本原因是协议的规定），是拿不到错误信息的。当本地尝试使用 <code>window.onerror</code> 去记录脚本的错误时，跨域脚本的错误只会返回 <code>Script error</code>。</p>
</blockquote>
<blockquote>
<p>允许本地获取到跨域脚本的错误信息，两个条件:</p>
<ol>
<li>跨域脚本的服务器必须通过 <code>Access-Controll-Allow-Origin</code> 头信息允许当前域名可以获取错误信息</li>
<li>当前域名的 <code>script</code> 标签也必须指明 <code>src</code> 属性指定的地址是支持跨域的地址，也就是 crossorigin 属性。  </li>
</ol>
</blockquote>
<p>值：</p>
<ul>
<li>anonymous：不设置凭据标志</li>
<li>use - credentials：请求将提供凭据</li>
</ul>
<h1 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h1><p>表示标本可以延迟到文档完全被解析和显示之后再执行，在 DOMContentLoaded 事件前执行。</p>
<p><strong>仅对外部文件有效</strong></p>
<h1 id="integrity"><a href="#integrity" class="headerlink" title="integrity"></a>integrity</h1><p> 包含用户代理可用于验证已提取资源是否已无意外操作，如CDN。</p>
<blockquote>
<p> 密码散列可以唯一标识一个数据块，任何两个文件的密码散列均不相同</p>
</blockquote>
<h1 id="nomodule"><a href="#nomodule" class="headerlink" title="nomodule"></a>nomodule</h1><p>标明这个脚本在支持 ES2015 modules 的浏览器中不执行</p>
<h1 id="nonce"><a href="#nonce" class="headerlink" title="nonce"></a>nonce</h1><p>用于  script-src Content-Security-Policy（CSP，内容安全策略，防XSS和数据注入攻击)中白名单内联脚本的密码（一次性）</p>
<h1 id="referrerpolicy"><a href="#referrerpolicy" class="headerlink" title="referrerpolicy"></a>referrerpolicy</h1><p>获取脚本时的referer</p>
<p>详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script#referrerpolicy" target="_blank" rel="noopener">MDN</a>中的referrerpolicy</p>
<h1 id="src"><a href="#src" class="headerlink" title="src"></a>src</h1><p>这个属性定义引用外部脚本的URI，这可以用来代替直接在文档中嵌入脚本。</p>
<p>指定了 src 属性的script元素标签内不应该再有嵌入的脚本。</p>
<h1 id="type"><a href="#type" class="headerlink" title="type"></a>type</h1><p>此属性指示所表示的脚本类型。该属性的值属于以下类别之一:</p>
<ul>
<li>省略或JavaScript MIME类型：这表明脚本是JavaScript。<ul>
<li>HTML5规范要求作者省略该属性，而不是提供冗余的MIME类型。</li>
<li>在早期的浏览器中，这标识了嵌入或导入(通过src属性)代码的脚本类型。</li>
</ul>
</li>
<li>模块：将代码视为JavaScript模块。<ul>
<li>脚本内容的处理不受字符集和延迟属性的影响。</li>
</ul>
</li>
<li>任何其他值：嵌入的内容被视为数据块，浏览器不会处理它。开发人员必须使用非JavaScript MIME类型的有效MIME类型来表示数据块。src属性将被忽略。</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript高级程序设计</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript-函数</title>
    <url>/2020/01/08/709073101/</url>
    <content><![CDATA[<h1 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">baseValue: <span class="built_in">number</span>, increment: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> =</span><br><span class="line">  (x: <span class="built_in">number</span>, y: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">baseValue: <span class="built_in">number</span>, increment: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> =</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<h1 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h1><blockquote>
<p> 在参数名旁使用 <code>?</code>实现可选参数的功能</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y?: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h1><blockquote>
<p>与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入 <code>undefined</code>值来获得默认值。 </p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName = "Will", lastName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = buildName(<span class="string">"Bob"</span>);                  <span class="comment">// error, too few parameters</span></span><br><span class="line"><span class="keyword">let</span> result2 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>, <span class="string">"Sr."</span>);  <span class="comment">// error, too many parameters</span></span><br><span class="line"><span class="keyword">let</span> result3 = buildName(<span class="string">"Bob"</span>, <span class="string">"Adams"</span>);         <span class="comment">// okay and returns "Bob Adams"</span></span><br><span class="line"><span class="keyword">let</span> result4 = buildName(<span class="literal">undefined</span>, <span class="string">"Adams"</span>);     <span class="comment">// okay and returns "Will Adams"</span></span><br></pre></td></tr></table></figure>

<h1 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h1><blockquote>
<p>同时操作多个参数</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">" "</span> + restOfName.join(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> buildNameFun: <span class="function">(<span class="params">fname: <span class="built_in">string</span>, ...rest: <span class="built_in">string</span>[]</span>) =&gt;</span> <span class="built_in">string</span> = buildName;</span><br></pre></td></tr></table></figure>

<h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: &#123; suit: <span class="built_in">string</span>; card: <span class="built_in">number</span>; &#125;[]</span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: <span class="built_in">number</span></span>): </span>&#123; suit: <span class="built_in">number</span>; card: <span class="built_in">number</span>; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"object"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * x.length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;suit: x, card: x % <span class="number">13</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript-接口</title>
    <url>/2020/01/09/46133822/</url>
    <content><![CDATA[<h1 id="属性接口"><a href="#属性接口" class="headerlink" title="属性接口"></a>属性接口</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> PersonInfo &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span>;</span><br><span class="line">  secondName?: <span class="built_in">string</span>;<span class="comment">// 可选属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">info: PersonInfo</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(info.firstName + info.secondName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printName(&#123;</span><br><span class="line">  firstName: <span class="string">'zhang'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> encrypt &#123;</span><br><span class="line">  (key: <span class="built_in">string</span>, value: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> md5: encrypt = <span class="function"><span class="keyword">function</span> (<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> key + value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="可索引接口"><a href="#可索引接口" class="headerlink" title="可索引接口"></a>可索引接口</h1><h2 id="对数组约束"><a href="#对数组约束" class="headerlink" title="对数组约束"></a>对数组约束</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> UserArr &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1: UserArr = [<span class="string">'aaa'</span>];</span><br></pre></td></tr></table></figure>

<h2 id="对对象约束"><a href="#对对象约束" class="headerlink" title="对对象约束"></a>对对象约束</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> UserObj &#123;</span><br><span class="line">  [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj: UserObj = &#123;name: <span class="string">'aaa'</span>&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="类类型接口"><a href="#类类型接口" class="headerlink" title="类类型接口"></a>类类型接口</h1><blockquote>
<p>与抽象类类似</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> UserAnimal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  eat(str: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> UserDog <span class="keyword">implements</span> UserAnimal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 参数可选</span></span><br><span class="line">  eat(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="接口的扩展"><a href="#接口的扩展" class="headerlink" title="接口的扩展"></a>接口的扩展</h1><h2 id="可继承"><a href="#可继承" class="headerlink" title="可继承"></a>可继承</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> food &#123;</span><br><span class="line">  eat(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Banana <span class="keyword">extends</span> food &#123;</span><br><span class="line">  work(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript-数据类型</title>
    <url>/2020/01/08/2078814664/</url>
    <content><![CDATA[<h1 id="布尔类型（boolean"><a href="#布尔类型（boolean" class="headerlink" title="布尔类型（boolean)"></a>布尔类型（boolean)</h1><blockquote>
<p>false true</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> flag: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">type</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<h1 id="数字类型（number）"><a href="#数字类型（number）" class="headerlink" title="数字类型（number）"></a>数字类型（number）</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h1 id="字符串类型（string）"><a href="#字符串类型（string）" class="headerlink" title="字符串类型（string）"></a>字符串类型（string）</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str: <span class="built_in">string</span> = <span class="string">'123'</span>;</span><br></pre></td></tr></table></figure>

<h1 id="数组类型（array）"><a href="#数组类型（array）" class="headerlink" title="数组类型（array）"></a>数组类型（array）</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h1 id="元组（tuple）"><a href="#元组（tuple）" class="headerlink" title="元组（tuple）"></a>元组（tuple）</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">'1'</span>, <span class="number">2</span>];</span><br><span class="line">x.push(<span class="string">'2'</span>); <span class="comment">// 超过定义个数，会使用联合类型替代(string | number)</span></span><br></pre></td></tr></table></figure>

<h1 id="枚举（enum）"><a href="#枚举（enum）" class="headerlink" title="枚举（enum）"></a>枚举（enum）</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;</span><br><span class="line">  Red,<span class="comment">// 0</span></span><br><span class="line">  Green = <span class="number">2</span>,<span class="comment">// 2</span></span><br><span class="line">  Blue <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> color: Color = Color.Blue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colorStr: <span class="built_in">string</span> = Color[<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(colorStr); <span class="comment">// Blue, 找到3的对应值</span></span><br></pre></td></tr></table></figure>

<h1 id="任意类型（any）"><a href="#任意类型（any）" class="headerlink" title="任意类型（any）"></a>任意类型（any）</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">"free"</span>];</span><br><span class="line"></span><br><span class="line">list[<span class="number">1</span>] = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<h1 id="null-和-undefined"><a href="#null-和-undefined" class="headerlink" title="null 和 undefined"></a>null 和 undefined</h1><blockquote>
<p>默认情况下<code>null</code>和<code>undefined</code>是所有类型的子类型。 (除了指定 <code>--strictNullChecks</code>标记 )</p>
</blockquote>
<h1 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h1><blockquote>
<p>当一个函数没有返回值时，其返回值类型是 void</p>
<p>只能为它赋予undefined和null</p>
</blockquote>
<h1 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h1><blockquote>
<p>never类型表示的是那些永不存在的值的类型 </p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推断的返回值类型为never</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> error(<span class="string">"Something failed"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h1><ol>
<li><p>尖括号</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>as语法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript-泛型</title>
    <url>/2020/01/12/764840561/</url>
    <content><![CDATA[<h1 id="泛型变量"><a href="#泛型变量" class="headerlink" title="泛型变量"></a>泛型变量</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: <span class="built_in">Array</span>&lt;T&gt;</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn&lt;T&gt; &#123;</span><br><span class="line">    (arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn&lt;<span class="built_in">number</span>&gt; = identity;</span><br></pre></td></tr></table></figure>

<h1 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript-类</title>
    <url>/2020/01/08/3404962735/</url>
    <content><![CDATA[<h1 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h1><blockquote>
<p>class 关键字，constructor 构造函数</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h1><blockquote>
<p>extends 关键字，super 调用父类方法</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Student <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><ul>
<li>private 只能在当前类中访问</li>
<li>protected 在当前类和子类中访问</li>
<li>public 在任何地方访问</li>
</ul>
<h2 id="get-，-set-方法"><a href="#get-，-set-方法" class="headerlink" title="get ， set 方法"></a>get ， set 方法</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> name(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> name(value: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p: Person= <span class="keyword">new</span> Person(<span class="string">'小明'</span>);</span><br><span class="line">p.name = <span class="string">'小陈'</span>;</span><br></pre></td></tr></table></figure>

<h1 id="静态方法，静态属性"><a href="#静态方法，静态属性" class="headerlink" title="静态方法，静态属性"></a>静态方法，静态属性</h1><blockquote>
<p>static 关键字</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> age: <span class="built_in">number</span> = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Print(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`age is <span class="subst">$&#123;Person.age&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.Print();</span><br></pre></td></tr></table></figure>

<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><blockquote>
<p>abstract 关键字 </p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象类， 不能被实例化</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">  projected name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> eat(): <span class="built_in">void</span>; <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类必须实现抽象类的抽象方法</span></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现抽象方法</span></span><br><span class="line">  eat(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>正在吃狗粮`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><blockquote>
<p> 父类定义一个方法不去实现，让继承它的子类去实现 每一个子类有不同的表现 </p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象类， 不能被实例化</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">  projected name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> eat(): <span class="built_in">void</span>; <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类必须实现抽象类的抽象方法</span></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现抽象方法</span></span><br><span class="line">  eat(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>正在吃狗粮`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现抽象方法</span></span><br><span class="line">  eat(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>正在抓老鼠`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f: Animal; <span class="comment">// 声明变量为Animal类型</span></span><br><span class="line">f = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>);</span><br><span class="line">f.eat();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript-装饰器</title>
    <url>/2020/01/12/2689904204/</url>
    <content><![CDATA[<h1 id="装饰器工厂"><a href="#装饰器工厂" class="headerlink" title="装饰器工厂"></a>装饰器工厂</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">color</span>(<span class="params">value: <span class="built_in">string</span></span>) </span>&#123; <span class="comment">// 这是一个装饰器工厂</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123; <span class="comment">//  这是装饰器</span></span><br><span class="line">        <span class="comment">// do something </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h1><blockquote>
<p>重载构造函数</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classDecorator</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123;<span class="keyword">new</span>(...args:<span class="built_in">any</span>[]):&#123;&#125;&#125;&gt;(<span class="keyword">constructor</span>:T) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="keyword">extends</span> <span class="keyword">constructor</span> &#123;</span><br><span class="line">        newProperty = <span class="string">"new property"</span>;</span><br><span class="line">        hello = <span class="string">"override"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@classDecorator</span></span><br><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">    property = <span class="string">"property"</span>;</span><br><span class="line">    hello: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">m: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hello = m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Greeter(<span class="string">"world"</span>));</span><br></pre></td></tr></table></figure>

<p>类中不同声明上的装饰器将按以下规定的顺序应用：</p>
<ol>
<li>参数装饰器，然后依次是方法装饰器，访问符装饰器，或属性装饰器应用到每个实例成员。</li>
<li>参数装饰器，然后依次是<em>方法装饰器</em>，<em>访问符装饰器</em>，或<em>属性装饰器</em>应用到每个静态成员。</li>
<li>参数装饰器应用到构造函数。</li>
<li>类装饰器应用到类。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@sealed</span></span><br><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sealed</span>(<span class="params">constructor: <span class="built_in">Function</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.seal(<span class="keyword">constructor</span>);</span><br><span class="line">    <span class="built_in">Object</span>.seal(<span class="keyword">constructor</span>.prototype);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h1><ol>
<li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li>
<li>成员的名字。</li>
<li>成员的属性描述符。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@enumerable</span>(<span class="literal">false</span>)</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enumerable</span>(<span class="params">value: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">        descriptor.enumerable = value;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="访问器装饰器"><a href="#访问器装饰器" class="headerlink" title="访问器装饰器"></a>访问器装饰器</h1><ol>
<li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li>
<li>成员的名字。</li>
<li>成员的属性描述符。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Point &#123;</span><br><span class="line">    <span class="keyword">private</span> _x: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">private</span> _y: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._x = x;</span><br><span class="line">        <span class="keyword">this</span>._y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@configurable</span>(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">get</span> x() &#123; <span class="keyword">return</span> <span class="keyword">this</span>._x; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@configurable</span>(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">get</span> y() &#123; <span class="keyword">return</span> <span class="keyword">this</span>._y; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configurable</span>(<span class="params">value: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">        descriptor.configurable = value;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h1><ol>
<li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li>
<li>成员的名字。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">    <span class="meta">@format</span>(<span class="string">"Hello, %s"</span>)</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet() &#123;</span><br><span class="line">        <span class="keyword">let</span> formatString = getFormat(<span class="keyword">this</span>, <span class="string">"greeting"</span>);</span><br><span class="line">        <span class="keyword">return</span> formatString.replace(<span class="string">"%s"</span>, <span class="keyword">this</span>.greeting);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"reflect-metadata"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formatMetadataKey = Symbol(<span class="string">"format"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">formatString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Reflect.metadata(formatMetadataKey, formatString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFormat</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Reflect.getMetadata(formatMetadataKey, target, propertyKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h1><ol>
<li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li>
<li>成员的名字。</li>
<li>参数在函数参数列表中的索引。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@validate</span></span><br><span class="line">    greet(<span class="meta">@required</span> name: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">", "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"reflect-metadata"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requiredMetadataKey = Symbol(<span class="string">"required"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">required</span>(<span class="params">target: <span class="built_in">Object</span>, propertyKey: <span class="built_in">string</span> | symbol, parameterIndex: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> existingRequiredParameters: <span class="built_in">number</span>[] = Reflect.getOwnMetadata(requiredMetadataKey, target, propertyKey) || [];</span><br><span class="line">    existingRequiredParameters.push(parameterIndex);</span><br><span class="line">    Reflect.defineMetadata(requiredMetadataKey, existingRequiredParameters, target, propertyKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">target: <span class="built_in">any</span>, propertyName: <span class="built_in">string</span>, descriptor: TypedPropertyDescriptor&lt;<span class="built_in">Function</span>&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> method = descriptor.value;</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> requiredParameters: <span class="built_in">number</span>[] = Reflect.getOwnMetadata(requiredMetadataKey, target, propertyName);</span><br><span class="line">        <span class="keyword">if</span> (requiredParameters) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> parameterIndex of requiredParameters) &#123;</span><br><span class="line">                <span class="keyword">if</span> (parameterIndex &gt;= <span class="built_in">arguments</span>.length || <span class="built_in">arguments</span>[parameterIndex] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Missing required argument."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> method.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode#11盛最多水的容器</title>
    <url>/2019/11/01/3449751240/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>说明：你不能倾斜容器，且 n 的值至少为 2。</p>
<p><img src="http://img.chensenran.top/1572538770271.jpg" alt="题目描述"></p>
<p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>
<p><strong>示例:</strong></p>
<blockquote>
<p>输入: [1,8,6,2,5,4,8,3,7]<br>输出: 49</p>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>矩形的面机 = 底 * 高 = （下标插值 * 较短高度）</p>
<p>当首末位置时，下标插值最大。双指针指向两个下标，并向内减小。<br>减小条件：左 &lt; 右，并且向值小的方向减小。（因为面积取决于较小的数值，所以尽可能保留较大的数值）。</p>
<p>用一个常量保存最大值，直至循环结束。</p>
<p><em>末尾附leetcode题解图</em></p>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(1)O(1)</li>
</ul>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><ul>
<li>执行用时：68 ms, 在所有 javascript 提交中击败了90.17%的用户</li>
<li>内存消耗：35.3 MB, 在所有 javascript 提交中击败了83.61%的用户</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span> (<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>, right = height.length - <span class="number">1</span>, max = -<span class="literal">Infinity</span>;</span><br><span class="line">  <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    max = <span class="built_in">Math</span>.max(max, (right - left) * <span class="built_in">Math</span>.min(height[left], height[right]));</span><br><span class="line">    (height[left] &lt; height [right] ? left++ : right--);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>这道题一开始我想的是按照数值进行排序（元素内包含下标），然后寻找面积最大值。这样的时间复杂度会增加到O(nlog(n)),因为要进行一次排序。</p>
<p>但是双指针进行向内缩小范围，就不用进行排序。因为已经是有序的序列了，这样可以缩小时间复杂度至O(n)。</p>
<h3 id="附leetcode题解图"><a href="#附leetcode题解图" class="headerlink" title="附leetcode题解图"></a><em>附leetcode题解图</em></h3><p><img src="http://img.chensenran.top/1572539158521.png" alt="第一步"></p>
<p><img src="http://img.chensenran.top/1572539284834.png" alt="第二步"></p>
<p><img src="http://img.chensenran.top/1572539399365.png" alt="第三步"></p>
<p><img src="http://img.chensenran.top/1572539424146.png" alt="第四步"></p>
<p><img src="http://img.chensenran.top/1572539461521.png" alt="第五步"></p>
<p><img src="http://img.chensenran.top/1572539482990.png" alt="第六步"></p>
<p><img src="http://img.chensenran.top/1572539518865.png" alt="第七步"></p>
<p><img src="http://img.chensenran.top/1572539544162.png" alt="第八步"></p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>双指针</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-122买卖股票的最佳时机II</title>
    <url>/2020/01/22/2550552421/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>
<p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<ul>
<li>示例 1:</li>
</ul>
<p>输入: [7,1,5,3,6,4]<br>输出: 7<br>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。<br>     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</p>
<ul>
<li>示例 2:</li>
</ul>
<p>输入: [1,2,3,4,5]<br>输出: 4<br>解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。<br>     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。<br>     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</p>
<ul>
<li>示例 3:</li>
</ul>
<p>输入: [7,6,4,3,1]<br>输出: 0<br>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p>
<h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><ul>
<li><p>执行用时 :68 ms, 在所有 JavaScript 提交中击败了76.59%的用户</p>
</li>
<li><p>内存消耗 :35.2 MB, 在所有 JavaScript 提交中击败了86.85%的用户</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">prices</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prices.reduce(<span class="function">(<span class="params">pre, cur, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cur &gt; arr[index - <span class="number">1</span>]) &#123;</span><br><span class="line">      pre += (cur - arr[index - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode-136只出现一次的数字</title>
    <url>/2020/01/22/3259562324/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<ul>
<li>说明：</li>
</ul>
<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<ul>
<li>示例 1:</li>
</ul>
<p>输入: [2,2,1]<br>输出: 1</p>
<ul>
<li>示例 2:</li>
</ul>
<p>输入: [4,1,2,1,2]<br>输出: 4</p>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>使用异或运算</p>
<ul>
<li>如果我们对 0 和二进制位做 XOR 运算，得到的仍然是这个二进制位<br>a ⊕ 0 = a</li>
<li>如果我们对相同的二进制位做 XOR 运算，返回的结果是 0<br>a ⊕ a = 0</li>
<li>XOR 满足交换律和结合律<br>a ⊕ b ⊕ a = ( a ⊕ a ) ⊕ b = 0 ⊕ b = b</li>
</ul>
<h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><ul>
<li><p>执行用时 :64 ms, 在所有 JavaScript 提交中击败了89.24%的用户</p>
</li>
<li><p>内存消耗 :35.3 MB, 在所有 JavaScript 提交中击败了80.71%的用户</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nums.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre ^ cur)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>异或运算</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode#171Excel表列序号</title>
    <url>/2019/11/26/1957337873/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个Excel表格中的列名称，返回其相应的列序号。</p>
<p>例如，</p>
<pre><code>A -&gt; 1
B -&gt; 2
C -&gt; 3
...
Z -&gt; 26
AA -&gt; 27
AB -&gt; 28 
...</code></pre><p>示例 :</p>
<blockquote>
<p>输入: “A”<br>输出: 1<br>示例 2:</p>
</blockquote>
<blockquote>
<p>输入: “AB”<br>输出: 28<br>示例 3:</p>
</blockquote>
<blockquote>
<p>输入: “ZY”<br>输出: 701</p>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>进制转换，从低位开始乘以26的次方。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>执行用时 :76 ms, 在所有 javascript 提交中击败了94.10%的用户</p>
<p>内存消耗 :34.8 MB, 在所有 javascript 提交中击败了54.67%的用户</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> titleToNumber = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = s.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (len === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    sum = sum * <span class="number">26</span> + (s.charCodeAt(i) - <span class="number">64</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>进制</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode#172阶乘后的零</title>
    <url>/2019/11/26/596210080/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数 n，返回 n! 结果尾数中零的数量。</p>
<p>示例 1:</p>
<blockquote>
<p>输入: 3<br>输出: 0<br>解释: 3! = 6, 尾数中没有零。</p>
</blockquote>
<p>示例 2:</p>
<blockquote>
<p>输入: 5<br>输出: 1<br>解释: 5! = 120, 尾数中有 1 个零.</p>
</blockquote>
<p>说明: 你算法的时间复杂度应为 O(log n) 。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>计算末尾0的个数，实则是求5的个数。（ 2 * 5 === 10）</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>执行用时 :68 ms, 在所有 javascript 提交中击败了87.97%的用户</p>
<p>内存消耗 :33.9 MB, 在所有 javascript 提交中击败了64.55%的用户</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> trailingZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    n = <span class="built_in">Math</span>.floor(n / <span class="number">5</span>);</span><br><span class="line">    sum += n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>阶乘</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode#202快乐数</title>
    <url>/2019/11/24/518869312/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>编写一个算法来判断一个数是不是“快乐数”。</p>
<p>一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。</p>
<p>示例: </p>
<blockquote>
<p>输入: 19<br>输出: true<br>解释:<br>12 + 92 = 82<br>82 + 22 = 68<br>62 + 82 = 100<br>12 + 02 + 02 = 1</p>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用快慢指针。因为存在循环，所以可以使用快慢指针解决这个问题。一个指针做一次，另一个指针做两次。当两个指针相同时，说明刚好经过一次循环。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>执行用时 :68 ms, 在所有 javascript 提交中击败了94.36%的用户</p>
<p>内存消耗 :36 MB, 在所有 javascript 提交中击败了33.74%的用户</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isHappy = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> left = n, right = n;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    left = fun(left);</span><br><span class="line">    right = fun(right);</span><br><span class="line">    right = fun(right);</span><br><span class="line">  &#125; <span class="keyword">while</span> (left !== right)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> left === <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = num.toString().split(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">let</span> t = arr.reduce(<span class="function">(<span class="params">acc, cur, index, src</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> acc + <span class="built_in">Math</span>.pow(<span class="built_in">parseInt</span>(cur), <span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>快慢指针</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-26删除排序数组中的重复项</title>
    <url>/2020/01/21/3973553052/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<ul>
<li>示例 1:</li>
</ul>
<p>给定数组 nums = [1,1,2], </p>
<p>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </p>
<p>你不需要考虑数组中超出新长度后面的元素。</p>
<ul>
<li>示例 2:</li>
</ul>
<p>给定 nums = [0,0,1,1,1,2,2,3,3,4],</p>
<p>函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</p>
<p>你不需要考虑数组中超出新长度后面的元素。</p>
<blockquote>
<p>说明:</p>
<p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<p>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br>int len = removeDuplicates(nums);<br>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>利用双指针，快指针的值是否等于慢指针。如果相等，则表示有重复数字；如果不等，则赋值给慢指针。</p>
<h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><p>执行用时 :68 ms, 在所有 JavaScript 提交中击败了99.38%的用户</p>
<p>内存消耗 :36.6 MB, 在所有 JavaScript 提交中击败了75.82%的用户</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numsLength = nums.length;</span><br><span class="line">  <span class="keyword">if</span> (numsLength &lt; <span class="number">2</span>) <span class="keyword">return</span> numsLength;</span><br><span class="line">  <span class="keyword">let</span> len = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; numsLength; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] !== nums[len - <span class="number">1</span>]) &#123;</span><br><span class="line">      nums[len++] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode#297二叉树的序列化与反序列化</title>
    <url>/2019/11/14/2353831610/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p>
<p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p>
<p><strong>示例:</strong> </p>
<blockquote>
<p>你可以将以下二叉树：</p>
</blockquote>
<p><img src="http://img.chensenran.top/1573721707240.png" alt="二叉树"></p>
<blockquote>
<p>序列化为 “[1,2,3,null,null,4,5]”<br><strong>提示:</strong> 这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p>
</blockquote>
<p><strong>说明:</strong> 不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>序列化：序列化的思路参考树的层次遍历的方式，使用队列。如果改节点是叶子节点，则入队两个null。</li>
<li>反序列化：也是用队列，因为一个非空节点必定对应两个子节点。以此解析即可。</li>
</ul>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>序列化：</p>
<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(n)</li>
</ul>
<p>反序列化：</p>
<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(n)</li>
</ul>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><blockquote>
<p> 执行用时 :116 ms, 在所有 javascript 提交中击败了62.41%的用户</p>
<p>内存消耗 :44.4 MB, 在所有 javascript 提交中击败了20.00%的用户</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> * this.val = val;</span></span><br><span class="line"><span class="comment"> * this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Encodes a tree to a single string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> serialize = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">const</span> queue = [];</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  queue.push(root);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = queue.shift();</span><br><span class="line">    <span class="keyword">if</span> (!temp) &#123;</span><br><span class="line">      result.push(<span class="string">'null'</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    result.push(temp.val);</span><br><span class="line">    queue.push(temp.left);</span><br><span class="line">    queue.push(temp.right);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result.join(<span class="string">','</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decodes your encoded data to tree.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">data</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> deserialize = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (data.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  data = data.split(<span class="string">','</span>);</span><br><span class="line">  <span class="keyword">const</span> queue = [];</span><br><span class="line">  <span class="keyword">const</span> root = <span class="keyword">new</span> TreeNode(data[<span class="number">0</span>]);</span><br><span class="line">  queue.push(root);</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = queue.shift();</span><br><span class="line">    <span class="keyword">if</span> (data[index] != <span class="string">'null'</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> left = <span class="keyword">new</span> TreeNode(data[index]);</span><br><span class="line">      temp.left = left;</span><br><span class="line">      queue.push(left)</span><br><span class="line">  	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      temp.left = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    index++;</span><br><span class="line">    <span class="keyword">if</span> (data[index] != <span class="string">'null'</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> right = <span class="keyword">new</span> TreeNode(data[index]);</span><br><span class="line">      temp.right = right;</span><br><span class="line">      queue.push(right);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      temp.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    index++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your functions will be called as such:</span></span><br><span class="line"><span class="comment"> * deserialize(serialize(root));</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>这题一共提交了8次才通过。最初序列化的想法是形成一个完全二叉树，这样在反序列化时就可更加便捷。但是在每层只有少量节点的树中，会造成很大的空间和时间上的浪费，最终导致超出时间限制。</p>
<p>当此节点为叶子节点时，只需要下一层标识左右节点都为null，就可以判断为叶子节点。</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode#4寻找两个有序数组的中位数</title>
    <url>/2019/10/29/2361497007/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</p>
<p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p>
<p>你可以假设 nums1 和 nums2 不会同时为空。</p>
<p><strong>示例 1:</strong></p>
<blockquote>
<p>nums1 = [1, 3]<br>nums2 = [2]<br>则中位数是 2.0</p>
</blockquote>
<p><strong>示例 2:</strong></p>
<blockquote>
<p>nums1 = [1, 2]<br>nums2 = [3, 4]<br>则中位数是 (2 + 3) / 2 = 2.5</p>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><strong>中位数</strong>：两边的个数相同</p>
<p>设数组长度为m,n(保证m &lt; n)，在任意位置将数组A分成两部分：</p>
<table>
<thead>
<tr>
<th>left_A</th>
<th>right_A</th>
</tr>
</thead>
<tbody><tr>
<td>A[0], A[1], A[2] … A[i-1]</td>
<td>A[i], A[i+1] … A[m-1]</td>
</tr>
</tbody></table>
<p> 同理，对数组B也进行划分：</p>
<table>
<thead>
<tr>
<th>left_B</th>
<th>right_B</th>
</tr>
</thead>
<tbody><tr>
<td>B[0], B[1] … B[j-i]</td>
<td>B[j], B[j+1] … B[n-1]</td>
</tr>
</tbody></table>
<p>对两个数组进行同时比较</p>
<table>
<thead>
<tr>
<th>left</th>
<th>right</th>
</tr>
</thead>
<tbody><tr>
<td>A[0], A[1], A[2] … A[i-1]</td>
<td>A[i], A[i+1] … A[m-1]</td>
</tr>
<tr>
<td>B[0], B[1] … B[j-i]</td>
<td>B[j], B[j+1] … B[n-1]</td>
</tr>
</tbody></table>
<p>可得：</p>
<ul>
<li>len(left) = len(right)</li>
<li>max(left) ≤ min(right)</li>
</ul>
<p>当满足以上两个条件时，我们将数组分成了两个长度相同的部分，且右边的元素都比左边大。由此及可算出中位数。</p>
<blockquote>
<p>median = max(left) + min(right) / 2</p>
</blockquote>
<p>推到以上两个条件得</p>
<blockquote>
<ol>
<li>i + j = m − i + n − j（或：m - i + n - j + 1）<br>如果 n &gt;= m，则 i ∈ [0, m), j = (m + n + 1) / 2 - i</li>
<li>B[j−1] ≤ A[i] &amp;&amp; A[i-1] ≤ B[j]</li>
</ol>
</blockquote>
<p>为了满足以上两个条件，我们只需要在[0, m)中寻找i，使得<br><strong>B[j−1] ≤ A[i] &amp;&amp; A[i-1] ≤ B[j]</strong></p>
<p>接着进行二叉树搜索，使得满足该条件。</p>
<blockquote>
<ul>
<li>设leftInde = 0, rightIndex = m.length</li>
<li>i = (leftIndex + rightIndex) / 2<br>j = (m + n + 1) / 2 - i</li>
<li>至此我们肯定保证了左右两边的数组长度相等，则判断是否满足 B[j−1] ≤ A[i] &amp;&amp; A[i-1] ≤ B[j]即可。</li>
</ul>
</blockquote>
<p>可能会有三种不同的情况：</p>
<blockquote>
<ol>
<li>B[j-1] &gt; A[i] 表明i太小，leftIndex = i + 1</li>
<li>A[i-1] &gt; B[j] 标明i太大，rightIndex = j -1</li>
<li>满足B[j−1] ≤ A[i] &amp;&amp; A[i-1] ≤ B[j]，找到中位数</li>
</ol>
</blockquote>
<p><strong>对于临界值的处理 (i = 0, i = m, j = 0, j = n)</strong></p>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul>
<li>时间复杂度：O(log(m))</li>
<li>空间复杂度: O(1)</li>
</ul>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><ul>
<li>执行用时：124 ms, 在所有 javascript 提交中击败了95.59%的用户</li>
<li>内存消耗：39 MB, 在所有 javascript 提交中击败了88.52%的用户</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMedianSortedArrays = <span class="function"><span class="keyword">function</span> (<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> m = nums1.length,</span><br><span class="line">    n = nums2.length;</span><br><span class="line">  <span class="comment">// 调整nums1为较短数组</span></span><br><span class="line">  <span class="keyword">if</span> (m &gt; n) &#123;</span><br><span class="line">    [nums1, nums2] = [nums2, nums1];</span><br><span class="line">    m = nums1.length;</span><br><span class="line">    n = nums2.length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断是否较短数组为空</span></span><br><span class="line">  <span class="keyword">if</span> (m === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> nums2[(n - <span class="number">1</span>) / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (nums2[(n / <span class="number">2</span>)] + nums2[(n / <span class="number">2</span> - <span class="number">1</span>)]) / <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> leftIndex = <span class="number">0</span>, rightIndex = m; <span class="comment">// i的边界值</span></span><br><span class="line">  <span class="keyword">const</span> t = <span class="built_in">Math</span>.floor((m + n + <span class="number">1</span>) / <span class="number">2</span>); <span class="comment">// 所有数据的一半个数</span></span><br><span class="line">  <span class="keyword">let</span> i, j;</span><br><span class="line">  <span class="keyword">while</span> (leftIndex &lt;= rightIndex) &#123;</span><br><span class="line">    i = <span class="built_in">Math</span>.floor((leftIndex + rightIndex) / <span class="number">2</span>);</span><br><span class="line">    j = t - i;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; rightIndex &amp;&amp; nums1[i] &lt; nums2[j - <span class="number">1</span>]) &#123;</span><br><span class="line">      leftIndex = i + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; leftIndex &amp;&amp; nums1[i - <span class="number">1</span>] &gt; nums2[j]) &#123;</span><br><span class="line">      rightIndex = i - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// TODO：注意边界值处理</span></span><br><span class="line">      <span class="keyword">let</span> left = -<span class="literal">Infinity</span>;</span><br><span class="line">      <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">        left = nums2[j - <span class="number">1</span>];</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j === <span class="number">0</span>) &#123;</span><br><span class="line">        left = nums1[i - <span class="number">1</span>];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        left = <span class="built_in">Math</span>.max(nums1[i - <span class="number">1</span>], nums2[j - <span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ((m + n) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> right = -<span class="literal">Infinity</span>;</span><br><span class="line">      <span class="keyword">if</span> (i === m) &#123;</span><br><span class="line">        right = nums2[j];</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j === n) &#123;</span><br><span class="line">        right = nums1[i];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right = <span class="built_in">Math</span>.min(nums1[i], nums2[j]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>这道题尝试了很多次才通过。一开始的想法是利用二分法不断对缩小两个数组的查找范围。分别找到两个数组的中位数，比较大小并且向中间区域缩小范围。最终没有实现，因为在最后中位数判断时，出现无法判断哪个是所求的中位数。</p>
<p>AC的思路很巧妙，利用数组大小不变的特性维护左右两边元素个数相同的特点。并且利用中位数左边的元素一定比右边小的特点，来寻找所有的值。但是在coding的过程中，临界值处理上困到了一些小困难，花费了一些时间。</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数组</tag>
        <tag>中位数</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode#69X的平方根</title>
    <url>/2019/11/28/632519899/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>实现 int sqrt(int x) 函数。</p>
<p>计算并返回 x 的平方根，其中 x 是非负整数。</p>
<p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p>
<blockquote>
<p>示例 1</p>
<p>输入: 4<br>输出: 2</p>
</blockquote>
<blockquote>
<p>示例 2:</p>
<p>输入: 8<br>输出: 2</p>
</blockquote>
<blockquote>
<p>说明: 8 的平方根是 2.82842…,<br>由于返回类型是整数，小数部分将被舍去。</p>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>二分逼近，从左右边界向中间逼近。（注意边界值的处理，可能会出现死循环）</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>执行用时 :80 ms, 在所有 javascript 提交中击败了88.67%的用户</p>
<p>内存消耗 :35.5 MB, 在所有 javascript 提交中击败了59.66%的用户</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mySqrt = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>, right = (x / <span class="number">2</span> + <span class="number">1</span>) | <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">let</span> t = (left + right + <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> num = t ** <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (num === x) &#123;</span><br><span class="line">      <span class="keyword">return</span> t;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; x) &#123;</span><br><span class="line">      left = t;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right = t - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> right | <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2-组件传值</title>
    <url>/2020/02/20/593345607/</url>
    <content><![CDATA[<h1 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h1><blockquote>
<p>v-model 本质上不过是语法糖（v-bind:value 和 v-on:input）</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'base-checkbox'</span>, &#123;</span><br><span class="line">  <span class="comment">// 添加model属性</span></span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">'topTitle'</span>,</span><br><span class="line">    event: <span class="string">'change'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    topTitle: <span class="built_in">String</span> <span class="comment">// 注意：仍需申明props</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      v-bind:value="topTitle"</span></span><br><span class="line"><span class="string">      v-on:change="$emit('change', $event.target.value)"</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>现在可以在父组件传入 title 属性值，并且在子组件中可通过事件修改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">v-model</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h1><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>可以说这是比较常见的一种Vue父组件传值给子组件的方法。<br><strong>注：prop为单向流，子组件不应直接修改该值。应该使用计算属性使用props</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'base-list'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'default value'</span>,</span><br><span class="line">      validator (value) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.length &lt; <span class="number">20</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    id: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      validator(value) &#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt; <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    userId() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`&lt;p&gt;编号：&#123;&#123; userId &#125;&#125;&lt;/p&gt;`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>props应该尽可能的将属性写完成，这样可以更好地防止出乎意料的错误发生。</p>
<p>如果需要传递对象所有属性，可直接省略对象名。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意 v-bind 不可简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-list</span> <span class="attr">v-bind</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;/<span class="name">base-list</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="children-refs"><a href="#children-refs" class="headerlink" title="$children / $refs"></a>$children / $refs</h2><p>所有的子组件都会保存在$children数组中，该数组乱序。<br>注：在控制台将Vue实例打印出来我们可以发现很多以$和<em>（下划线）开头的属性。$开头的属性是提供给用户使用的，</em> 开头的属性是Vue内部使用的。开发者不应该直接修改以 _ 开头的属性，以免造成不可预料的错误（当然，直接修改也有很多surprise &gt;_&lt;）。</p>
<p>直接给子元素添加ref属性，通过$refs直接访问。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">base-title</span> <span class="attr">ref</span>=<span class="string">"essay"</span>&gt;</span><span class="tag">&lt;/<span class="name">base-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'base-title'</span>, &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`&lt;p&gt;&#123;&#123;value&#125;&#125;&lt;/p&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="comment">// 注意：this.$refs['essay']可能为undefined，需要进行保护</span></span><br><span class="line">    <span class="keyword">this</span>.$refs[<span class="string">'essay'</span>][<span class="string">"value"</span>] = <span class="built_in">Date</span>.now();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure>



<h2 id="attrs"><a href="#attrs" class="headerlink" title="$attrs"></a>$attrs</h2><blockquote>
<p>官网定义：包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定。</p>
</blockquote>
<p>这句话看起来有点绕，但其实很好理解。大白话就是：父组件传入子组件，但是props中没有定义的属性。<br><strong>注：该属性只读</strong></p>
<p>该属性在传值中并不常用，但是在创建高级别的组件/多层嵌套的时候非常有用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">base-card</span> <span class="attr">v-bind</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;/<span class="name">base-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">Vue.component(<span class="string">'base-card'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'name'</span>], <span class="comment">// 此处简写props，但在实际使用中建议写完整，并且通过计算属性调用</span></span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// $attrs 父组件传入值中，没有被props识别的。可继续向子组件传值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$attrs)</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;姓名：&#123;&#123; name &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;base-age v-bind="$attrs"&gt;&lt;/base-age&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 孙组件</span></span><br><span class="line">Vue.component(<span class="string">'base-age'</span>,&#123;</span><br><span class="line">  props:[<span class="string">'age'</span>],</span><br><span class="line">  template: <span class="string">`&lt;p&gt;&#123;&#123;age&#125;&#125;&lt;/p&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      post: &#123;</span><br><span class="line">        value: <span class="string">'monkeycf'</span>,</span><br><span class="line">        id: <span class="number">24</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure>



<h2 id="listeners"><a href="#listeners" class="headerlink" title="$listeners"></a>$listeners</h2><blockquote>
<p>包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。</p>
</blockquote>
<p>和$attrs属性一样，该属性为<strong>只读</strong>，并且在创建更高层次的组件时很有用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">base-card</span> <span class="attr">v-on:update:change-age</span>=<span class="string">"changeAge"</span>&gt;</span><span class="tag">&lt;/<span class="name">base-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">Vue.component(<span class="string">'base-card'</span>, &#123;</span><br><span class="line">  <span class="comment">// $listeners 表示父作用域中v-on的监听器</span></span><br><span class="line">  <span class="comment">// 注：此处v-on不能简写</span></span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;</span></span><br><span class="line"><span class="string">      &lt;base-age v-on="$listeners"&gt;&lt;/grand&gt;</span></span><br><span class="line"><span class="string">    &lt;/p&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 孙组件</span></span><br><span class="line">Vue.component(<span class="string">'base-age'</span>, &#123;</span><br><span class="line">  template: <span class="string">`&lt;button @click="$emit('update:change-age')"&gt;click this&lt;/button&gt;`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h1 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h1><h2 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h2><blockquote>
<p>触发当前示例上的时间</p>
</blockquote>
<p>第一个参数为事件名，第二个参数为需要传递的值（如有多个需要传递的值，可以使用对象的方式传递）<br>其实绑定在事件上的函数是以数组的形式存储的，所以对于一个事件可能会触发多个事件。</p>
<h2 id="parent"><a href="#parent" class="headerlink" title="$parent"></a>$parent</h2><blockquote>
<p>父示例，如果有的话</p>
</blockquote>
<p>直接暴力的访问父组件，并且修改属性值。（个人觉得这个方法不太好。。。）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'base-card'</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button @click="$parent['time'] = Date.now()"&gt;change&lt;/button&gt;`</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      time: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure>



<h2 id="sync"><a href="#sync" class="headerlink" title=".sync"></a>.sync</h2><p>这其实是一个缩写。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-name</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:name</span> = <span class="string">"post.name"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:update:name</span> = <span class="string">"post.name = $event"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">base-name</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">base-name</span> <span class="attr">:name.sync</span>=<span class="string">"post.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">base-name</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件调用</span></span><br><span class="line"><span class="keyword">this</span>.emit(<span class="string">'update:name'</span>, <span class="string">'new name'</span>);</span><br></pre></td></tr></table></figure>


<h1 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h1><p>事件总线（个人觉得用起来很方便，但是不太容易维护）</p>
<p>使用：</p>
<ol>
<li>新建一个Vue示例（或直接在根组件添加一个特殊属性，如$bus) <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure></li>
<li>在该实例上添加事件 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">eventBus.$on(<span class="string">'change'</span>, (value) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>调用事件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">eventBus.$emit(<span class="string">'chage'</span>,<span class="string">'new value'</span>)</span><br></pre></td></tr></table></figure></li>
<li>移除事件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">eventBus.$off(<span class="string">'change'</span>);</span><br><span class="line"><span class="comment">// 当然也可以移除某个函数</span></span><br><span class="line"><span class="comment">// eventBus.$off('change', fun);</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>作为Vue的核心插件，这里就不再多多累赘了，可详见官网<a href="https://vuex.vuejs.org" target="_blank" rel="noopener">Vuex</a></p>
]]></content>
      <categories>
        <category>Vue2</category>
      </categories>
      <tags>
        <tag>Vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2源码-1-项目结构与架构设计</title>
    <url>/2020/02/12/263498561/</url>
    <content><![CDATA[<h1 id="Vue2项目结构"><a href="#Vue2项目结构" class="headerlink" title="Vue2项目结构"></a>Vue2项目结构</h1><p>|— dist                                  # 构建后的文件</p>
<p>|— flow                                 # Flow的类型声明</p>
<p>|— packages                        # 文件内的包作为单独NPM包发布</p>
<p>|— scripts                             # 与构建相关的脚本和配置文件</p>
<p>|— src                                    # 源代码</p>
<p>|—— compiler                      # 与模 板编译相关</p>
<p>|—— core                              # 通用的、与平台无关的运行时的代码</p>
<p>|——— components            # 通用的抽象组件</p>
<p>|——— global-api                 # 全局API代码</p>
<p>|——— instance                   # Vue.js 实例的构造函数和原型方法</p>
<p>|———observer                   # 实现侦测的代码</p>
<p>|——— util                            # 一些方法</p>
<p>|——— vdom                       # 实现虚拟DOM的代码</p>
<p>|—— platform                      # 特定平台的代码</p>
<p>|—— server                           # 与服务端渲染相关的代码</p>
<p>|—— sfc                                  # 单文件组件解析逻辑</p>
<p>|—— shared                          # 项目的公用工具代码</p>
<p>|—types                                  # TypeScript类型定义。</p>
<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><table>
<thead>
<tr>
<th></th>
<th>UMD</th>
<th>CommonJS</th>
<th>ES Module（基于构建工具）</th>
<th>ES Module（直接用于浏览器）</th>
</tr>
</thead>
<tbody><tr>
<td>完整版</td>
<td>vue.js</td>
<td>vue.common.js</td>
<td>vue.esm.js</td>
<td>vue.esm.browser.js</td>
</tr>
<tr>
<td>运行版本</td>
<td>vue.runtime.js</td>
<td>vue.runtime.common.js</td>
<td>vue.runtime.esm.js</td>
<td></td>
</tr>
<tr>
<td>完整版（生产环境）</td>
<td>vue.min.js</td>
<td></td>
<td></td>
<td>vue.esm.browser.min.js</td>
</tr>
<tr>
<td>运行版本（生产环境）</td>
<td>vue.runtime.min.js</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>完整版：包含编译器和运行版本</li>
<li>编译器：将模板字符串编译成JavaScript渲染函数</li>
<li>运行版本：创建Vue实例，渲染视图和虚拟DOM</li>
<li>UMD：可以通过&lt;script&gt;标签直接在浏览器中使用</li>
<li>CommonJS：配合较旧的打包工具</li>
<li>ES Module：<ul>
<li>配合现代打包工具</li>
<li>为浏览器提供（&lt;script type=”module”&gt;)</li>
</ul>
</li>
</ul>
<h1 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h1><p>整体分为三部分：核心代码、跨平台相关、公用工具函数</p>
<p><img src="http://img.chensenran.top/1581574071527.png" alt="vue程序架构设计"></p>
<p><img src="http://img.chensenran.top/1581574276855.png" alt=""></p>
]]></content>
      <categories>
        <category>Vue2</category>
      </categories>
      <tags>
        <tag>Vue2</tag>
        <tag>Vue2源码</tag>
      </tags>
  </entry>
  <entry>
    <title>vue2源码-2-变化侦测</title>
    <url>/2020/02/21/4222516761/</url>
    <content><![CDATA[<h1 id="Vue工作机制"><a href="#Vue工作机制" class="headerlink" title="Vue工作机制"></a>Vue工作机制</h1><p><img src="http://img.chensenran.top/1582276323672.png" alt=""></p>
<h1 id="依赖收集与追踪"><a href="#依赖收集与追踪" class="headerlink" title="依赖收集与追踪"></a>依赖收集与追踪</h1><h2 id="发布、订阅模式"><a href="#发布、订阅模式" class="headerlink" title="发布、订阅模式"></a>发布、订阅模式</h2><p><img src="http://img.chensenran.top/1582276549906.png" alt="Vue底层原理关系图"></p>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p><img src="http://img.chensenran.top/1582276474688.png" alt=""></p>
<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><ol>
<li><p>与Object不同，通过方法来改变内容，所以通过<strong>创建拦截器</strong>去覆盖数组原型实现追踪变化</p>
</li>
<li><p>不污染全局Array.prototype，只针对需要侦听变化的数组，使用<strong>proto</strong>覆盖原型方法</p>
</li>
<li><p>在拦截器中，向依赖发消息，依赖数组保存在Observer实例上</p>
</li>
<li><p>__ob__:</p>
<ol>
<li>标记数组是否被侦听，并保证只侦听一次</li>
<li>通过__ob__拿到Observer实例上保存的依赖数组</li>
</ol>
</li>
<li><p>对每个元素都转化响应式并侦听</p>
</li>
<li><p>对push、unshift、splice添加的新数据侦听</p>
</li>
<li><p>无法拦截数组特有语法</p>
</li>
<li><p>可拦截方法：</p>
<ul>
<li>push</li>
<li>pop</li>
<li>shift</li>
<li>unshift</li>
<li>splice</li>
<li>sort</li>
<li>reverse</li>
</ul>
</li>
</ol>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>简单编译流程：解析器-&gt;优化器-&gt;代码生成器<br><img src="http://img.chensenran.top/1582277331516.png" alt=""></p>
<p><img src="http://img.chensenran.top/1582277240344.png" alt=""></p>
]]></content>
      <categories>
        <category>Vue2</category>
      </categories>
      <tags>
        <tag>Vue2</tag>
        <tag>Vue2源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2源码-3-变化侦测相关的API实现原理</title>
    <url>/2020/01/21/429737347/</url>
    <content><![CDATA[<h1 id="vm-watch"><a href="#vm-watch" class="headerlink" title="vm.$watch"></a>vm.$watch</h1><ul>
<li><p>vm.$watch( expOrFn, callback, [options])</p>
</li>
<li><p><strong>参数</strong>：</p>
<ul>
<li>{string | Function} expOrFn</li>
<li>{Function | Object} callback</li>
<li>{Object} [options]<ul>
<li>{boolean} deep <em>（发现对象内部值的变化）</em></li>
<li>{boolean} immediate<em>（ 立即以表达式的当前值触发回调，例：父组件给子组件 传值，最初绑定值时也执行函数）</em></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>返回值</strong>：{Function} unwatch</p>
</li>
<li><p><strong>用法</strong>：</p>
<p>观察 Vue 实例上的一个表达式或者一个函数计算结果的变化。回调函数得到的参数为新值和旧值。表达式只接受监督的键路径。对于更复杂的表达式，用一个函数取代。</p>
</li>
</ul>
<h2 id="watch的内部原理"><a href="#watch的内部原理" class="headerlink" title="watch的内部原理"></a>watch的内部原理</h2><blockquote>
<p>vm.$watch其实是对Watcher的的一种封装</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/state.js </span></span><br><span class="line">Vue.prototype.$watch = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    expOrFn: string | Function,</span></span></span><br><span class="line"><span class="function"><span class="params">    cb: any,</span></span></span><br><span class="line"><span class="function"><span class="params">    options?: Object</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">Function</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (isPlainObject(cb)) &#123;</span><br><span class="line">      <span class="keyword">return</span> createWatcher(vm, expOrFn, cb, options)</span><br><span class="line">    &#125;</span><br><span class="line">    options = options || &#123;&#125;</span><br><span class="line">    options.user = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 创建一个新的Watcher</span></span><br><span class="line">    <span class="keyword">const</span> watcher = <span class="keyword">new</span> Watcher(vm, expOrFn, cb, options)</span><br><span class="line">    <span class="keyword">if</span> (options.immediate) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cb.call(vm, watcher.value)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        handleError(error, vm, <span class="string">`callback for immediate watcher "<span class="subst">$&#123;watcher.expression&#125;</span>"`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回一个取消观察数据的函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unwatchFn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 把watcher实例从当前正在观察的状态的依赖列表中删除</span></span><br><span class="line">      watcher.teardown()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在dep（依赖列表）中收集每个watcher，同时在watcher中记录被添加到哪几个dep</p>
</blockquote>
<p><img src="http://img.chensenran.top/1579590815841.png" alt="Watcher 和 Dep的关系"></p>
<ul>
<li>watcher和dep多对多的关系<ul>
<li>如果watcher中的expOrFn参数是一个表达式，那么肯定只收集一个Dep</li>
<li>如果Watcher中的expOrFn参数是一个函数，此时如果该函数中使用了多个数据，那么这时的Watcher就被多个Dep收集</li>
</ul>
</li>
</ul>
<h3 id="deep参数原理"><a href="#deep参数原理" class="headerlink" title="deep参数原理"></a>deep参数原理</h3><blockquote>
<p>触发当前这个被监听数据的收集依赖的逻辑之外，还要把当前监听的这个值在内的所有子值都触发一遍收集逻辑</p>
</blockquote>
<p>// src/core/observer/watcher.js</p>
<p><img src="http://img.chensenran.top/1579592927649.png" alt=""></p>
<p><strong>traverse()必须在popTarget()</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> seenObjects = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Recursively traverse an object to evoke all converted</span></span><br><span class="line"><span class="comment"> * getters, so that every nested property inside the object</span></span><br><span class="line"><span class="comment"> * is collected as a "deep" dependency.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">traverse</span> (<span class="params">val: any</span>) </span>&#123;</span><br><span class="line">  _traverse(val, seenObjects)</span><br><span class="line">  seenObjects.clear()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_traverse</span> (<span class="params">val: any, seen: SimpleSet</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i, keys</span><br><span class="line">  <span class="keyword">const</span> isA = <span class="built_in">Array</span>.isArray(val)</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Object.isFrozen(obj)</span></span><br><span class="line"><span class="comment">   * 是否已经被冻结，（详见MDN，与不可扩展 Object.isExtensible(obj) 的区别）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 判断是否为Array和Object，或者是否已经被冻结</span></span><br><span class="line">  <span class="keyword">if</span> ((!isA &amp;&amp; !isObject(val)) || <span class="built_in">Object</span>.isFrozen(val) || val <span class="keyword">instanceof</span> VNode) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 拿到dep的id，确保不会重复收集依赖</span></span><br><span class="line">  <span class="keyword">if</span> (val.__ob__) &#123;</span><br><span class="line">    <span class="keyword">const</span> depId = val.__ob__.dep.id</span><br><span class="line">    <span class="keyword">if</span> (seen.has(depId)) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    seen.add(depId)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isA) &#123;</span><br><span class="line">    <span class="comment">// 如果是数组，则循环数组。数组中每个元素都进行收集</span></span><br><span class="line">    i = val.length</span><br><span class="line">    <span class="keyword">while</span> (i--) _traverse(val[i], seen)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果是object，对每个key的value都进行收集</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重点：traverse必须要在popTarget前</span></span><br><span class="line"><span class="comment">     * val[keys[i]]会触发getter，也就是会触发收集依赖的操作。此时 Dep.target 还没有被清空，所以当前的watcher会被收集。</span></span><br><span class="line"><span class="comment">     * 也就是key的dep收集了当前Object的Watcher，以实现key对应的value改变，当前Watcher会更新。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    keys = <span class="built_in">Object</span>.keys(val)</span><br><span class="line">    i = keys.length</span><br><span class="line">    <span class="keyword">while</span> (i--) _traverse(val[keys[i]], seen)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="vm-set"><a href="#vm-set" class="headerlink" title="vm.$set"></a>vm.$set</h1><ul>
<li>vm.$set( target, propertyName/index, value )</li>
</ul>
<ul>
<li><p>参数**：</p>
<ul>
<li>{Object | Array} target</li>
<li>{string | number} propertyName/index</li>
<li>{any} value</li>
</ul>
</li>
<li><p><strong>返回值</strong>：设置的值。</p>
</li>
<li><p><strong>用法</strong>：</p>
<p>向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性，因为 Vue 无法探测普通的新增属性 (比如 <code>this.myObject.newProperty = &#39;hi&#39;</code>)</p>
</li>
</ul>
<blockquote>
<p>vm.$set的具体实现其实在observer中抛出的set方法</p>
</blockquote>
<p><img src="http://img.chensenran.top/1579596746652.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/index.js</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set a property on an object. Adds the new property and</span></span><br><span class="line"><span class="comment"> * triggers change notification if the property doesn't</span></span><br><span class="line"><span class="comment"> * already exist.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span> (<span class="params">target: Array&lt;any&gt; | Object, key: any, val: any</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    (isUndef(target) || isPrimitive(target))</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">`Cannot set reactive property on undefined, null, or primitive value: <span class="subst">$&#123;(target: any)&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对数组的处理</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(target) &amp;&amp; isValidArrayIndex(key)) &#123;</span><br><span class="line">    <span class="comment">// 判断新的下标值是否超出数组长度</span></span><br><span class="line">    target.length = <span class="built_in">Math</span>.max(target.length, key)</span><br><span class="line">    target.splice(key, <span class="number">1</span>, val)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果key存在已被侦测的Object中，则直接修改key对应的值</span></span><br><span class="line">  <span class="keyword">if</span> (key <span class="keyword">in</span> target &amp;&amp; !(key <span class="keyword">in</span> <span class="built_in">Object</span>.prototype)) &#123;</span><br><span class="line">    target[key] = val</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> ob = (target: any).__ob__</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用target._isVue来判断target是否是Vue.js实例</span></span><br><span class="line"><span class="comment">   * 使用ob.vmCount判断是不是跟数据对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (target._isVue || (ob &amp;&amp; ob.vmCount)) &#123;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">      <span class="string">'Avoid adding reactive properties to a Vue instance or its root $data '</span> +</span><br><span class="line">      <span class="string">'at runtime - declare it upfront in the data option.'</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!ob) &#123;</span><br><span class="line">    target[key] = val</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将新增属性转化成getter/setter的形式</span></span><br><span class="line">  defineReactive(ob.value, key, val)</span><br><span class="line">  ob.dep.notify()</span><br><span class="line">  <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Vue-delete"><a href="#Vue-delete" class="headerlink" title="Vue.delete"></a>Vue.delete</h1><ul>
<li><p>Vue.delete( target, propertyName/index )</p>
</li>
<li><p>参数**：</p>
<ul>
<li>{Object | Array} target</li>
<li>{string | number} propertyName/index</li>
</ul>
</li>
<li><p><strong>用法</strong>：</p>
<p>删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 Vue 不能检测到属性被删除的限制，但是你应该很少会使用它。</p>
</li>
</ul>
<h2 id="手动更新"><a href="#手动更新" class="headerlink" title="手动更新"></a>手动更新</h2><blockquote>
<p>使用delete，手动更新dep</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>.obj.a</span><br><span class="line"><span class="keyword">this</span>.obj.__ob__.dep.notify() <span class="comment">// 手动向依赖发送变化通知</span></span><br></pre></td></tr></table></figure>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote>
<p>vm.$delete的具体实现其实在observer中抛出的del方法</p>
</blockquote>
<p><img src="http://img.chensenran.top/1579599021815.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Delete a property and trigger change if necessary.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span> (<span class="params">target: Array&lt;any&gt; | Object, key: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    (isUndef(target) || isPrimitive(target))</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">`Cannot delete reactive property on undefined, null, or primitive value: <span class="subst">$&#123;(target: any)&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(target) &amp;&amp; isValidArrayIndex(key)) &#123;</span><br><span class="line">    target.splice(key, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> ob = (target: any).__ob__</span><br><span class="line">  <span class="keyword">if</span> (target._isVue || (ob &amp;&amp; ob.vmCount)) &#123;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">      <span class="string">'Avoid deleting properties on a Vue instance or its root $data '</span> +</span><br><span class="line">      <span class="string">'- just set it to null.'</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断key是不是target自身的属性</span></span><br><span class="line">  <span class="keyword">if</span> (!hasOwn(target, key)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从target中删除key属性，并向依赖发送消息</span></span><br><span class="line">  <span class="keyword">delete</span> target[key]</span><br><span class="line">  <span class="comment">// 判断删除的属性是否是响应式的</span></span><br><span class="line">  <span class="keyword">if</span> (!ob) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  ob.dep.notify()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue2</category>
      </categories>
      <tags>
        <tag>Vue2</tag>
        <tag>Vue2源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2源码-5-虚拟DOM</title>
    <url>/2020/01/22/1298496172/</url>
    <content><![CDATA[<h1 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h1><blockquote>
<p>虚拟DOM是将状态映射成试图的众多解决方案中的一种。</p>
<p>原理：使用状态生成虚拟的节点，然后使用虚拟节点渲染视图</p>
</blockquote>
<h2 id="使用原因"><a href="#使用原因" class="headerlink" title="使用原因"></a>使用原因</h2><blockquote>
<p>如果直接用状态生成真实DOM，会有一定程度的性能浪费。而创建虚拟节点再渲染视图，就可以将虚拟节点缓存，然后使用新创建的虚拟节点和上一次渲染诗缓存的虚拟节点进行对比，根据对比结果只更新需要更新的真实DOM节点。从而避免不必要的DOM操作，节省一定的性能开销。</p>
</blockquote>
<h2 id="中等粒度"><a href="#中等粒度" class="headerlink" title="中等粒度"></a>中等粒度</h2><p>状态侦测不再细化到某个具体节点，而是某个组件，组件内部通过虚拟DOM来渲染视图。以减少依赖数量和watcher数量。</p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="http://img.chensenran.top/1579662555079.png" alt=""></p>
<p><img src="http://img.chensenran.top/1579662600563.png" alt=""></p>
]]></content>
      <categories>
        <category>Vue2</category>
      </categories>
      <tags>
        <tag>Vue2</tag>
        <tag>Vue2源码</tag>
        <tag>虚拟DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2源码-6-VNode</title>
    <url>/2020/01/22/1711503651/</url>
    <content><![CDATA[<h1 id="VNode"><a href="#VNode" class="headerlink" title="VNode"></a>VNode</h1><blockquote>
<p>vnode可以理解为<strong>节点描述对象</strong>，描述了应该怎样去创建真实的DOM节点</p>
</blockquote>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>Vue2对状态侦测策略采用了中等粒度。当状态发生变化时，只通知到组件级别，然后组件内使用虚拟DOM来渲染视图。</p>
<blockquote>
<p>对vnode进行缓存，并将上一次缓存的vnode和当前新创建的vnode进行对比，只更新发生变化的节点。</p>
</blockquote>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="注释节点"><a href="#注释节点" class="headerlink" title="注释节点"></a>注释节点</h3><ul>
<li>text</li>
<li>isComment</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  text: '注释节点',</span><br><span class="line">  isComment: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * src/core/vdom/vnode.js</span></span><br><span class="line"><span class="comment"> * 创建注释节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createEmptyVNode = <span class="function">(<span class="params">text: string = <span class="string">''</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> node = <span class="keyword">new</span> VNode()</span><br><span class="line">  node.text = text</span><br><span class="line">  node.isComment = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文本节点"><a href="#文本节点" class="headerlink" title="文本节点"></a>文本节点</h3><ul>
<li>text</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  text: 'Hello world!'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * src/core/vdom/vnode.js</span></span><br><span class="line"><span class="comment"> * 创建文本节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createTextVNode</span> (<span class="params">val: string | number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> VNode(<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="built_in">String</span>(val))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><blockquote>
<p>优化静态节点和插槽节点</p>
</blockquote>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>克隆节点和被克隆节点之间的唯一区别是isCloned属性，克隆节点为true</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * src/core/vdom/vnode.js</span></span><br><span class="line"><span class="comment"> * 克隆节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cloneVNode</span> (<span class="params">vnode: VNode</span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cloned = <span class="keyword">new</span> VNode(</span><br><span class="line">    vnode.tag,</span><br><span class="line">    vnode.data,</span><br><span class="line">    <span class="comment">// #7975</span></span><br><span class="line">    <span class="comment">// clone children array to avoid mutating original in case of cloning</span></span><br><span class="line">    <span class="comment">// a child.</span></span><br><span class="line">    vnode.children &amp;&amp; vnode.children.slice(),</span><br><span class="line">    vnode.text,</span><br><span class="line">    vnode.elm,</span><br><span class="line">    vnode.context,</span><br><span class="line">    vnode.componentOptions,</span><br><span class="line">    vnode.asyncFactory</span><br><span class="line">  )</span><br><span class="line">  cloned.ns = vnode.ns</span><br><span class="line">  cloned.isStatic = vnode.isStatic</span><br><span class="line">  cloned.key = vnode.key</span><br><span class="line">  cloned.isComment = vnode.isComment</span><br><span class="line">  cloned.fnContext = vnode.fnContext</span><br><span class="line">  cloned.fnOptions = vnode.fnOptions</span><br><span class="line">  cloned.fnScopeId = vnode.fnScopeId</span><br><span class="line">  cloned.asyncMeta = vnode.asyncMeta</span><br><span class="line">  cloned.isCloned = <span class="literal">true</span> <span class="comment">// 唯一区别</span></span><br><span class="line">  <span class="keyword">return</span> cloned</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="元素节点"><a href="#元素节点" class="headerlink" title="元素节点"></a>元素节点</h3><ul>
<li>tag：节点的名称（p、ul、li、div）</li>
<li>data：节点上的数据（style、class）</li>
<li>children：子节点列表</li>
<li>context：当前节点的Vue实例</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  children: [VNode, VNode],</span><br><span class="line">  context: &#123;...&#125;,</span><br><span class="line">  data: &#123;...&#125;,</span><br><span class="line">  tag: "p"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组件节点"><a href="#组件节点" class="headerlink" title="组件节点"></a>组件节点</h3><ul>
<li>componentOptions：选项参数（propsData、tag、children）</li>
<li>componentInstance：组件的实例</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  componentInstance: &#123;...&#125;,</span><br><span class="line">  componentOptions: &#123;...&#125;,</span><br><span class="line">  context: &#123;...&#125;,</span><br><span class="line">  data: &#123;...&#125;,</span><br><span class="line">  tag: 'vue-component-child'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><ul>
<li>functionalContext</li>
<li>functionalOptions</li>
</ul>
]]></content>
      <categories>
        <category>Vue2</category>
      </categories>
      <tags>
        <tag>Vue2</tag>
        <tag>Vue2源码</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-01-基础配置与打包文件解析</title>
    <url>/2019/11/09/1805775917/</url>
    <content><![CDATA[<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>模块打包</p>
<ul>
<li>代码转换</li>
<li>文件优化</li>
<li>代码分割</li>
<li>模块合并</li>
<li>自动刷新</li>
<li>代码校验</li>
<li>自动发布</li>
</ul>
<h2 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h2><ul>
<li>安装本地的webpack</li>
<li>webpack webpack-cli -D</li>
</ul>
<h2 id="webpack可以进行0配置"><a href="#webpack可以进行0配置" class="headerlink" title="webpack可以进行0配置"></a>webpack可以进行0配置</h2><ul>
<li>打包工具 -&gt; 输出后的结果（js模块）</li>
<li>打包（支持js的模块化）</li>
</ul>
<h2 id="手动配置webpack"><a href="#手动配置webpack" class="headerlink" title="手动配置webpack"></a>手动配置webpack</h2><ul>
<li><p>默认配置文件的名字 webpack.config.js 或 webpackfile.js</p>
<p>（node_modules-&gt;webpack-cli-&gt;bin-&gt;config-yargs.js 配置）</p>
</li>
<li><p>模式：produce development</p>
</li>
<li><p>entry：入口</p>
</li>
<li><p>output：打包后的文件配置</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;  </span><br><span class="line">    mode: <span class="string">'production'</span>,<span class="comment">//模式 默认两种 production development  </span></span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>, <span class="comment">//入口 </span></span><br><span class="line">    output: &#123;   </span><br><span class="line">        filename: <span class="string">'bundle.js'</span>, <span class="comment">//打包后的文件名  </span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>), <span class="comment">// 路径必须是决定路径 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打包后的文件分析"><a href="#打包后的文件分析" class="headerlink" title="打包后的文件分析"></a>打包后的文件分析</h2><ul>
<li>实现单例缓存（key，value），require方法</li>
<li>个文件模块</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123; </span><br><span class="line">    <span class="comment">// webpackBootstrap  </span></span><br><span class="line">    <span class="comment">// 定义一个缓存 </span></span><br><span class="line">    <span class="comment">// 以形式key ： &#123;&#125; 存储 </span></span><br><span class="line">    <span class="keyword">var</span> installedModules = &#123;&#125;; </span><br><span class="line">    <span class="comment">// 现了require </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;    </span><br><span class="line">        <span class="comment">// Check if module is in cache   </span></span><br><span class="line">        <span class="keyword">if</span> (installedModules[moduleId]) &#123; <span class="comment">// 检查是否在缓存中  </span></span><br><span class="line">            <span class="keyword">return</span> installedModules[moduleId].exports;  </span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="comment">// Create a new module (and put it into the cache)   </span></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;   </span><br><span class="line">            i: moduleId, </span><br><span class="line">            l: <span class="literal">false</span>,     </span><br><span class="line">            exports: &#123;&#125; </span><br><span class="line">        &#125;; </span><br><span class="line">        <span class="comment">// Execute the module function </span></span><br><span class="line">        modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);   </span><br><span class="line">        <span class="comment">// Flag the module as loaded  </span></span><br><span class="line">        <span class="built_in">module</span>.l = <span class="literal">true</span>;    </span><br><span class="line">        <span class="comment">// Return the exports of the module   </span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// Load entry module and return exports </span></span><br><span class="line">    <span class="keyword">return</span> __webpack_require__(__webpack_require__.s = <span class="string">"./src/index.js"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">(&#123; </span><br><span class="line">    <span class="string">"./src/a.js"</span>:  </span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">eval</span>(<span class="string">"module.exports = \"a\";"</span>); </span><br><span class="line">    &#125;), </span><br><span class="line">    <span class="string">"./src/index.js"</span>:  </span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">module, exports, __webpack_require__</span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">eval</span>(<span class="string">"let str = __webpack_require__("</span>./src/a.js<span class="string">")console.log(str);"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="配置命令行"><a href="#配置命令行" class="headerlink" title="配置命令行"></a>配置命令行</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;  </span><br><span class="line">	<span class="string">"build"</span>: <span class="string">"webpack --config webpack.config.my.js"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>*<em>注意：命令行运行时 –config webpack.config.my.js不会被认为是一个参数，那么可以写成如下： *</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// error npm run build --config webpack.config.base.js</span></span><br><span class="line">npm run build -- --config webpack.config.base.js</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-02-html插件及webpack-dev-server</title>
    <url>/2019/11/17/1781771991/</url>
    <content><![CDATA[<h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>开发环境配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123; <span class="comment">// 开发服务器的配置 </span></span><br><span class="line">    port: <span class="number">3000</span>, <span class="comment">// 端口号</span></span><br><span class="line">    progress: <span class="literal">true</span>, <span class="comment">// 显示进度条  </span></span><br><span class="line">    contentBase: (<span class="string">'./dist'</span>), <span class="comment">// 设置启动目录</span></span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">// 打开浏览器</span></span><br><span class="line">    compress : <span class="literal">true</span>, <span class="comment">// 资源采用gzip压缩</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h2 id="webpack配置插件"><a href="#webpack配置插件" class="headerlink" title="webpack配置插件"></a>webpack配置插件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins:[]</span><br></pre></td></tr></table></figure>



<h2 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h2><p>打包html文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;  </span><br><span class="line">    template: <span class="string">'./src/index.html'</span>, </span><br><span class="line">    filename: <span class="string">'index.html'</span>, </span><br><span class="line">    minify: &#123; </span><br><span class="line">        removeAttributeQuotes: <span class="literal">true</span>, <span class="comment">// 删除双引号   </span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 压缩空行 </span></span><br><span class="line">    &#125;, </span><br><span class="line">    hash: <span class="literal">true</span>, <span class="comment">// 给生成的js文件，添加hash戳(比如：bundle.ab24e2bd.js?ab24e2bd1cf2c8ab6a33)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-03-样式处理</title>
    <url>/2019/11/17/137571459/</url>
    <content><![CDATA[<h2 id="loader："><a href="#loader：" class="headerlink" title="loader："></a>loader：</h2><p>特点：</p>
<ul>
<li>单一功能</li>
<li>可以写成字符串、数组、对象</li>
<li>默认执行顺序：从下往上，从右往左 （ pre -&gt; normal -&gt; inline -&gt; post）</li>
</ul>
<h2 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h2><h3 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h3><blockquote>
<p>处理@import这样的css语法</p>
</blockquote>
<h3 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h3><blockquote>
<p>将css插入到head中</p>
</blockquote>
<p><strong>处理顺序 css -&gt; style</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;<span class="comment">//模块</span></span><br><span class="line">  rules: [ <span class="comment">// 配置规则 </span></span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'style-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            insert: <span class="string">'top'</span>, <span class="comment">// 插入的style位于html head中定义的style上方    </span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'css-loader'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽离样式"><a href="#抽离样式" class="headerlink" title="抽离样式"></a>抽离样式</h2><h3 id="mini-css-extract-plugin"><a href="#mini-css-extract-plugin" class="headerlink" title="mini-css-extract-plugin"></a>mini-css-extract-plugin</h3><blockquote>
<p>打包css为单独文件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> MiniCssExtractPlugin(&#123; </span><br><span class="line">    filename: <span class="string">'main.[hash:8].css'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 并修改loader，把style-loader改成MiniCssExtractPlugin.loader</span></span><br></pre></td></tr></table></figure>

<h2 id="自动添加浏览器前缀"><a href="#自动添加浏览器前缀" class="headerlink" title="自动添加浏览器前缀"></a>自动添加浏览器前缀</h2><h3 id="postcss-loader-和-autoprefixer"><a href="#postcss-loader-和-autoprefixer" class="headerlink" title="postcss-loader 和 autoprefixer"></a>postcss-loader 和 autoprefixer</h3><p>调用’postcss-loader’，并配置postcss.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123; </span><br><span class="line">    plugins: [<span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="css文件压缩"><a href="#css文件压缩" class="headerlink" title="css文件压缩"></a>css文件压缩</h2><h3 id="optimize-css-assets-webpack-plugin-和-uglifyjs-webpack-plugin"><a href="#optimize-css-assets-webpack-plugin-和-uglifyjs-webpack-plugin" class="headerlink" title="optimize-css-assets-webpack-plugin 和 uglifyjs-webpack-plugin"></a>optimize-css-assets-webpack-plugin 和 uglifyjs-webpack-plugin</h3><blockquote>
<p>打包后css文件压缩。<strong>注意生成环境才有作用</strong></p>
</blockquote>
<p><strong>使用optimize-css-assets-webpack-plugin压缩css后，js不会被压缩，必须使用uglifyjs-webpack-plugin 实现js压缩。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">optimization: &#123;<span class="comment">// 优化项  </span></span><br><span class="line">    minimizer: [    </span><br><span class="line">        <span class="keyword">new</span> UglifyJsPlugin(&#123;   </span><br><span class="line">            cache: <span class="literal">true</span>, <span class="comment">// 使用缓存  </span></span><br><span class="line">            parallel: <span class="literal">true</span>, <span class="comment">// 并发打包</span></span><br><span class="line">            sourceMap: <span class="literal">true</span>, <span class="comment">// 映射文件  </span></span><br><span class="line">        &#125;),    </span><br><span class="line">        <span class="keyword">new</span> OptimizeCSSPlugin(&#123;&#125;) </span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-04-ES6高级语法转化</title>
    <url>/2019/11/17/1359659862/</url>
    <content><![CDATA[<h2 id="转化ES6语法使用babel-loader"><a href="#转化ES6语法使用babel-loader" class="headerlink" title="转化ES6语法使用babel-loader"></a>转化ES6语法使用babel-loader</h2><ol>
<li><p>@babel/core</p>
<blockquote>
<p>babel的核心模块</p>
</blockquote>
</li>
<li><p>@babel/preset-env</p>
<blockquote>
<p>转义为指定版本的es语法</p>
</blockquote>
</li>
<li><p>babel-loader</p>
</li>
</ol>
<p><em>注意报错，根据需求引入babel的插件</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  use: &#123;</span><br><span class="line">    loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">    options: &#123; <span class="comment">// 使用babel-loader将es6转为es5   </span></span><br><span class="line">      presets: [</span><br><span class="line">        <span class="string">'@babel/preset-env'</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="高级语法和API兼容"><a href="#高级语法和API兼容" class="headerlink" title="高级语法和API兼容"></a>高级语法和API兼容</h2><ol>
<li><p>@babel/plugin-transform-runtime 和 @babel/runtime</p>
<blockquote>
<p>可实现高级语法处理，如 Generator 语法</p>
</blockquote>
</li>
<li><p>@babel/polyfill</p>
<blockquote>
<p>可处理高级api，如includes</p>
</blockquote>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="1-基础loader"><a href="#1-基础loader" class="headerlink" title="1. 基础loader"></a>1. 基础loader</h3><ol>
<li><p>babel-loader</p>
</li>
<li><p>@babel/core  转化的核心模块</p>
</li>
<li><p>@babel/preset-env 这是个大包，转化js语法的</p>
</li>
</ol>
<h3 id="2-类似generator、promise语法转化"><a href="#2-类似generator、promise语法转化" class="headerlink" title="2.类似generator、promise语法转化"></a>2.类似generator、promise语法转化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i @babel/plugin-transform-runtime -D</span><br><span class="line"></span><br><span class="line">npm i @babel/runtime --save</span><br></pre></td></tr></table></figure>

<h3 id="3-es7部分语法支持"><a href="#3-es7部分语法支持" class="headerlink" title="3.es7部分语法支持"></a>3.es7部分语法支持</h3><ol>
<li><p>@babel/plugin-proposal-decorators  这是es7中对class的装饰器的转化（先）</p>
</li>
<li><p>@babel/plugin-proposal-class-properties  这是es7中对class新增语法的转化 (后)</p>
</li>
</ol>
<h3 id="4-类似includes语法支持"><a href="#4-类似includes语法支持" class="headerlink" title="4.类似includes语法支持"></a>4.类似includes语法支持</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i @babel/polyfill</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>balbel</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-05-全局变量处理</title>
    <url>/2019/11/17/2938557385/</url>
    <content><![CDATA[<h2 id="全局变量处理"><a href="#全局变量处理" class="headerlink" title="全局变量处理"></a>全局变量处理</h2><p>以jQuery为例。</p>
<h3 id="expose-loader-能暴露给window"><a href="#expose-loader-能暴露给window" class="headerlink" title="expose-loader (能暴露给window)"></a>expose-loader (能暴露给window)</h3><h4 id="使用内敛loader"><a href="#使用内敛loader" class="headerlink" title="使用内敛loader"></a>使用内敛loader</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'expose-loader?$!jquery'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.$)</span><br></pre></td></tr></table></figure>

<h4 id="使用普通loader"><a href="#使用普通loader" class="headerlink" title="使用普通loader"></a>使用普通loader</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    test: <span class="built_in">require</span>.resolve(<span class="string">'jquery'</span>), </span><br><span class="line">    use: <span class="string">'expose-loader?$'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块注入（ProvidePlugin，不能暴露给window）"><a href="#模块注入（ProvidePlugin，不能暴露给window）" class="headerlink" title="模块注入（ProvidePlugin，不能暴露给window）"></a>模块注入（ProvidePlugin，不能暴露给window）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;  </span><br><span class="line">    $: <span class="string">'jquery'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="忽略外部引用模块（-能暴露给window-）"><a href="#忽略外部引用模块（-能暴露给window-）" class="headerlink" title="忽略外部引用模块（ 能暴露给window ）"></a>忽略外部引用模块（ 能暴露给window ）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">externals: &#123; </span><br><span class="line">    <span class="string">'jquery'</span>: <span class="string">'$'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-06-图片处理</title>
    <url>/2019/11/17/3697560692/</url>
    <content><![CDATA[<h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h3><p>处理js中使用的文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    test: <span class="regexp">/\.(jpg|png)$/</span>,  </span><br><span class="line">    use: <span class="string">'file-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="html-withimg-loader"><a href="#html-withimg-loader" class="headerlink" title="html-withimg-loader"></a>html-withimg-loader</h3><p>在html中直接只用img</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    test: <span class="regexp">/\.html$/</span>, </span><br><span class="line">    use: <span class="string">'html-withimg-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><p>可以把较小的图片直接转为base64（依赖于file-loader)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    test: <span class="regexp">/\.(jpg|png)$/</span>, </span><br><span class="line">    use: &#123; </span><br><span class="line">        loader: <span class="string">'url-loader'</span>,  </span><br><span class="line">        options: &#123;   </span><br><span class="line">            limit: <span class="number">200</span> * <span class="number">1024</span>, <span class="comment">// 小于此大小会直接转为base64，插入到HTML文件中</span></span><br><span class="line">            outputPath : <span class="string">'/img/'</span></span><br><span class="line">            publicPtah: <span class="string">'http://img.chensenran.top'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-07-打包文件分类</title>
    <url>/2019/11/17/1234541781/</url>
    <content><![CDATA[<h2 id="归类"><a href="#归类" class="headerlink" title="归类"></a>归类</h2><blockquote>
<p>给图片归类到img目录下<br>在url-loader下配置outputPath，大于limit的图片就会生成到dist下的img文件夹下，同时所有路径都会加上这个/img/</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rules:[</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        limit: <span class="number">2</span>,<span class="comment">//200k，小于200k使用base64来转换</span></span><br><span class="line">        outputPath: <span class="string">'/img/'</span><span class="comment">//大于上面的limit的图片就会生成到dist下的img文件夹下，同时所有路径都会加上这个img/</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>给css归类到css目录下</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins:[</span><br><span class="line">  <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'/css/[name].[chunkhash:8].css'</span>,<span class="comment">//抽离出来的css的文件名称，并在dist下生成css文件夹，将该文件放到该css目录下，引入的时候会自动加上/css/</span></span><br><span class="line">  &#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h2 id="加域名前缀"><a href="#加域名前缀" class="headerlink" title="加域名前缀"></a>加域名前缀</h2><ol>
<li><p>对所有输出资源加域名前缀<br>在output配置下家属性publicPath</p>
</li>
<li><p>在引用的资源前，统一加上这个额publicPath，比如打包后的css路径是/css/main.css，那么引用的时候就会成为publicPath值+’/css/main.css’</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  filename: <span class="string">'bundle.[hash:8].js'</span>,</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">  publicPath: <span class="string">'http://www.chensenran.top'</span>,<span class="comment">//在引用的资源前，统一加上这个额publicPath，比如打包后的css路径是css/main.css，那么引用的时候就会成为publicPath值+'css/main.css'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果有些资源使用了CDN分发，有些没有使用，那么只需要对使用了的资源统一加上域名就可以了<br>比如图片使用CDN分发，那么在图片的loader加上publicPath配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        limit: <span class="number">2</span>,<span class="comment">//200k，小于200k使用base64来转换</span></span><br><span class="line">        outputPath: <span class="string">'/img/'</span>,<span class="comment">//大于上面的limit的图片就会生成到dist下的img文件夹下，同时所有路径都会加上这个/img/</span></span><br><span class="line">        publicPath: <span class="string">'http://www.chensenran.top'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-08-多页面应用打包</title>
    <url>/2019/11/17/601532459/</url>
    <content><![CDATA[<h2 id="多页应用打包"><a href="#多页应用打包" class="headerlink" title="多页应用打包"></a>多页应用打包</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>, </span><br><span class="line">    entry: &#123;  </span><br><span class="line">        home: <span class="string">'./src/index.js'</span>, </span><br><span class="line">        other: <span class="string">'./src/other.js'</span> </span><br><span class="line">    &#125;,  </span><br><span class="line">    output: &#123;   </span><br><span class="line">        filename: <span class="string">'[name].js'</span>,  </span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>), </span><br><span class="line">    &#125;, </span><br><span class="line">    plugins: [    </span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;    </span><br><span class="line">            filename: <span class="string">'home.html'</span>,  </span><br><span class="line">            src: path.resolve(__dirname, <span class="string">'index.html'</span>), </span><br><span class="line">            chunks: [<span class="string">'home'</span>]</span><br><span class="line">        &#125;),   </span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;  </span><br><span class="line">            filename: <span class="string">'other.html'</span>,   </span><br><span class="line">            src: path.resolve(__dirname, <span class="string">'index.html'</span>), </span><br><span class="line">            chunks: [<span class="string">'other'</span>]  </span><br><span class="line">        &#125;) </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-09-source-map配置</title>
    <url>/2019/11/17/2431670147/</url>
    <content><![CDATA[<h2 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h2><blockquote>
<p>该配置是用于映射源码的，用于调试功能</p>
</blockquote>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li><p>源码映射,会单独生成一个sourcemap文件(.map格式),出错了,会标识出错的当前列和行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool:<span class="string">'source-map'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不会产生单独的sourcemap文件(.map格式) ，但是可以显示行和列</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">       devtool:<span class="string">'eval-source-map'</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>会单独生成一个sourcemap文件(.map格式) ,但不会产生单独的列,只能定位到行 但是是一个单独的映射文件,用得不多</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool:<span class="string">'cheap-module-source-map'</span>,<span class="comment">//产生后你可以保留起来，用于调试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>不会产生单独的sourcemap文件(.map格式)，继承在打包后的文件中，不会产生列,只能定位到行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">   devtool:<span class="string">'cheap-module-eval-source-map'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-10-实时打包文件</title>
    <url>/2019/11/17/769749626/</url>
    <content><![CDATA[<h2 id="实时打包文件"><a href="#实时打包文件" class="headerlink" title="实时打包文件"></a>实时打包文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch: <span class="literal">true</span>,</span><br><span class="line">watchOptions: &#123;</span><br><span class="line">  poll: <span class="number">1000</span>, <span class="comment">// 每秒监听次数</span></span><br><span class="line">  aggregateTimeout: <span class="number">500</span>, <span class="comment">// 防抖，打包延时</span></span><br><span class="line">  ignored: <span class="regexp">/node_modules/</span> <span class="comment">// 不监听文件</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="clean-webpack-plugin清空打包目录文件"><a href="#clean-webpack-plugin清空打包目录文件" class="headerlink" title="clean-webpack-plugin清空打包目录文件"></a>clean-webpack-plugin清空打包目录文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>], &#123;</span><br><span class="line">    root: __dirname,</span><br><span class="line">    verbose: <span class="literal">true</span>,<span class="comment">//是否在console中打印日志，true为是</span></span><br><span class="line">    dry: <span class="literal">false</span>,<span class="comment">//false为默认值，代表删除，true代表模拟删除，其实是不删除</span></span><br><span class="line">    watch: <span class="literal">true</span>,<span class="comment">//默认为false，代表在此编译的时候不删除，true为删除，开启watch的时候，最好为true</span></span><br><span class="line">    exclude: [<span class="string">'index.html'</span>],<span class="comment">//表示忽略的文件</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-11-小插件</title>
    <url>/2019/11/17/1792782665/</url>
    <content><![CDATA[<h2 id="webpack小插件"><a href="#webpack小插件" class="headerlink" title="webpack小插件"></a>webpack小插件</h2><ol>
<li><p>clean-webpack-plugin 可清除原打包文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackConfig = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = webpackConfig;</span><br></pre></td></tr></table></figure>
</li>
<li><p>copy-webpack-plugin 可拷贝文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> CopyWebpackPlugin([ </span><br><span class="line">    &#123;<span class="attr">from</span>: <span class="string">'src'</span>, <span class="attr">to</span>: <span class="string">'./'</span>&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
</li>
<li><p>BannerPlugin 在打包的文件开始处添加信息（webpack内置）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'make by csr hhh'</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-12-跨域处理</title>
    <url>/2019/11/17/2226730837/</url>
    <content><![CDATA[<h2 id="webpack处理跨域"><a href="#webpack处理跨域" class="headerlink" title="webpack处理跨域"></a>webpack处理跨域</h2><ol>
<li><p>代理，重定向</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        <span class="string">'/api'</span>: &#123; <span class="comment">// 捕获路径</span></span><br><span class="line">            target: <span class="string">'http://localhost:3000'</span>, <span class="comment">// 重定向</span></span><br><span class="line">            pathRewrite: &#123;      </span><br><span class="line">                api: <span class="string">''</span> <span class="comment">// 重写path</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>前端mock数据模拟</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123; </span><br><span class="line">    before(app) &#123;  </span><br><span class="line">        app.get(<span class="string">'/api/user'</span>, (req, res) =&gt; &#123;   </span><br><span class="line">            res.end(<span class="string">'hello'</span>)  </span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务端运行</p>
<h4 id="webpack-dev-middleware"><a href="#webpack-dev-middleware" class="headerlink" title="webpack-dev-middleware"></a>webpack-dev-middleware</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> WebpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(config)</span><br><span class="line"></span><br><span class="line">app.use(WebpackDevMiddleware(compiler))</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-13-resolve配置</title>
    <url>/2019/11/17/238912262/</url>
    <content><![CDATA[<h2 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h2><ul>
<li><p>modules</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">modules: [path.resolve(__dirname, <span class="string">'node_modules'</span>)], <span class="comment">// 只在 node_modules 文件夹中寻找</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>alias</p>
<p>配置别名 vue -&gt; vue.runtime</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alias: &#123; </span><br><span class="line">    bootstrap: <span class="string">'bootstrap/dist/css/bootstrap.css'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mainFields</p>
<p>配置主要字段</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mainFields: [<span class="string">'style'</span>, <span class="string">'main'</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>mainFiles</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mainFiles: [], <span class="comment">// 入口文件的名字</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>extensions</p>
<p>查找文件后缀</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">extensions: [<span class="string">'.css'</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>]</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-14-定义环境变量</title>
    <url>/2019/11/17/2969611587/</url>
    <content><![CDATA[<h2 id="定义环境变量"><a href="#定义环境变量" class="headerlink" title="定义环境变量"></a>定义环境变量</h2><blockquote>
<p> 当我们在配置的时候，需要区分所配置的属性参数是属于生产环境还是开发环境。每个环境对应的配置都不同。这就是环境变量最重要的意义。 </p>
<p>使用webpack内置插件DefinePlugin</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;  </span><br><span class="line">    DEV: <span class="built_in">JSON</span>.stringify(<span class="string">'dev'</span>),</span><br><span class="line"> 		DEV:<span class="string">'"dev"'</span></span><br><span class="line">		EXPRESSION:<span class="string">'1+1'</span>, <span class="comment">// 这样解析出来就是2，而不是'1+1'，</span></span><br><span class="line">		FLAG：<span class="string">'true'</span>, <span class="comment">// 解析出来就是true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-15-区分不同环境</title>
    <url>/2019/11/17/2849467898/</url>
    <content><![CDATA[<h2 id="区分不同环境变量"><a href="#区分不同环境变量" class="headerlink" title="区分不同环境变量"></a>区分不同环境变量</h2><h4 id="webpack-merge"><a href="#webpack-merge" class="headerlink" title="webpack-merge"></a>webpack-merge</h4><blockquote>
<p> 这个插件内部有个smart函数，其作用：合并两个配置文件 </p>
</blockquote>
<p>可使用三个文件</p>
<ul>
<li>webpack.base.js 基础公共配置</li>
<li>webpack.dev.js 开发环境配置</li>
<li>webpack.prod.js 生产环境配置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;smart&#125; = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">'./webpack.base'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = smart(base, &#123;  </span><br><span class="line">    mode: <span class="string">'production'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-16-优化</title>
    <url>/2019/11/17/1579032732/</url>
    <content><![CDATA[<h2 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h2><blockquote>
<p> 这是module中的一个属性，作用：<br>不去解析属性值代表的库的依赖 , 以增加打包速率 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    noParse: <span class="regexp">/jquery/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="exclude和include"><a href="#exclude和include" class="headerlink" title="exclude和include"></a>exclude和include</h2><blockquote>
<p>loader解析时指定和排除查找目录</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">exclude:<span class="regexp">/node_modules/</span>,<span class="comment">//解析不包含的目录,两者写其一即可</span></span><br><span class="line">include:path.resolve(<span class="string">'src'</span>),<span class="comment">//即系包含的目录,两者写其一即可</span></span><br></pre></td></tr></table></figure>

<h2 id="IgnorePlugin"><a href="#IgnorePlugin" class="headerlink" title="IgnorePlugin"></a>IgnorePlugin</h2><blockquote>
<p>  忽略第三方包指定目录，让这些指定目录不要被打包进去 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以moment为例</span></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/\.\/locale/</span>,/moment/)</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'moment/locale/zh-cn'</span>; <span class="comment">// 因打包时忽略引入，可手动引入语言包。否则设置无效</span></span><br><span class="line"></span><br><span class="line">moment.locale(<span class="string">'zh-cn'</span>);</span><br></pre></td></tr></table></figure>



<h2 id="dllplugin"><a href="#dllplugin" class="headerlink" title="dllplugin"></a>dllplugin</h2><blockquote>
<p>将不变的包单独打包，后续就不再进行打包</p>
</blockquote>
<h2 id="happypack"><a href="#happypack" class="headerlink" title="happypack"></a>happypack</h2><blockquote>
<p>多线程打包</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.js$/</span>,</span><br><span class="line">                use:<span class="string">'HappyPack/loader?id=js'</span><span class="comment">//这个id=js就代表这是打包js的</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                use:<span class="string">'HappyPack/loader?id=css'</span><span class="comment">//这个id=css就代表这是打包css的</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> HappyPack(&#123;这个id:js就代表这是打包js的</span><br><span class="line">            id:<span class="string">'css'</span>,<span class="comment">//</span></span><br><span class="line">            use:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HappyPack(&#123;这个id:js就代表这是打包js的</span><br><span class="line">            id:<span class="string">'js'</span>,<span class="comment">//</span></span><br><span class="line">            use:[&#123;<span class="comment">//use是一个数组，这里写原先在rules的use里的loader配置</span></span><br><span class="line">                loader:<span class="string">'babel-loader'</span>,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    presets:[</span><br><span class="line">                        <span class="string">'@babel/presets-env'</span>,</span><br><span class="line">                        <span class="string">'@babel/presets-react'</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="webpack在生产环境自带优化项"><a href="#webpack在生产环境自带优化项" class="headerlink" title="webpack在生产环境自带优化项"></a>webpack在生产环境自带优化项</h2><h3 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree-shaking"></a>tree-shaking</h3><blockquote>
<p> 使用import语法，在生产化境下 会自动删除没用的代码。（require无效）</p>
</blockquote>
<h3 id="scope-hosting"><a href="#scope-hosting" class="headerlink" title="scope hosting"></a>scope hosting</h3><blockquote>
<p> 作用域提升</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> d = a + b + c;</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// console.log(6);</span></span><br></pre></td></tr></table></figure>

<h2 id="抽离公共模块-多页面应用"><a href="#抽离公共模块-多页面应用" class="headerlink" title="抽离公共模块(多页面应用)"></a>抽离公共模块(多页面应用)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">optimization: &#123;  </span><br><span class="line">    splitChunks: &#123; <span class="comment">// 分割代码  </span></span><br><span class="line">        cacheGroups: &#123; <span class="comment">// 缓存组  </span></span><br><span class="line">            comment: &#123; <span class="comment">// 公共代码      </span></span><br><span class="line">                chunks: <span class="string">'initial'</span>,</span><br><span class="line">                minSize: <span class="number">0</span>,        </span><br><span class="line">                minChunks: <span class="number">2</span>, <span class="comment">// 最小引用次数    </span></span><br><span class="line">            &#125;,    </span><br><span class="line">            vendor: &#123; <span class="comment">// 第三方模块      </span></span><br><span class="line">                priority: <span class="number">1</span>, <span class="comment">// 权重，先运行   </span></span><br><span class="line">                test: <span class="regexp">/node_modules/</span>, <span class="comment">// 使用node_modules文件夹中的包时 单独打包  </span></span><br><span class="line">                chunks: <span class="string">'initial'</span>,    </span><br><span class="line">                minSize: <span class="number">0</span>,    </span><br><span class="line">                minChunks: <span class="number">2</span>, </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="懒加载（动态加载）"><a href="#懒加载（动态加载）" class="headerlink" title="懒加载（动态加载）"></a>懒加载（动态加载）</h2><blockquote>
<p>使用<em>import()</em>，可以实现懒加载</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">'./a'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><ol>
<li>在devServer中开启hot配置为true</li>
<li>添加两个webpack的内置插件，分别为new webpack.NamedModulesPlugin()和new webpack.HotModuleReplacementPlugin(),前者用于打印更新的模块路径，告诉我们哪个模块热更新了；后者是热更新插件。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer:&#123;</span><br><span class="line">    port:<span class="number">3001</span>,</span><br><span class="line">    open:<span class="literal">true</span>,</span><br><span class="line">    contentBase:<span class="string">'./dist'</span>,</span><br><span class="line">    hot:<span class="literal">true</span>,<span class="comment">//启用热更新</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">  plugins:[</span><br><span class="line">  	<span class="keyword">new</span> webpack.NamedModulesPlugin(),<span class="comment">//打印更新的模块路径，告诉我们哪个模块热更新了</span></span><br><span class="line">  	<span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),<span class="comment">//热更新插件</span></span><br><span class="line">  	<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    	template:<span class="string">'./src/index.html'</span>,</span><br><span class="line">    	filename:<span class="string">'index.html'</span></span><br><span class="line">  	&#125;)</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-关于loader</title>
    <url>/2019/11/16/3209949814/</url>
    <content><![CDATA[<h2 id="loader寻找路径"><a href="#loader寻找路径" class="headerlink" title="loader寻找路径"></a>loader寻找路径</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolveLoader: &#123; <span class="comment">// 配置解析文件</span></span><br><span class="line">  modules: [<span class="string">'node_modules'</span>,<span class="string">'。/src/loaders'</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="loader的执行顺序："><a href="#loader的执行顺序：" class="headerlink" title="loader的执行顺序："></a>loader的执行顺序：</h2><blockquote>
<p><strong>pre -&gt; normal -&gt; inline -&gt; post</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">enforce: <span class="string">'pre'</span>  <span class="comment">// 改变loader的顺序 pre，post，normal</span></span><br></pre></td></tr></table></figure>

<h3 id="inline-loader"><a href="#inline-loader" class="headerlink" title="inline-loader"></a>inline-loader</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">'inline-loader!./a.js'</span>)</span><br><span class="line"><span class="comment">// -！不会让文件再进行pre+normal的loader处理了</span></span><br><span class="line"><span class="comment">// ! 不要normal</span></span><br><span class="line"><span class="comment">// ！！ 除了inline，其他什么都不要</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">'-!inline-loader!./a.js'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="loader分类："><a href="#loader分类：" class="headerlink" title="loader分类："></a>loader分类：</h2><ul>
<li>pitchLoader</li>
<li>normalLoader</li>
</ul>
<p><img src="http://img.chensenran.top/1573878274068.png" alt=""></p>
<p><img src="http://img.chensenran.top/1573878356709.png" alt=""></p>
<h2 id="手动实现loader"><a href="#手动实现loader" class="headerlink" title="手动实现loader"></a>手动实现loader</h2><h3 id="loader-utils"><a href="#loader-utils" class="headerlink" title="loader-utils"></a>loader-utils</h3><p>使用loader-utils包可以获取config中的相关配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> options = loaderUtils.getOptions(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>



<h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h2><ul>
<li><p><a href="http://img.chensenran.top/babel-loader-1573984511959.zip" target="_blank" rel="noopener">babel-loader</a></p>
</li>
<li><p><a href="http://img.chensenran.top/banner-loader-1573984622740.zip" target="_blank" rel="noopener">banner-loader</a></p>
</li>
<li><p><a href="http://img.chensenran.top/less-loader-1573984713912.zip" target="_blank" rel="noopener">less-loader</a></p>
</li>
<li><p><a href="http://img.chensenran.top/css-loader-1573984923662.zip" target="_blank" rel="noopener">css-loader</a></p>
</li>
<li><p><a href="http://img.chensenran.top/style-loader-1573985011474.zip" target="_blank" rel="noopener">style-loader</a></p>
</li>
<li><p><a href="http://img.chensenran.top/url-loader-1573985064193.zip" target="_blank" rel="noopener">url-loader</a></p>
</li>
<li><p><a href="http://img.chensenran.top/file-loader-1573985124943.zip" target="_blank" rel="noopener">file-loader</a></p>
</li>
</ul>
<h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> babel = <span class="built_in">require</span>(<span class="string">"@babel/core"</span>);</span><br><span class="line"><span class="comment">//loaderUtils 拿到预设  便于后期转化代码</span></span><br><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">"loader-utils"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>) </span>&#123; <span class="comment">// this loaderContext</span></span><br><span class="line">  <span class="comment">//Object.keys方法  属性转成一个数组</span></span><br><span class="line">  <span class="keyword">let</span> options = loaderUtils.getOptions(<span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">// console.log(this.resourcePath)  运行时返回一个绝对路径</span></span><br><span class="line">  <span class="comment">//console.log(options);</span></span><br><span class="line">  <span class="comment">// options 打印为&#123; presets: [ '@babel/preset-env' ] &#125;</span></span><br><span class="line">  <span class="keyword">let</span> cb = <span class="keyword">this</span>.async() <span class="comment">// loader上下文 默认有async这个方法 异步执行 在哪执行调用cb就可以</span></span><br><span class="line">  <span class="comment">//babel的transform有三个参数  第一个 转换哪些代码  第二个 转换选项  第三个 异步回调函数</span></span><br><span class="line">  babel.transform(source,&#123;</span><br><span class="line">    ...options, <span class="comment">//对象展开</span></span><br><span class="line">    sourceMap: <span class="literal">true</span>, <span class="comment">//调试工具 需要webpack.config.js 也要配置 source-map</span></span><br><span class="line">    filename:  <span class="keyword">this</span>.resourcePath.split(<span class="string">'/'</span>).pop()<span class="comment">//文件名  不然运行时 webpack下边是unkown</span></span><br><span class="line"></span><br><span class="line">  &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//异步回调  return source就不起作用了</span></span><br><span class="line">    cb(err,result.code,result.map)  <span class="comment">// 异步 cb(123) 会错误 必须严格按照参数来 </span></span><br><span class="line">    <span class="comment">// 第一个 错误  第二个  代码  第三个 sourceMap</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// return source; 不起作用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = loader;</span><br></pre></td></tr></table></figure>

<h3 id="banner-loader"><a href="#banner-loader" class="headerlink" title="banner-loader"></a>banner-loader</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>)</span><br><span class="line"><span class="comment">//骨架校验</span></span><br><span class="line"><span class="keyword">let</span> validateOptions = <span class="built_in">require</span>(<span class="string">'schema-utils'</span>)</span><br><span class="line"><span class="comment">//读取文件模块</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cacheable &amp;&amp; <span class="keyword">this</span>.cacheable() <span class="comment">//一般这样用 </span></span><br><span class="line">  <span class="comment">//this.cacheable(false) //缓存  自动缓存</span></span><br><span class="line">  <span class="keyword">let</span> options = loaderUtils.getOptions(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">let</span> cb = <span class="keyword">this</span>.async() <span class="comment">//异步必备</span></span><br><span class="line">  <span class="keyword">let</span> schema = &#123;</span><br><span class="line">    type: <span class="string">'object'</span>,</span><br><span class="line">    properties: &#123;</span><br><span class="line">      text: &#123;</span><br><span class="line">        type: <span class="string">'string'</span>,</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      filename: &#123;</span><br><span class="line">        type: <span class="string">'string'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//将骨架和参数对比   'banner-loader'出问题（如果报错）</span></span><br><span class="line">  validateOptions(schema,options,<span class="string">'banner-loader'</span>)</span><br><span class="line">  <span class="keyword">if</span>(options.filename)&#123;</span><br><span class="line">    <span class="keyword">this</span>.addDependency(options.filename) <span class="comment">//自动地 添加文件依赖   加入这一句话 开启实时监控 webpack也会监控这个文件 这个文件更新也会实时更新</span></span><br><span class="line">    fs.readFile(options.filename,<span class="string">'utf-8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">      cb(err,<span class="string">`/**<span class="subst">$&#123;data&#125;</span>**/<span class="subst">$&#123;source&#125;</span>`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//同步也得 cb调用了</span></span><br><span class="line">    cb(<span class="literal">null</span>,<span class="string">`/**<span class="subst">$&#123;options.text&#125;</span>**/<span class="subst">$&#123;source&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return source 又是异步  需要创建一个cb</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure>

<h3 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> less = <span class="built_in">require</span>(<span class="string">'less'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> css</span><br><span class="line">  less.render(source,(err,r) =&gt; &#123;</span><br><span class="line">    css = r.css</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> css</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure>

<h3 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/url\((.+?)\)/g</span></span><br><span class="line">  <span class="comment">//第一次查找肯定是从零开始查找</span></span><br><span class="line">  <span class="keyword">let</span> pos = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="string">'let list = []'</span>]</span><br><span class="line">  <span class="keyword">while</span>(current = reg.exec(source)) &#123;</span><br><span class="line">    <span class="keyword">let</span> [matchUrl,g] = current</span><br><span class="line">    <span class="comment">//reg.lastIndex 对应着匹配最后一个字符的长度 matchUrl对应着url('./lala.jpg')的长度</span></span><br><span class="line">    <span class="comment">//相减可以得到前边的不包含 url的值</span></span><br><span class="line">    <span class="keyword">let</span> last = reg.lastIndex - matchUrl.length</span><br><span class="line">    arr.push(<span class="string">`list.push(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(source.slice(pos,last))&#125;</span>)`</span>)</span><br><span class="line">    <span class="comment">//把 g 替换成ruquire的写法</span></span><br><span class="line">    arr.push(<span class="string">`list.push('url('+ require(<span class="subst">$&#123;g&#125;</span>) +')')`</span>)</span><br><span class="line">    pos = reg.lastIndex</span><br><span class="line">    <span class="comment">// 添加后边的</span></span><br><span class="line">    arr.push(<span class="string">`list.push(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(source.slice(pos))&#125;</span>)`</span>)</span><br><span class="line">    arr.push(<span class="string">`module.exports = list.join(' ')`</span>)</span><br><span class="line">   <span class="keyword">return</span> arr.join(<span class="string">'\r\n'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> source</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure>

<h3 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>)</span><br><span class="line"><span class="keyword">let</span> style = <span class="string">''</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(source)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`style = document.createElement('style')</span></span><br><span class="line"><span class="string">  style.innerHTML = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(source)&#125;</span></span></span><br><span class="line"><span class="string">  document.head.appendChild(style)`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在 style-laoder pitch上写一个返回值  就不执行后边  没有pitch source是一个css解析完成的字符串</span></span><br><span class="line">loader.pitch = <span class="function"><span class="keyword">function</span>(<span class="params">remainingRequest</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//loaderUtils.stringifyRequest(this,'!!'+remainingRequest) 会把绝对路径转化为相对路径 </span></span><br><span class="line">  <span class="comment">// 这样做是为了 相当于引入一个inline-loader来处理css-loader返回的值  不需要再走其他的loader 需要加'!!'</span></span><br><span class="line">  <span class="comment">// 参照 pitch用法以及inline-loader使用方式来理解</span></span><br><span class="line">  <span class="comment">// 就是 把 css转化的 list数组 转化为 style-loader能看懂的 字符串 </span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`style = document.createElement('style')</span></span><br><span class="line"><span class="string">  style.innerHTML = require(<span class="subst">$&#123;loaderUtils.stringifyRequest(<span class="keyword">this</span>,<span class="string">'!!'</span>+remainingRequest)&#125;</span>)</span></span><br><span class="line"><span class="string">  document.head.appendChild(style)`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure>

<h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>)</span><br><span class="line"><span class="comment">// 获取后缀名</span></span><br><span class="line"><span class="keyword">let</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;limit&#125; = loaderUtils.getOptions(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">if</span>(limit &amp;&amp; limit&gt;source.length)&#123;</span><br><span class="line">    <span class="comment">//转成base64编码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`module.exports = "data:<span class="subst">$&#123;mime.getType(<span class="keyword">this</span>.resourcePath)&#125;</span>;base64,<span class="subst">$&#123;source.toString(<span class="string">'base64'</span>)&#125;</span>"`</span></span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 返回file-loader  this和source通过call传入 防止参数变乱</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'./file-loader'</span>).call(<span class="keyword">this</span>,source)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">loader.raw = <span class="literal">true</span> <span class="comment">//转为二进制</span></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure>

<h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loader</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//根据当前格式 来生成图片路径 </span></span><br><span class="line">  <span class="keyword">let</span> filename = loaderUtils.interpolateName(<span class="keyword">this</span>,<span class="string">'[hash].[ext]'</span>,&#123;<span class="attr">content</span>: source&#125;) <span class="comment">//根据当前内容来产生hash值</span></span><br><span class="line">  <span class="keyword">this</span>.emitFile(filename,source)  <span class="comment">//内部方法 发射文件</span></span><br><span class="line">  <span class="comment">//处理 图片 需要返回一个模块</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`module.exports = "<span class="subst">$&#123;filename&#125;</span>"`</span></span><br><span class="line">&#125;</span><br><span class="line">loader.raw = <span class="literal">true</span>  <span class="comment">//返回二进制</span></span><br><span class="line"><span class="built_in">module</span>.exports = loader</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-关于plugin</title>
    <url>/2019/11/17/302735564/</url>
    <content><![CDATA[<h2 id="webpack如何调用plugin"><a href="#webpack如何调用plugin" class="headerlink" title="webpack如何调用plugin"></a>webpack如何调用plugin</h2><blockquote>
<p> node_modules下的webpack下的lib中的Compiler.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//node_modules下的webpack下的lib中的compile.js</span></span><br><span class="line"><span class="comment">// 有一些钩子</span></span><br><span class="line"><span class="keyword">const</span> childCompiler = <span class="keyword">new</span> Compiler(<span class="keyword">this</span>.context);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(plugins)) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> plugins) &#123;</span><br><span class="line">		plugin.apply(childCompiler);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h2><p><a href="http://img.chensenran.top/AsyncPlugin-1573986344865.zip" target="_blank" rel="noopener">AsyncPlugin</a></p>
<p><a href="http://img.chensenran.top/DonePlugin-1573986513412.zip" target="_blank" rel="noopener">DonePlugin</a></p>
<p><a href="http://img.chensenran.top/FileListPlugin-1573986599709.zip" target="_blank" rel="noopener">FileListPlugin</a></p>
<p><a href="http://img.chensenran.top/HtmlWebpackPlugin-1573986682662.zip" target="_blank" rel="noopener">HtmlWebpackPlugin</a></p>
<h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><h3 id="AsyncPlugin"><a href="#AsyncPlugin" class="headerlink" title="AsyncPlugin"></a>AsyncPlugin</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncPlugin</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  apply(compiler)&#123;</span><br><span class="line">    <span class="comment">//这样是一个同步代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    compiler.hooks.emit.tapAsync(<span class="string">'AsyncPlugin'</span>,(compliation,cb)=&gt;&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'等一下'</span>)</span><br><span class="line">        cb()</span><br><span class="line">      &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    compiler.hooks.emit.tapPromise(<span class="string">'AsyncPlugin'</span>,(compliation)=&gt;&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;  </span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'再等一下'</span>)</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = AsyncPlugin</span><br></pre></td></tr></table></figure>

<h3 id="DonePlugin"><a href="#DonePlugin" class="headerlink" title="DonePlugin"></a>DonePlugin</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DonePlugin</span></span>&#123;</span><br><span class="line">  apply(compiler) <span class="comment">// compiler.hooks</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//这样是一个同步代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">//第一个参数无所谓，放啥都可以  tapable的时候也是</span></span><br><span class="line">    compiler.hooks.done.tap(<span class="string">'DonePlugin'</span>,(states)=&gt;&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'编译完成哦哦哦'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还需要导出一下</span></span><br><span class="line"><span class="built_in">module</span>.exports = DonePlugin</span><br></pre></td></tr></table></figure>

<h3 id="FileListPlugin"><a href="#FileListPlugin" class="headerlink" title="FileListPlugin"></a>FileListPlugin</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileListPlugin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(&#123; filename &#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.filename = filename;</span><br><span class="line">  &#125;</span><br><span class="line">  apply(compiler) &#123;</span><br><span class="line">    <span class="comment">//文件准备好了，要进行发射</span></span><br><span class="line">    compiler.hooks.emit.tapAsync(<span class="string">"FileListPlugin"</span>, (compilation, cb) =&gt; &#123;</span><br><span class="line">      <span class="comment">// compilcation有很多的属性</span></span><br><span class="line">      <span class="comment">// 打包的资源都会放在compilcation的assets属性上</span></span><br><span class="line">      <span class="comment">// console.log(compilation.assets)</span></span><br><span class="line">      <span class="keyword">let</span> content = <span class="string">`##  文件名    资源大小\r\n`</span>;</span><br><span class="line">      <span class="keyword">let</span> assets = compilation.assets;</span><br><span class="line">      <span class="comment">//Object.entries() 可以把对象变成一个数组</span></span><br><span class="line">      <span class="built_in">Object</span>.entries(assets).forEach(<span class="function">(<span class="params">[filename, staObj]</span>) =&gt;</span> &#123;</span><br><span class="line">        content += <span class="string">`-  <span class="subst">$&#123;filename&#125;</span>    <span class="subst">$&#123;staObj.size()&#125;</span>\r\n`</span>;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      assets[<span class="keyword">this</span>.filename] = &#123;</span><br><span class="line">        source() &#123;</span><br><span class="line">          <span class="keyword">return</span> content;</span><br><span class="line">        &#125;,</span><br><span class="line">        size() &#123;</span><br><span class="line">          <span class="keyword">return</span> content.length;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      cb()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = FileListPlugin;</span><br></pre></td></tr></table></figure>

<h3 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">//把外链标签变成内联</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InlineSourcePlugin</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(&#123;test&#125;)&#123;</span><br><span class="line">    <span class="keyword">this</span>.reg = test <span class="comment">//正则</span></span><br><span class="line">  &#125;</span><br><span class="line">  processTag(tag,compilation) &#123;</span><br><span class="line">    <span class="keyword">let</span> newTag,url</span><br><span class="line">    <span class="keyword">if</span>(tag.tagName===<span class="string">'link'</span>&amp;&amp;<span class="keyword">this</span>.reg.test(tag.attributes.href))&#123;</span><br><span class="line">      newTag = &#123;</span><br><span class="line">        tagName: <span class="string">'style'</span>,</span><br><span class="line">        attributes: &#123;</span><br><span class="line">          type: <span class="string">'text/css'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      url = tag.attributes.href</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tag.tagName===<span class="string">'script'</span>&amp;&amp;<span class="keyword">this</span>.reg.test(tag.attributes.src))&#123;</span><br><span class="line">      newTag = &#123;</span><br><span class="line">        tagName: <span class="string">'script'</span>,</span><br><span class="line">        attributes: &#123;</span><br><span class="line">          type: <span class="string">'application/javascript'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      url = tag.attributes.src</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(url)&#123;</span><br><span class="line">      newTag.innerHTML = compilation.assets[url].source() <span class="comment">//文件内容</span></span><br><span class="line">      <span class="comment">//删除这一个资源</span></span><br><span class="line">      <span class="keyword">delete</span>  compilation.assets[url]</span><br><span class="line">      <span class="keyword">return</span> newTag</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tag</span><br><span class="line">  &#125;</span><br><span class="line">  processTags(data,compilation)&#123;</span><br><span class="line">    <span class="keyword">let</span> bodyTags = []</span><br><span class="line">    <span class="keyword">let</span> headTags = []</span><br><span class="line">    data.headTags.forEach(<span class="function"><span class="params">headTag</span> =&gt;</span> &#123;</span><br><span class="line">      headTags.push(<span class="keyword">this</span>.processTag(headTag,compilation))</span><br><span class="line">    &#125;)</span><br><span class="line">    data.bodyTags.forEach(<span class="function"><span class="params">bodyTag</span> =&gt;</span> &#123;</span><br><span class="line">      bodyTags.push(<span class="keyword">this</span>.processTag(bodyTag,compilation))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;...data,headTags,bodyTags&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  apply(compiler)&#123;</span><br><span class="line">    <span class="comment">//要通过 HtmlWebpackPlugin的钩子来实现这一功能 根据官网文档修改</span></span><br><span class="line">    compiler.hooks.compilation.tap(<span class="string">'InlineSourcePlugin'</span>, (compilation) =&gt; &#123;</span><br><span class="line">      HtmlWebpackPlugin.getHooks(compilation).alterAssetTagGroups.tapAsync(</span><br><span class="line">        <span class="string">'AfterPlugin'</span>, </span><br><span class="line">        (data, cb) =&gt; &#123;</span><br><span class="line">          <span class="comment">//将link变成内联  script变成内联</span></span><br><span class="line">          data = <span class="keyword">this</span>.processTags(data,compilation) <span class="comment">//compilation.assets 资源</span></span><br><span class="line">          cb(<span class="literal">null</span>, data)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = InlineSourcePlugin</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-总结思维导图</title>
    <url>/2019/11/17/3240280397/</url>
    <content><![CDATA[<p><img src="http://img.chensenran.top/1573987030927.jpg" alt="webpack思维导图"></p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-核心tapable</title>
    <url>/2019/11/14/3809815838/</url>
    <content><![CDATA[<h1 id="tapable"><a href="#tapable" class="headerlink" title="tapable"></a>tapable</h1><p><img src="http://img.chensenran.top/1573739888959.png" alt=""></p>
<p><strong>核心原理：发布订阅模式。</strong></p>
<p>webpack本质上是一种事件流的机制，它的工作流程就是将各个插件串联起来，而实现这一切的核心就是Tapable。Tapable其实就是一个用于事件发布订阅执行的插件架构。</p>
<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><h3 id="SyncHook"><a href="#SyncHook" class="headerlink" title="SyncHook"></a>SyncHook</h3><p> 同步钩子，能够同步执行注册的监听函数 </p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;SyncHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lesson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;  </span><br><span class="line">        <span class="keyword">this</span>.hook = &#123;     </span><br><span class="line">            arch: <span class="keyword">new</span> SyncHook([<span class="string">'name'</span>])  </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    tap() &#123;</span><br><span class="line">        <span class="keyword">this</span>.hook.arch.tap(<span class="string">'node'</span>, (name) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(name)</span><br><span class="line">        &#125;)   </span><br><span class="line">        <span class="keyword">this</span>.hook.arch.tap(<span class="string">'vue'</span>, (name) =&gt; &#123;  </span><br><span class="line">            <span class="built_in">console</span>.log(name) </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; </span><br><span class="line">    start() &#123;</span><br><span class="line">        <span class="keyword">this</span>.hook.arch.call(<span class="string">'csr'</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> Lesson();</span><br><span class="line">t.tap() <span class="comment">// 注册狗子</span></span><br><span class="line">t.start() <span class="comment">// 使用钩子</span></span><br></pre></td></tr></table></figure>

<h4 id="原理实现"><a href="#原理实现" class="headerlink" title="原理实现"></a>原理实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncHook</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">constructor</span>(args) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.tasks = []</span><br><span class="line">    &#125; </span><br><span class="line">    tap(args, task) &#123; </span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task) </span><br><span class="line">    &#125;  </span><br><span class="line">    call(...args) &#123; </span><br><span class="line">        <span class="keyword">this</span>.tasks.forEach(<span class="function"><span class="params">task</span> =&gt;</span> task(...args)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> hook = <span class="keyword">new</span> SyncHook([<span class="string">'name'</span>]);</span><br><span class="line"></span><br><span class="line">hook.tap(<span class="string">'node'</span>, (name) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'node1'</span>, name)</span><br><span class="line">&#125;)</span><br><span class="line">hook.tap(<span class="string">'vue'</span>, (name) =&gt; &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'vue2'</span>, name)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">hook.call(<span class="string">'csr'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="SyncBailHook"><a href="#SyncBailHook" class="headerlink" title="SyncBailHook"></a>SyncBailHook</h3><p> SyncBailHook同步熔断保险钩子,即return一个非undefined的值，则不再继续执行后面的监听函数 </p>
<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;SyncBailHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lesson</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook = &#123;</span><br><span class="line">      arch: <span class="keyword">new</span> SyncBailHook([<span class="string">'name'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tap() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tap(<span class="string">'node'</span>, (name) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(name)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'break;'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tap(<span class="string">'vue'</span>, (name) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(name)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.call(<span class="string">'csr'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> Lesson();</span><br><span class="line">t.tap() <span class="comment">// 注册狗子</span></span><br><span class="line">t.start() <span class="comment">// 使用钩子</span></span><br></pre></td></tr></table></figure>
<h4 id="原理实现-1"><a href="#原理实现-1" class="headerlink" title="原理实现"></a>原理实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncBailHook</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(args) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tap(args, task) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks.push(task)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  call(...args) &#123;</span><br><span class="line">    <span class="keyword">let</span> res; <span class="comment">// 返回值</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// 下表</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      res = <span class="keyword">this</span>.tasks[index++](...args);</span><br><span class="line">    &#125; <span class="keyword">while</span> (res === <span class="literal">undefined</span> &amp;&amp; index &lt; <span class="keyword">this</span>.tasks.length)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hook = <span class="keyword">new</span> SyncBailHook([<span class="string">'name'</span>]);</span><br><span class="line">hook.tap(<span class="string">'node'</span>, (name) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'node1'</span>, name)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"no"</span></span><br><span class="line">&#125;)</span><br><span class="line">hook.tap(<span class="string">'vue'</span>, (name) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'vue2'</span>, name)</span><br><span class="line">&#125;)</span><br><span class="line">hook.call(<span class="string">'csr'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="SyncWaterfallHook"><a href="#SyncWaterfallHook" class="headerlink" title="SyncWaterfallHook"></a>SyncWaterfallHook</h3><p> SyncWaterfallHook 同步瀑布钩子，上一个监听函数的返回值会传递给下一个监听函数 </p>
<h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;SyncWaterfallHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lesson</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook = &#123;</span><br><span class="line">      arch: <span class="keyword">new</span> SyncWaterfallHook([<span class="string">'name'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tap() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tap(<span class="string">'node'</span>, (name) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(name)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'it is ok'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tap(<span class="string">'vue'</span>, (data) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.call(<span class="string">'csr'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> Lesson();</span><br><span class="line">t.tap() <span class="comment">// 注册狗子</span></span><br><span class="line">t.start() <span class="comment">// 使用钩子</span></span><br></pre></td></tr></table></figure>

<h4 id="原理实现-2"><a href="#原理实现-2" class="headerlink" title="原理实现"></a>原理实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncWaterfallHook</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(args) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tap(args, task) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks.push(task)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  call(...args) &#123;</span><br><span class="line">    <span class="keyword">let</span> [first, ...other] = <span class="keyword">this</span>.tasks;</span><br><span class="line">    <span class="keyword">let</span> ret = first(...args);</span><br><span class="line">    other.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> b(a);</span><br><span class="line">    &#125;, ret)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hook = <span class="keyword">new</span> SyncWaterfallHook([<span class="string">'name'</span>]);</span><br><span class="line">hook.tap(<span class="string">'node'</span>, (name) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'node1'</span>, name)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"no"</span></span><br><span class="line">&#125;)</span><br><span class="line">hook.tap(<span class="string">'vue'</span>, (name) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'vue2'</span>, name)</span><br><span class="line">&#125;)</span><br><span class="line">hook.call(<span class="string">'csr'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="SyncLoopHook"><a href="#SyncLoopHook" class="headerlink" title="SyncLoopHook"></a>SyncLoopHook</h3><p>SyncLoopHook,同步遇到某个不返回undefined的监听函数，就重复执行</p>
<h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;SyncLoopHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lesson</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.hook = &#123;</span><br><span class="line">      arch: <span class="keyword">new</span> SyncLoopHook([<span class="string">'name'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tap() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tap(<span class="string">'node'</span>, (name) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'node'</span>,name)</span><br><span class="line">      <span class="keyword">return</span> ++<span class="keyword">this</span>.index === <span class="number">3</span> ? <span class="literal">undefined</span> : <span class="string">'it is ok'</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tap(<span class="string">'vue'</span>, (data) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.call(<span class="string">'csr'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> Lesson();</span><br><span class="line">t.tap() <span class="comment">// 注册狗子</span></span><br><span class="line">t.start() <span class="comment">// 使用钩子</span></span><br></pre></td></tr></table></figure>
<h4 id="原理实现-3"><a href="#原理实现-3" class="headerlink" title="原理实现"></a>原理实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncLoopHook</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(args) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tap(args, task) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks.push(task)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  call(...args) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks.forEach(<span class="function"><span class="params">task</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> ret;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        ret = task(...args)</span><br><span class="line">      &#125; <span class="keyword">while</span> (ret !== <span class="literal">undefined</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hook = <span class="keyword">new</span> SyncLoopHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">hook.tap(<span class="string">'node'</span>, (name) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'node1'</span>, name)</span><br><span class="line">  <span class="keyword">return</span> ++total === <span class="number">3</span> ? <span class="literal">undefined</span> : <span class="string">"no"</span></span><br><span class="line">&#125;)</span><br><span class="line">hook.tap(<span class="string">'vue'</span>, (name) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'vue2'</span>, name)</span><br><span class="line">&#125;)</span><br><span class="line">hook.call(<span class="string">'csr'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="异步并行"><a href="#异步并行" class="headerlink" title="异步并行"></a>异步并行</h2><h3 id="AsyncParallelHook"><a href="#AsyncParallelHook" class="headerlink" title="AsyncParallelHook"></a>AsyncParallelHook</h3><p>异步并行</p>
<h4 id="普通异步方法"><a href="#普通异步方法" class="headerlink" title="普通异步方法"></a>普通异步方法</h4><p>使用tapAsync注册（每个注册方法都有一个回调函数），使用callAsync调用</p>
<h5 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;AsyncParallelHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lesson</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.hook = &#123;</span><br><span class="line">      arch: <span class="keyword">new</span> AsyncParallelHook([<span class="string">'name'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tap() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tapAsync(<span class="string">'node'</span>, (name, cb) =&gt; &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'node'</span>, name)</span><br><span class="line">        cb();</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tapAsync(<span class="string">'vue'</span>, (data, cb) =&gt; &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'vue'</span>, data)</span><br><span class="line">        cb();</span><br><span class="line">      &#125;, <span class="number">500</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.callAsync(<span class="string">'csr'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> Lesson();</span><br><span class="line">t.tap() <span class="comment">// 注册狗子</span></span><br><span class="line">t.start() <span class="comment">// 使用钩子</span></span><br></pre></td></tr></table></figure>
<h5 id="原理实现-4"><a href="#原理实现-4" class="headerlink" title="原理实现"></a>原理实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncParallelHook</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(args) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tapAsync(args, task) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks.push(task)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  callAsync(...args) &#123;</span><br><span class="line">    <span class="keyword">let</span> lastFunction = args.pop(); <span class="comment">// 取出最后一个函数，call的回调函数</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> done = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      index++;</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="keyword">this</span>.tasks.length) &#123;</span><br><span class="line">        lastFunction();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.tasks.forEach(<span class="function"><span class="params">task</span> =&gt;</span> &#123;</span><br><span class="line">      task(...args, done);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hook = <span class="keyword">new</span> AsyncParallelHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">hook.tapAsync(<span class="string">'node'</span>, (name, cb) =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'node1'</span>, name)</span><br><span class="line">    cb()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">hook.tapAsync(<span class="string">'vue'</span>, (name, cb) =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'vue2'</span>, name)</span><br><span class="line">    cb();</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br><span class="line">hook.callAsync(<span class="string">'csr'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Promise方法"><a href="#Promise方法" class="headerlink" title="Promise方法"></a>Promise方法</h4><p>使用tapPromise注册，promise调用</p>
<h5 id="使用-5"><a href="#使用-5" class="headerlink" title="使用"></a>使用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;AsyncParallelHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lesson</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.hook = &#123;</span><br><span class="line">      arch: <span class="keyword">new</span> AsyncParallelHook([<span class="string">'name'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tap() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tapPromise(<span class="string">'node'</span>, (name) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'node'</span>, name)</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tapPromise(<span class="string">'vue'</span>, (data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'vue'</span>, data)</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, <span class="number">500</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.promise(<span class="string">'csr'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> Lesson();</span><br><span class="line">t.tap() <span class="comment">// 注册狗子</span></span><br><span class="line">t.start() <span class="comment">// 使用钩子</span></span><br></pre></td></tr></table></figure>
<h5 id="原理实现-5"><a href="#原理实现-5" class="headerlink" title="原理实现"></a>原理实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncParallelHook</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(args) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tapPromise(args, task) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks.push(task)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  promise(...args) &#123;</span><br><span class="line">    <span class="keyword">let</span> tasks = <span class="keyword">this</span>.tasks.map(<span class="function"><span class="params">task</span> =&gt;</span> task(...args))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all(tasks)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hook = <span class="keyword">new</span> AsyncParallelHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">hook.tapPromise(<span class="string">'node'</span>, (name) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'node1'</span>, name)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">hook.tapPromise(<span class="string">'vue'</span>, (name) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'vue2'</span>, name)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">hook.promise(<span class="string">'csr'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="AsyncParallelBailHook"><a href="#AsyncParallelBailHook" class="headerlink" title="AsyncParallelBailHook"></a>AsyncParallelBailHook</h3><p>带保险的异步并发</p>
<h2 id="异步串行"><a href="#异步串行" class="headerlink" title="异步串行"></a>异步串行</h2><h3 id="AsyncSeriesHook"><a href="#AsyncSeriesHook" class="headerlink" title="AsyncSeriesHook"></a>AsyncSeriesHook</h3><p>异步串行</p>
<h4 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h4><h5 id="使用-6"><a href="#使用-6" class="headerlink" title="使用"></a>使用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;AsyncSeriesHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lesson</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.hook = &#123;</span><br><span class="line">      arch: <span class="keyword">new</span> AsyncSeriesHook([<span class="string">'name'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tap() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tapAsync(<span class="string">'node'</span>, (name, cb) =&gt; &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'node'</span>, name)</span><br><span class="line">        cb()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tapAsync(<span class="string">'vue'</span>, (data, cb) =&gt; &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'vue'</span>, data)</span><br><span class="line">        cb();</span><br><span class="line">      &#125;, <span class="number">500</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.callAsync(<span class="string">'csr'</span>,() =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> Lesson();</span><br><span class="line">t.tap() <span class="comment">// 注册狗子</span></span><br><span class="line">t.start() <span class="comment">// 使用钩子</span></span><br></pre></td></tr></table></figure>
<h5 id="原理实现-6"><a href="#原理实现-6" class="headerlink" title="原理实现"></a>原理实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncSeriesHook</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(args) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tapAsync(args, task) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks.push(task)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  callAsync(...args) &#123;</span><br><span class="line">    <span class="keyword">let</span> finalCallback = args.pop(); <span class="comment">// 最后call的回调函数</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> next = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="keyword">this</span>.tasks.length) <span class="keyword">return</span> finalCallback();</span><br><span class="line">      <span class="keyword">this</span>.tasks[index](...args, next)</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hook = <span class="keyword">new</span> AsyncSeriesHook([<span class="string">'name'</span>]);</span><br><span class="line">hook.tapAsync(<span class="string">'node'</span>, (name, cb) =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'node1'</span>, name)</span><br><span class="line">    cb()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">hook.tapAsync(<span class="string">'vue'</span>, (name, cb) =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'vue2'</span>, name)</span><br><span class="line">    cb();</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br><span class="line">hook.callAsync(<span class="string">'csr'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Promise方法-1"><a href="#Promise方法-1" class="headerlink" title="Promise方法"></a>Promise方法</h4><h5 id="使用-7"><a href="#使用-7" class="headerlink" title="使用"></a>使用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;AsyncSeriesHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lesson</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.hook = &#123;</span><br><span class="line">      arch: <span class="keyword">new</span> AsyncSeriesHook([<span class="string">'name'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tap() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tapPromise(<span class="string">'node'</span>, (name) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'node'</span>, name)</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tapPromise(<span class="string">'vue'</span>, (data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'vue'</span>, data)</span><br><span class="line">          resolve();</span><br><span class="line">        &#125;, <span class="number">500</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.promise(<span class="string">'csr'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> Lesson();</span><br><span class="line">t.tap() <span class="comment">// 注册狗子</span></span><br><span class="line">t.start() <span class="comment">// 使用钩子</span></span><br></pre></td></tr></table></figure>

<h5 id="原理实现-7"><a href="#原理实现-7" class="headerlink" title="原理实现"></a>原理实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncSeriesHook</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(args) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tapPromise(args, task) &#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks.push(task)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  promise(...args) &#123;</span><br><span class="line">    <span class="keyword">let</span> [first, ...other] = <span class="keyword">this</span>.tasks;</span><br><span class="line">    <span class="keyword">return</span> other.reduce(<span class="function">(<span class="params">p, n</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> p.then(<span class="function"><span class="params">()</span> =&gt;</span> n(...args))</span><br><span class="line">    &#125;, first(...args))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hook = <span class="keyword">new</span> AsyncSeriesHook([<span class="string">'name'</span>]);</span><br><span class="line">hook.tapPromise(<span class="string">'node'</span>, (name) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'node1'</span>, name)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">hook.tapPromise(<span class="string">'vue'</span>, (name, cb) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'vue2'</span>, name)</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">hook.promise(<span class="string">'csr'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="AsyncSeriesBailHook"><a href="#AsyncSeriesBailHook" class="headerlink" title="AsyncSeriesBailHook"></a>AsyncSeriesBailHook</h3><p>带保险的异步串行</p>
<h3 id="AsyncSeriesWaterfallHook"><a href="#AsyncSeriesWaterfallHook" class="headerlink" title="AsyncSeriesWaterfallHook"></a>AsyncSeriesWaterfallHook</h3><p>异步瀑布钩子，上一个监听函数的返回值会传递给下一个监听函数 </p>
<h4 id="Promise-用法"><a href="#Promise-用法" class="headerlink" title="Promise 用法"></a>Promise 用法</h4><h5 id="使用-8"><a href="#使用-8" class="headerlink" title="使用"></a>使用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;AsyncSeriesWaterfallHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lesson</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.hook = &#123;</span><br><span class="line">      arch: <span class="keyword">new</span> AsyncSeriesWaterfallHook([<span class="string">'name'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tap() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tapPromise(<span class="string">'node'</span>, (name) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'node'</span>, name)</span><br><span class="line">          resolve(<span class="string">'data'</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tapPromise(<span class="string">'vue'</span>, (data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'vue'</span>, data)</span><br><span class="line">          resolve();</span><br><span class="line">        &#125;, <span class="number">500</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.promise(<span class="string">'csr'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> Lesson();</span><br><span class="line">t.tap() <span class="comment">// 注册狗子</span></span><br><span class="line">t.start() <span class="comment">// 使用钩子</span></span><br></pre></td></tr></table></figure>
<h5 id="原理实现-8"><a href="#原理实现-8" class="headerlink" title="原理实现"></a>原理实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;AsyncSeriesWaterfallHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lesson</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.hook = &#123;</span><br><span class="line">      arch: <span class="keyword">new</span> AsyncSeriesWaterfallHook([<span class="string">'name'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tap() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tapPromise(<span class="string">'node'</span>, (name) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'node'</span>, name)</span><br><span class="line">          resolve(<span class="string">'data'</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.tapPromise(<span class="string">'vue'</span>, (data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'vue'</span>, data)</span><br><span class="line">          resolve();</span><br><span class="line">        &#125;, <span class="number">500</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hook.arch.promise(<span class="string">'csr'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> Lesson();</span><br><span class="line">t.tap() <span class="comment">// 注册狗子</span></span><br><span class="line">t.start() <span class="comment">// 使用钩子</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>tapable</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-模拟简单webpack</title>
    <url>/2019/11/15/2020820168/</url>
    <content><![CDATA[<h2 id="基本思路："><a href="#基本思路：" class="headerlink" title="基本思路："></a>基本思路：</h2><ol>
<li>获取模块内容</li>
<li>生成对应模块id（文件的相对路径）</li>
<li>解析源码为AST</li>
<li>修改AST节点，require–&gt;_<em>webpack_require_</em>   文件路径为相对路径</li>
<li>保存依赖模块数组</li>
<li>将AST打包回源码</li>
<li>遍历递归依赖数组，修改依赖模块</li>
<li>使用ejs模板打包代码</li>
</ol>
<h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><h3 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h3><p>bin相当于运行哪一个命令，执行哪一个文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"bin"</span>:&#123;</span><br><span class="line">    <span class="string">"csr-pack"</span>: <span class="string">"./bin/csr-pack.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="npm-link的流程"><a href="#npm-link的流程" class="headerlink" title="npm link的流程"></a>npm link的流程</h3><blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在csr-pack目录下 注意package.json中的bin配置以及后边是bin目录下的csr-pack.js </span></span><br><span class="line">npm link </span><br><span class="line"><span class="comment">// 在webpack-go5下</span></span><br><span class="line">npm link csr-pack</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="AST-抽象语法树"><a href="#AST-抽象语法树" class="headerlink" title="AST 抽象语法树"></a>AST 抽象语法树</h2><h3 id="babylon"><a href="#babylon" class="headerlink" title="babylon"></a>babylon</h3><p>把源码转化为AST</p>
<h3 id="babel-traverse"><a href="#babel-traverse" class="headerlink" title="@babel/traverse"></a>@babel/traverse</h3><p>遍历AST节点</p>
<h3 id="babel-types"><a href="#babel-types" class="headerlink" title="@babel/types"></a>@babel/types</h3><p>替换AST节点</p>
<h3 id="babel-generator"><a href="#babel-generator" class="headerlink" title="@babel/generator"></a>@babel/generator</h3><p>将AST打包为源码</p>
<blockquote>
<p>process.cwd()</p>
<p>获取当前工作目录</p>
</blockquote>
<h2 id="手写loader思路"><a href="#手写loader思路" class="headerlink" title="手写loader思路:"></a>手写loader思路:</h2><ol>
<li>loader其实就是一个函数</li>
<li>新增style-loader 和less-loader两个函数</li>
<li>配置webpack.config.js中rules，为两个文件的绝对路径 </li>
<li>在getSource获取源码时，对文件路径进行正则匹配</li>
<li>匹配成功的文件 进行从后往前调用函数处理</li>
</ol>
<p>##　plugin： 使用tapable实现生命周期控制</p>
<h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h2><p><a href="http://img.chensenran.top/csr-pack-1573983594396.zip" target="_blank" rel="noopener">下载csr-pack代码</a></p>
<h2 id="主要相关代码"><a href="#主要相关代码" class="headerlink" title="主要相关代码"></a>主要相关代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// compiler.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> babylon = <span class="built_in">require</span>(<span class="string">'babylon'</span>)</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">'@babel/types'</span>)</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">'@babel/traverse'</span>).default</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">'@babel/generator'</span>).default</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">'ejs'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;SyncHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compiler</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 构造函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>config 配日信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">constructor</span>(config) &#123;</span><br><span class="line">    <span class="keyword">this</span>.config = config;</span><br><span class="line">    <span class="keyword">this</span>.entryId; <span class="comment">// 需要保存入口文件的路径 './src/index.js'</span></span><br><span class="line">    <span class="comment">// 入口路径</span></span><br><span class="line">    <span class="keyword">this</span>.entry = config.entry;</span><br><span class="line">    <span class="keyword">this</span>.modules = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.root = process.cwd(); <span class="comment">// 工作路径</span></span><br><span class="line">    <span class="keyword">this</span>.assets = &#123;&#125;; <span class="comment">// 输出的多个文件</span></span><br><span class="line">    <span class="keyword">this</span>.hooks = &#123;</span><br><span class="line">      entryOptions: <span class="keyword">new</span> SyncHook(),</span><br><span class="line">      compile: <span class="keyword">new</span> SyncHook(),</span><br><span class="line">      afterCompile: <span class="keyword">new</span> SyncHook(),</span><br><span class="line">      afterPlugins: <span class="keyword">new</span> SyncHook(),</span><br><span class="line">      run: <span class="keyword">new</span> SyncHook(),</span><br><span class="line">      emit: <span class="keyword">new</span> SyncHook(),</span><br><span class="line">      done: <span class="keyword">new</span> SyncHook(),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用插件</span></span><br><span class="line">    <span class="keyword">let</span> plugins = <span class="keyword">this</span>.config.plugins;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(plugins)) &#123;</span><br><span class="line">      plugins.forEach(<span class="function"><span class="params">plugin</span> =&gt;</span> &#123;</span><br><span class="line">        plugin.apply(<span class="keyword">this</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取文件内容，并处理loader</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>modulePath 文件的绝对路径</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return <span class="type">&#123;string | ArrayBuffer&#125;</span> </span>// 文件内容</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  getSource(modulePath) &#123;</span><br><span class="line">    <span class="keyword">let</span> content = fs.readFileSync(modulePath, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="comment">// 获取需要处理的loader数组</span></span><br><span class="line">    <span class="keyword">let</span> &#123;rules&#125; = <span class="keyword">this</span>.config.module;</span><br><span class="line">    rules.forEach(<span class="function"><span class="params">rule</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 对test选项进行正则匹配</span></span><br><span class="line">      <span class="keyword">if</span> (rule.test.test(modulePath)) &#123;</span><br><span class="line">        <span class="keyword">let</span> use = rule.use;</span><br><span class="line">        <span class="keyword">let</span> len = use.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">normalLoader</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 使用loader函数处理</span></span><br><span class="line">          content = <span class="built_in">require</span>(use[len--])(content);</span><br><span class="line">          <span class="comment">// 不止一个loader，递归调用后续loader进行依次处理</span></span><br><span class="line">          <span class="keyword">if</span> (len &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            normalLoader();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        normalLoader();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 解析修改源码</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>source // 源码</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>parentPath // 父路径</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return <span class="type">&#123;&#123;sourceCode: *, dependencies: *&#125;</span></span>&#125; // sourceCode：修改后的源码，dependencies：子依赖模块</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  parse(source, parentPath) &#123;</span><br><span class="line">    <span class="comment">// 源码解析为AST</span></span><br><span class="line">    <span class="keyword">let</span> ast = babylon.parse(source);</span><br><span class="line">    <span class="keyword">let</span> dependencies = []; <span class="comment">// 模块依赖数组</span></span><br><span class="line">    traverse(ast, &#123;</span><br><span class="line">      CallExpression(p) &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;node&#125; = p; <span class="comment">// 对应的节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.callee.name === <span class="string">'require'</span>) &#123;</span><br><span class="line">          node.callee.name = <span class="string">' __webpack_require__'</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> moduleValue = node.arguments[<span class="number">0</span>].value;</span><br><span class="line">          moduleValue = moduleValue + (path.extname(moduleValue) ? <span class="string">''</span> : <span class="string">'.js'</span>); <span class="comment">// 判断是否有后缀名</span></span><br><span class="line">          moduleValue = <span class="string">`./<span class="subst">$&#123;path.join(parentPath, moduleValue)&#125;</span>`</span>.replace(<span class="regexp">/\\/g</span>, <span class="string">'/'</span>); <span class="comment">// 修改为相对路径</span></span><br><span class="line">          dependencies.push(moduleValue); <span class="comment">// 添加依赖模块</span></span><br><span class="line">          node.arguments = [types.stringLiteral(moduleValue)]; <span class="comment">// 修改AST节点</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> sourceCode = generator(ast).code;</span><br><span class="line">    <span class="keyword">return</span> &#123;sourceCode, dependencies&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 构建模块</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>modulePath 文件的绝对路径</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>isEntry 是否为主入口文件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  buildModule(modulePath, isEntry) &#123;</span><br><span class="line">    <span class="comment">// 拿到模块的内容</span></span><br><span class="line">    <span class="keyword">let</span> source = <span class="keyword">this</span>.getSource(modulePath);</span><br><span class="line">    <span class="comment">// 生成模块id  = modulePath - root</span></span><br><span class="line">    <span class="keyword">let</span> moduleName = <span class="string">`./<span class="subst">$&#123;path.relative(<span class="keyword">this</span>.root, modulePath)&#125;</span>`</span>.replace(<span class="regexp">/\\/g</span>, <span class="string">'/'</span>);</span><br><span class="line">    <span class="comment">// 保存主入口路径</span></span><br><span class="line">    <span class="keyword">if</span> (isEntry) &#123;</span><br><span class="line">      <span class="keyword">this</span>.entryId = moduleName</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解析需要改造的源码 并返回依赖列表</span></span><br><span class="line">    <span class="keyword">const</span> &#123;sourceCode, dependencies&#125; = <span class="keyword">this</span>.parse(source, path.dirname(moduleName));</span><br><span class="line">    <span class="comment">// 把相对路径和模块中的内容对应起来</span></span><br><span class="line">    <span class="keyword">this</span>.modules[moduleName] = sourceCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历 递归依赖列表</span></span><br><span class="line">    dependencies.forEach(<span class="function"><span class="params">dep</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.buildModule(path.join(<span class="keyword">this</span>.root, dep), <span class="literal">false</span>); <span class="comment">// 不是主入口</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 写入打包完成的文件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  emitFile() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hooks.emit.call();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> outputPath = path.resolve(<span class="keyword">this</span>.config.output.path, <span class="keyword">this</span>.config.output.filename); <span class="comment">// 输出文件路径</span></span><br><span class="line">    <span class="keyword">const</span> ejsFile = <span class="keyword">this</span>.getSource(path.resolve(__dirname, <span class="string">'main.ejs'</span>));</span><br><span class="line">    <span class="keyword">const</span> renderFile = ejs.render(ejsFile, &#123;</span><br><span class="line">      entryId: <span class="keyword">this</span>.entryId,</span><br><span class="line">      modules: <span class="keyword">this</span>.modules,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.assets [outputPath] = renderFile;</span><br><span class="line">    fs.writeFileSync(outputPath, renderFile);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 执行函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hooks.run.call();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.hooks.compile.call();</span><br><span class="line">    <span class="comment">// 执行 并且创建模块的依赖关系</span></span><br><span class="line">    <span class="keyword">this</span>.buildModule(path.resolve(<span class="keyword">this</span>.root, <span class="keyword">this</span>.entry), <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">this</span>.hooks.afterCompile.call();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个文件，打包后的文件</span></span><br><span class="line">    <span class="keyword">this</span>.emitFile();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.hooks.done.call();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Compiler;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客#vivo2020校招B卷</title>
    <url>/2019/11/23/1883259812/</url>
    <content><![CDATA[<h1 id="矿石车"><a href="#矿石车" class="headerlink" title="矿石车"></a>矿石车</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>小v最近在玩一款挖矿的游戏，该游戏介绍如下：</p>
<blockquote>
<p>1、每次可以挖到多个矿石，每个矿石的重量都不一样，挖矿结束后需要通过一款平衡矿车运送下山；</p>
<p>2、平衡矿车有左右2个车厢，中间只有1个车轮沿着导轨滑到山下，且矿车只有在2个车厢重量完全相等且矿石数量相差不超过1个的情况下才能成功运送矿石，否则在转弯时可能出现侧翻。</p>
</blockquote>
<p>假设小v挖到了n（n&lt;100）个矿石，每个矿石重量不超过100，为了确保一次性将n个矿石都运送出去，一旦矿车的车厢重量不一样就需要购买配重砝码。请问小v每次<strong>最少</strong>需要购买多少重量的砝码呢? （假设车厢足够放下这些矿石和砝码，砝码重量任选）</p>
<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a><strong>输入描述:</strong></h3><blockquote>
<p>输入n个正整数表示每个矿石的重量</p>
</blockquote>
<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h3><blockquote>
<p>输出一个正整数表示最少需要购买的砝码重量</p>
</blockquote>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><blockquote>
<p>3 7 4 11 8 10</p>
</blockquote>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><blockquote>
<p>1</p>
</blockquote>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<p>小v可以将重量3,7和11的矿石放到左车厢，重量4，8和10 放到右车厢，然后购买重量为1的砝码放到左车厢</p>
</blockquote>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注:"></a>备注:</h3><blockquote>
<p>如果n为奇数则左右车厢里的矿石数量相差一个，如果n为偶数则车厢两边的矿石数量相等</p>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>将数组分成前后个数相等的两组（若为个数单数，前部分比后部分少1个）。遍历前数组，在后数组中寻找是否可以替换的数，以前一部分的和接近临界值（总数/2）。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">stones</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (stones.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> len = <span class="built_in">Math</span>.floor(stones.length / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">let</span> leftSum = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; stones.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; len) &#123;</span><br><span class="line">      leftSum += +stones[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sum += +stones[i];</span><br><span class="line">  &#125;</span><br><span class="line">  sum /= <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> t = <span class="built_in">Math</span>.abs(sum - leftSum);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = len; j &lt; stones.length; j++) &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = <span class="built_in">Math</span>.abs(sum - (leftSum - +stones[i] + +stones[j]))</span><br><span class="line">        <span class="keyword">if</span> (temp &lt; t) &#123;</span><br><span class="line">          flag = <span class="literal">true</span>;</span><br><span class="line">          leftSum = leftSum - +stones[i] + +stones[j];</span><br><span class="line">          [stones[i], stones[j]] = [stones[j], stones[i]];</span><br><span class="line">          t = temp;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (flag);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.abs(sum - leftSum) * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>​    一开始被左右两数组的个数差不超过1限制，向两个数组里添加元素。后来分成两组后，首先满足了个数的要求。再不断使前一部分的和不断解决总和的一半。</p>
<h1 id="入职编号"><a href="#入职编号" class="headerlink" title="入职编号"></a>入职编号</h1><blockquote>
<p>未通过，不能理解题目的要求</p>
</blockquote>
<h1 id="跳盒子"><a href="#跳盒子" class="headerlink" title="跳盒子"></a>跳盒子</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote>
<p>​     有n个盒子排成了一行，每个盒子上面有一个数字a[i]，表示在该盒子上的人最多能向右移动a[i]个盒子（比如当前所在盒子上的数字是3，则表示可以一次向右前进1个盒子，2个盒子或者3个盒子）。  </p>
</blockquote>
<p>  现在小v从左边第一个盒子上开始体验游戏，请问<strong>最少</strong>需要移动几次能到最后一个盒子上？</p>
<h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a><strong>输入描述:</strong></h3><blockquote>
<p>输入 ：2 2 3 0 4表示现在有5个盒子，上面的数字分别是2, 2, 3, 0, 4。</p>
</blockquote>
<h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h3><blockquote>
<p>输出：2小v有两种跳法：跳法1：盒子1 -&gt; 盒子2 -&gt; 盒子3 -&gt; 盒子5，共3下跳法2：盒子1 -&gt; 盒子3 -&gt; 盒子5，共2下跳法2的步骤数最少，所以输出最少步数：2。</p>
</blockquote>
<h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><blockquote>
<p>2 2 3 0 4</p>
</blockquote>
<h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><blockquote>
<p>2</p>
</blockquote>
<h2 id="备注-1"><a href="#备注-1" class="headerlink" title="备注"></a>备注</h2><blockquote>
<p>如果没有盒子或跳不到最后一个盒子上，则返回-1；如果已经在最后盒子上，则直接返回0。</p>
</blockquote>
<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>动态规划</p>
<ul>
<li>初始化所有位置为 -1（不能到达），0位置为0（需要0步到达）</li>
<li>从1位置开始向后循环（i）<ul>
<li>从0开始，判断该位置下表（j） + 该位置可跳跃值 是否大于循环下表（i）</li>
<li>大于或等于，则循环位置（i）值 = （j）位置的值 + 1</li>
</ul>
</li>
<li>返回数组末尾值</li>
</ul>
<h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">boxes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = boxes.length;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(len).fill(<span class="number">-1</span>);</span><br><span class="line">  arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">1</span>; index &lt; len; index++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= index - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">parseInt</span>(boxes[j]) + j &gt;= index) &#123;</span><br><span class="line">        arr[index] = arr[j] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr[len - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>牛客</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>字节跳动-Data-前端开发实习生面经</title>
    <url>/2020/04/07/4264422933/</url>
    <content><![CDATA[<p>记字节跳动Data前端开发实习面试。</p>
<h1 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h1><p>因为原来的面试官临时开会，等了一会换了一个面试官，好事多磨啊。面试气氛还是很和谐的，每块内容都有涉及，并且会深入一些。大概有JavaScript基础、算法、计算机网络、设计模式。</p>
<ol>
<li><p>自我介绍</p>
</li>
<li><p>this探讨</p>
<ul>
<li><p>说说有哪些改变this指向的方法</p>
<blockquote>
<p>this是在执行环境决定的，有call、apply、bind的方法，在new对象的时候也会修改this</p>
</blockquote>
</li>
<li><p>阅读代码说结果</p>
<blockquote>
<p> 从基础到复杂，题目比较多，大概记得这些</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="number">1</span>;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a.prototype.name = <span class="number">2</span>;</span><br><span class="line">a()</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">b();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = &#123;<span class="attr">name</span>: <span class="number">3</span>&#125;;</span><br><span class="line">c.say = a;</span><br><span class="line"><span class="keyword">let</span> d = c.say;</span><br><span class="line"></span><br><span class="line">c.say();</span><br><span class="line">d();</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>bind实现</p>
<ul>
<li><p>假如要兼容IE，请简单实现一下bind（上题自己挖的坑）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当时写的代码，没考虑参数</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.call(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>这里为什么用箭头函数，上面那个function可以换成箭头函数嘛</p>
<blockquote>
<p>因为箭头函数本身没有this，绑定外层的this。上面的那个function不能换成箭头函数</p>
</blockquote>
</li>
</ul>
</li>
<li><p>你看过Vue的源码嘛？简单实现一下发布订阅模式</p>
<blockquote>
<p>源码浅浅看过😀，但是没全部看懂。</p>
<p>脑子里一下就想起on，emit，off，once，当时写到一半就被叫停了，好不容易遇到easy的。。。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventHelper</span> </span>&#123;</span><br><span class="line">  construct() &#123;</span><br><span class="line">    <span class="keyword">this</span>._eventMap = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on(fn, cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>._eventMap[fn]</span><br><span class="line">      ? <span class="keyword">this</span>._eventMap.push(cb)</span><br><span class="line">      : <span class="keyword">this</span>._eventMap[fn] = [cb];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  emit(fn, ...args) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._eventMap[fn]) &#123;</span><br><span class="line">      <span class="keyword">this</span>._eventMap[fn].forEach(<span class="function">(<span class="params">cb</span>) =&gt;</span> cb.apply(<span class="keyword">this</span>, args))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  off(fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._eventMap[fn]) &#123;</span><br><span class="line">      <span class="keyword">delete</span> (<span class="keyword">this</span>._eventMap[fn])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  once(fn, cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>.on(fn, () =&gt; &#123;</span><br><span class="line">      cb();</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.off(fn);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>UDP &amp; TCP</p>
<ul>
<li><p>说说两者的区别</p>
</li>
<li><p>怎么判断这个包是UDP还是TCP</p>
<blockquote>
<p>好狠，一下没想起来。一开始答了TCP三次握手😂，后来冷静想想IP的报文段里好像有这个标识。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>HTTPS</p>
<ul>
<li><p>说说原理</p>
<blockquote>
<p>吧啦吧啦，讲了TLS，非对称加密，对称加密。。。</p>
</blockquote>
</li>
<li><p>中间人攻击</p>
<blockquote>
<p>大概讲了一下过程</p>
</blockquote>
</li>
<li><p>是不能对数据修改，还是对数据修改后，接受端不认</p>
<blockquote>
<p>大概讲了一下数字签名</p>
</blockquote>
</li>
</ul>
</li>
<li><p>浏览器缓存</p>
<ul>
<li><p>说说都有哪些方法</p>
<blockquote>
<p>Cache-control、ETag、Last-modify</p>
</blockquote>
</li>
<li><p>说说什么时候必须使用ETag</p>
<blockquote>
<p>一下子没想出来，就说了什么时候需要使用last-modify（还好面试官放过我了😝）</p>
<p>查了查：last-modified不识别s（秒）单位里的修改，所以如果资源在s（秒）单位里发生了修改，那last-modified也不会发生改变</p>
</blockquote>
</li>
</ul>
</li>
<li><p>二叉树左侧看</p>
<blockquote>
<p>我的想法就是树的层次遍历。面试官说大概思路差不多，就是用null做标识符可能不太雅观</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">                <span class="number">1</span></span><br><span class="line">            <span class="number">2</span>       <span class="number">3</span></span><br><span class="line">         <span class="number">4</span>   <span class="number">5</span>    <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">                         <span class="number">8</span></span><br><span class="line"></span><br><span class="line">=&gt; <span class="number">1248</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当时大概的代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leftSee</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [];</span><br><span class="line">  arr.push(<span class="literal">null</span>)</span><br><span class="line">  arr.push(node);</span><br><span class="line">  <span class="keyword">while</span> (arr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> t = arr.shift();</span><br><span class="line">    <span class="keyword">if</span> (t === <span class="literal">null</span>) &#123;</span><br><span class="line">      arr.push(<span class="literal">null</span>);</span><br><span class="line">      t = arr.shift();</span><br><span class="line">      <span class="keyword">if</span> (t == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(t.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t.left) &#123;</span><br><span class="line">      arr.push(t.left)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t.right) &#123;</span><br><span class="line">      arr.push(t.right)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h1><p>二面的面试官给人的感觉比较”随意“，感觉整个面试就像是在聊天。但是问的内容很发散，可能一个问题会涉及很多知识点。</p>
<p>自我感觉答的不是很好，主要的点达到了，但是很多都没有答全，面完都以为自己要挂了。感觉在平时写项目的时候需要更多的思考，这么写有什么优点，好在哪里，为什么好，又有什么缺陷。</p>
<ol>
<li><p>自我介绍</p>
</li>
<li><p>说说Vue3的新特征</p>
<blockquote>
<p>真实，真的真实！</p>
<p>当时主要说了两点：1. Proxy 替代了 Object.defineProperty，因为 Object.definePropetry 无法监听嵌套属性，需要递归，也无法监听数组，需要重写方法。2. 支持自定义渲染，目前Vue2底层的渲染API没有向开发者提供，像mpvue就是fork了整个Vue的源码，然后改了底层的渲染。其他还提了一下TypeScript，对象式声明，运行包大小。。</p>
</blockquote>
</li>
<li><p>虚拟DOM</p>
<ul>
<li><p>说说虚拟DOM和原始DOM相比的优缺点</p>
<blockquote>
<p>只说出了优点：1. 利用JS的计算换取对DOM的操作，提高性能。2. 不需要直接操作DOM。3. 跨平台开发，weex</p>
</blockquote>
</li>
<li><p>根据svelte框架，类比一下你还能说出什么缺点嘛？</p>
<blockquote>
<p>我没听过svelte，面试官就简单介绍了一下那个框架的卖点。</p>
<p>懵逼脸🙃</p>
</blockquote>
</li>
</ul>
</li>
<li><p>BFC</p>
<ul>
<li><p>是什么</p>
<blockquote>
<p>块级格式化上下文，还有IFC、FFC、GFC</p>
</blockquote>
</li>
<li><p>什么情况下使用</p>
<blockquote>
<p>外边距塌陷，清除内部子元素浮动</p>
</blockquote>
</li>
<li><p>该怎么触发</p>
<blockquote>
<p>……愣是没想全😐，就想起来float不为none</p>
</blockquote>
</li>
</ul>
</li>
<li><p>移动端</p>
<ul>
<li><p>移动端适配</p>
<blockquote>
<p>@media 媒体查询加载不同的css，Flex，float布局。。</p>
</blockquote>
</li>
<li><p>rem 和 em 的区别</p>
<blockquote>
<p>感觉答的不好，之说出rem是基于HTML元素的字体大小决定的</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Vuex用过modules吧，说说A文件内的actions怎么修改B的state</p>
<blockquote>
<ol>
<li>直接在A文件内引入B文件，调用B的actions😁。2. dispatch第三个参数为{root: true}</li>
</ol>
</blockquote>
</li>
<li><p>TypeScript</p>
<ul>
<li><p>变量后面加上感叹号什么意思</p>
<blockquote>
<p>忘了🙃，应该是非空断言</p>
</blockquote>
</li>
<li><p>类型断言的方法</p>
</li>
<li><p>好处、缺点</p>
</li>
</ul>
</li>
<li><p>Node</p>
<blockquote>
<p>问我node掌握如何，我就说我只会使用，原理部分还在学习中。。。用过express和Egg</p>
</blockquote>
</li>
<li><p>异步</p>
<ul>
<li><p>看代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> a = test();</span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">await</span> test();</span><br><span class="line">  <span class="built_in">console</span>.log(a, b);</span><br><span class="line">&#125;</span><br><span class="line">call();</span><br></pre></td></tr></table></figure>
</li>
<li><p>这样写的结果是什么，有什么地方可以改进的嘛</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> resp1 = <span class="keyword">await</span> getApi1();</span><br><span class="line">  <span class="keyword">const</span> resp2 = <span class="keyword">await</span> getApi2();</span><br><span class="line">  <span class="built_in">console</span>.log(resp1, resp2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为await会阻塞，所以getApi2要等getApi1返回结果了才会触发，可以使用Promise.all同时发起</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Promise.all</p>
<p>大概写下Promise.all的原理吧</p>
<blockquote>
<p>没看过，只能靠临场发挥了（自己挖的坑，哭着也要爬出来😭）</p>
<p>边写边与面试官交流，到后面说大致思路差不多，但还要我回去看看。。。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.all = <span class="function"><span class="keyword">function</span>(<span class="params">promiseArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len = promiseArr.length;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      promiseArr.forEach(<span class="function">(<span class="params">cb, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">Promise</span>.resolve(cb).then(</span><br><span class="line">          res =&gt; &#123;</span><br><span class="line">            result[index] = res; <span class="comment">// 注意数组中的顺序，当时直接写了push🙃</span></span><br><span class="line">            <span class="keyword">if</span> (++flag === len) &#123;</span><br><span class="line">              resolve(result);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          error =&gt; &#123;</span><br><span class="line">            reject(error)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h1><p>三面的面试官应该是个主管，很和蔼，一上来就问我饭吃了嘛，面了很久了吧，要不要休息一下😊</p>
<p>三面个人觉得是比较轻松的一面，不涉及具体的API如何实现，主要考察从一个问题如何给出一个切实可行的解决方案，有很强的发散性思维，面试官会一步步引导给出一个较全面的解决方案。期间有提到用Vuex管理数据，面试官就直接说这个和Vuex没关系。面试官表达的需求很清楚，只要按照提出的需求切实的解决就ok</p>
<p>fortunately，三面结束，面试官说本来还要HR面，现在有点晚了，就明天吧。</p>
<ol>
<li><p>自我介绍</p>
</li>
<li><p>重点项目介绍，难点挑战</p>
<blockquote>
<p>我主要说了项目版本的迭代、中台的权限控制、模块化。。。</p>
</blockquote>
</li>
<li><p>权限控制方案，怎么实现的，整体的思路如何</p>
</li>
<li><p>模块化是怎么划分的，具体做过哪些</p>
</li>
<li><p>提出了一个输入框远程搜索提示的功能</p>
<ul>
<li><p>讲讲你实现的思路</p>
<blockquote>
<p>提了大概的思路，防抖，巴拉巴拉</p>
</blockquote>
</li>
<li><p>如果多次输入相同的内容怎么办</p>
<blockquote>
<p>可以缓存在localStorage中，在发起请求之前先在本地查一下</p>
</blockquote>
</li>
<li><p>这样每次都需要去localStorage取，有没有更好的方案</p>
<blockquote>
<p>页面加载的时候从localStronge取出来存在一个Map中，页面离开的时候再将新的Map存到localStronge中</p>
</blockquote>
</li>
<li><p>如果服务端的数据跟新了怎么同步localStronge中的数据</p>
<blockquote>
<p>可以借鉴浏览器的缓存，加标识符将数据分为两部分：一段时间不会修改的，那么使用”强缓存”；经常会修改的使用“协商缓存”，每次使用去服务器查一下看下有没有修改</p>
</blockquote>
</li>
</ul>
</li>
<li><p>说说版本是怎么迭代的</p>
</li>
<li><p>什么时候来实习</p>
</li>
</ol>
<h1 id="我提的问题"><a href="#我提的问题" class="headerlink" title="我提的问题"></a>我提的问题</h1><ol>
<li><p>一面：</p>
<ul>
<li><p>这段时间我学了Flutter和React，你觉得在有限的时间里是学更多的框架会使用，还是某一个比较深入的学习呢？</p>
</li>
<li><p>字节的技术栈</p>
</li>
</ul>
</li>
<li><p>二面：</p>
<p>面试官后面有事，没给我提问的机会😥</p>
</li>
<li><p>三面：</p>
<ul>
<li>字节有什么培养新人的方法嘛？</li>
<li>是研发为主，还是业务驱动？</li>
</ul>
</li>
</ol>
<h1 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h1><p>感觉<a href="https://github.com/PanJiaChen" target="_blank" rel="noopener">PanJiaChen</a> （<a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">vue-element-admin</a>）大佬的<a href="https://panjiachen.github.io/vue-element-admin-site/zh/job/" target="_blank" rel="noopener">内推码</a></p>
]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云音乐-前端实习面经</title>
    <url>/2020/04/23/1433399370/</url>
    <content><![CDATA[<p>记网易云音乐前端开发实习生面试。</p>
<h1 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h1><blockquote>
<p>考完没有及时记录，只记得部分编程题和简答题</p>
</blockquote>
<ul>
<li>编程题<ul>
<li>数列差的最大公约数</li>
<li>并查集</li>
<li>打怪兽，二维数组求每个位置离值为1的元素的最近距离</li>
<li>跳积木，一维数组可从大值向较小值移动，有一次机会向高值移动</li>
</ul>
</li>
<li>简单题<ul>
<li>PC端网易云音乐的搜索截图（截的图是JJ！！！）</li>
<li>页面性能优化方案</li>
</ul>
</li>
</ul>
<h1 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h1><ol>
<li><p>讲讲BFC</p>
</li>
<li><p>position</p>
</li>
<li><p>position: sticky的降级方案</p>
</li>
<li><p>浏览器版本判断</p>
</li>
<li><p>闭包</p>
</li>
<li><p>看代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  btn.addEventListener(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事件代理</p>
</li>
<li><p>Object对象如何判断相等</p>
</li>
<li><p>数组拍平（降到1维）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [[<span class="number">4</span>], <span class="number">5</span>]];</span><br><span class="line"><span class="comment">// 方案1</span></span><br><span class="line">arr.flat(<span class="literal">Infinity</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方案2 递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFlat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr.length &lt;= <span class="number">1</span> || !(item <span class="keyword">instanceof</span> <span class="built_in">Array</span>)) <span class="keyword">return</span> arr</span><br><span class="line">  <span class="keyword">const</span> resData = [];</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    item <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? resData.push(...myFlat(item)) : resData.push(item);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> resData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Vue 如何实现依赖收集</p>
</li>
<li><p>最近在看什么书</p>
</li>
<li><p>Vuex的使用方法</p>
</li>
</ol>
<h1 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h1><ol>
<li><p>自我介绍</p>
</li>
<li><p>HTML的form有哪些标签</p>
</li>
<li><p>form表单的单选和多选如何实现的</p>
</li>
<li><p>JSON.stringify 在什么情况不能使用，什么情况下会报错</p>
</li>
<li><p>讲讲对象的循环引用</p>
</li>
<li><p>写一个判断对象是否存在循环引用的函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  s.push(obj);</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(s.includes(obj[key]))&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        flag = fun(obj[key]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">   s.pop();</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在文字对话框内发了四条消息，如何保证在刷新后加载数据，顺序正确</p>
</li>
<li><p>设计一下数据库消息表的表结构</p>
</li>
<li><p>给消息列表加上拖拽移动消息功能，可改变消息顺序（从前端-&gt;后端-&gt;数据库，重点了前后端传值方案、数据库更新）</p>
</li>
</ol>
<blockquote>
<p>二面面试官迟到了半小时。。。也没有任何联系方式和解释（Bad…）</p>
<p>问题整体感觉难度不大，最后问到了后端和数据库相关时让我有些意外（还好都会🍕）后面我也问了一下，网易云C端一般使用React，B端或者效率工具、内部产品都需要全栈开发（Node）。</p>
</blockquote>
<h1 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h1><ol>
<li>自我介绍</li>
<li>介绍一下项目自己的项目经历</li>
<li>详细讲述印象最深的项目</li>
<li>遇到过比较困难的技术问题，如何解决</li>
<li>讲讲团队合作的方法，有没有遇到过比较难交流的情况</li>
<li>未来的职业规划</li>
</ol>
]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>网易雷火-前端开发工程师实习面经</title>
    <url>/2020/04/17/374217491/</url>
    <content><![CDATA[<p>记网易雷火前端开发工程师实习面试。</p>
<h1 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h1><ol>
<li><p>单选 8题 ＋ 不定项 7题</p>
<ul>
<li>清除浮动</li>
<li>JavaScript内置对象的区分</li>
<li>鼠标事件</li>
<li>页面加载</li>
<li>HTTP缓存</li>
<li>CSS样式叠加的效果</li>
<li>贝塞尔曲线</li>
<li>input type类型</li>
<li>ES6 数据类型</li>
</ul>
</li>
<li><p>编程题 1题</p>
<ul>
<li>四数之和，</li>
</ul>
</li>
<li><p>问答题 5题</p>
<ul>
<li><p>跨域方法，优点和缺点</p>
</li>
<li><p>window.onload 和 DOMContentLoaded 的区别</p>
</li>
<li><p>使用过的打包工具，详细描述webpack构建流程及对webpack的理解</p>
</li>
<li><p>使用享元模式设计类似于elementUI的$notify组件</p>
</li>
<li><p>实现一个图片异步上传组件，实现预览和裁剪</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>题目难度不大，量很大，最后的问答题占分很高。选择题考察的都是很细的问题，最后两道问答题code的量也比较大，而且不能使用本地编辑器，只能是纯文本编辑</p>
</blockquote>
<h1 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h1><ol>
<li>自我介绍</li>
<li>BFC、IFC、FFC、GFC</li>
<li>盒模型</li>
<li>JavaScript类型判断</li>
<li>原型</li>
<li>继承</li>
<li>跨域方案</li>
<li>vue-router的基本原理</li>
</ol>
<h1 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h1><ol>
<li>自我介绍</li>
<li>移动端适配方案</li>
<li>防抖、节流</li>
<li>登录验证方案<ol>
<li>session-cookice</li>
<li>使用session-cookice的问题</li>
<li>使用session-cookice进行负载均衡时的处理（Nginx中设为ip_hash)</li>
<li>JWT</li>
</ol>
</li>
<li>大图片上传方案</li>
<li>首屏渲染优化方案</li>
<li>部署方案</li>
<li>持续集成</li>
<li>Vue的双向绑定</li>
</ol>
<h1 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h1><ol>
<li>自我介绍</li>
<li>项目难点及挑战</li>
<li>前端路由权限控制设计方案</li>
<li>网页加载优化方案</li>
<li>2万条数据渲染方案</li>
<li>什么时候能来实习</li>
</ol>
<blockquote>
<p>技术面都在牛客网上进行，全程没有code。</p>
</blockquote>
<h1 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h1><ol>
<li>自我介绍</li>
<li>介绍一个你的项目</li>
<li>最困难的事</li>
<li>怎么解决</li>
<li>什么时候能来实习</li>
</ol>
]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客-bilibili2020校招卷（二）</title>
    <url>/2019/11/25/1241392941/</url>
    <content><![CDATA[<h1 id="错题整理"><a href="#错题整理" class="headerlink" title="错题整理"></a>错题整理</h1><h2 id="canvas和svg"><a href="#canvas和svg" class="headerlink" title="canvas和svg"></a>canvas和svg</h2><table>
<thead>
<tr>
<th align="left">Canvas</th>
<th align="left">SVG</th>
</tr>
</thead>
<tbody><tr>
<td align="left">通过Javascript来绘制2D图形。</td>
<td align="left">一种使用XML描述的2D图形的语言</td>
</tr>
<tr>
<td align="left">是逐像素进行渲染的。</td>
<td align="left">SVG基于XML意味着，SVG DOM中的每个元素都是可用的，可以为某个元素附加Javascript事件处理器。</td>
</tr>
<tr>
<td align="left">其<strong>位置发生改变</strong>，会重新进行绘制。</td>
<td align="left">在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的<strong>属性发生变化</strong>，那么浏览器能够自动重现图形。</td>
</tr>
<tr>
<td align="left"><strong>依赖</strong>分辨率</td>
<td align="left"><strong>不依赖</strong>分辨率</td>
</tr>
<tr>
<td align="left">不支持事件处理器</td>
<td align="left">支持事件处理器</td>
</tr>
<tr>
<td align="left">弱的文本渲染能力</td>
<td align="left"><strong>最适合带有大型渲染</strong>区域的应用程序（比如谷歌地图）</td>
</tr>
<tr>
<td align="left">能够以 .png 或 .jpg 格式保存结果图像</td>
<td align="left">复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</td>
</tr>
<tr>
<td align="left">最<strong>适合图像密集型</strong>的游戏，其中的许多对象会被频繁重绘</td>
<td align="left"><strong>不适合游戏应用</strong></td>
</tr>
</tbody></table>
<h2 id="preload-amp-prefetch"><a href="#preload-amp-prefetch" class="headerlink" title="preload &amp; prefetch"></a>preload &amp; prefetch</h2><h3 id="preload"><a href="#preload" class="headerlink" title="preload"></a>preload</h3><p>使用 <code>preload</code> 可以对当前页面所需的脚本、样式等资源进行预加载，而无需等到解析到 <code>script</code> 和 <code>link</code> 标签时才进行加载。 </p>
<h3 id="prefetch"><a href="#prefetch" class="headerlink" title="prefetch"></a>prefetch</h3><p><code>prefetch</code> 加载的资源一般不是用于当前页面的，即未来很可能用到的这样一些资源，利用浏览器空闲时间来下载 </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对当前页面需要的资源，使用 <code>preload</code> 进行预加载，对其它页面需要的资源进行 <code>prefetch</code> 预加载。</p>
<h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><blockquote>
<p>不是所有的CSS样式值都可以过渡，只有具有中间值的属性才具备过渡效果 </p>
<p>必须设有初始值</p>
</blockquote>
<p><a href="https://codepen.io/CHENSENRAN/pen/RwwmLYX" target="_blank" rel="noopener">初始值示例</a></p>
<h2 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h2><h3 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h3><p><img src="http://img.chensenran.top/1574659924240.png" alt=""></p>
<ol>
<li>解析HTML，生成DOM树，解析CSS，生成CSSOM树</li>
<li>将DOM树和CSSOM树结合，生成渲染树(Render Tree)</li>
<li>Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）</li>
<li>Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素</li>
<li>Display:将像素发送给GPU，展示在页面上。</li>
</ol>
<h3 id="生成渲染树"><a href="#生成渲染树" class="headerlink" title="生成渲染树"></a>生成渲染树</h3><p><img src="http://img.chensenran.top/1574660007099.png" alt=""></p>
<ol>
<li>从DOM树的根节点开始遍历每个可见节点。</li>
<li>对于每个可见的节点，找到CSSOM树中对应的规则，并应用它们。</li>
<li>根据每个可见节点以及其对应的样式，组合生成渲染树。</li>
</ol>
<h3 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h3><blockquote>
<p>当render树中的一部分或者全部因为大小边距等问题发生改变而需要重建的过程叫做回流（改变大小）</p>
</blockquote>
<h4 id="何时发生回流"><a href="#何时发生回流" class="headerlink" title="何时发生回流"></a>何时发生回流</h4><ol>
<li><p>添加或者删除可见的DOM元素；</p>
</li>
<li><p>元素位置改变；</p>
</li>
<li><p>元素尺寸改变——边距、填充、边框、宽度和高度</p>
</li>
<li><p>内容改变——比如文本改变或者图片大小改变而引起的计算值宽度和高度改变；</p>
</li>
<li><p>页面渲染初始化；</p>
</li>
<li><p>浏览器窗口尺寸改变——resize事件发生时；</p>
</li>
</ol>
<h3 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h3><blockquote>
<p>当元素的一部分属性发生变化，如外观背景色不会引起布局变化而需要重新渲染的过程叫做重绘（改变样式）</p>
</blockquote>
<h4 id="何时发生重绘"><a href="#何时发生重绘" class="headerlink" title="何时发生重绘"></a>何时发生重绘</h4><ol>
<li>元素的属性或者样式发生变化。 </li>
</ol>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><strong>注意：回流必将引起重绘，而重绘不一定会引起回流。</strong></p>
<h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><blockquote>
<p>任务频繁触发的情况下，只有任务触发的间隔超过指定间隔的时候，任务才会执行。（重复点击，在最后一次点击后才执行）</p>
</blockquote>
<p>场景： 输入框查询</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 创建一个标记用来存放定时器的返回值</span></span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  	<span class="comment">// 前一个定时器清除</span></span><br><span class="line"> 	 	clearTimeout(timeout);</span><br><span class="line"> 		<span class="comment">// 创建新的 setTimeout，</span></span><br><span class="line">    <span class="comment">// 这样就能保证点击按钮后的 interval 间隔内</span></span><br><span class="line">    <span class="comment">// 如果用户还点击了的话，就不会执行 fn 函数</span></span><br><span class="line">    timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fn.call(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><blockquote>
<p>指定时间间隔内只会执行一次任务。 </p>
</blockquote>
<p>场景：</p>
<ol>
<li>懒加载要监听计算滚动条的位置，使用节流按一定时间的频率获取。</li>
<li>用户点击提交按钮，假设我们知道接口大致的返回时间的情况下，我们使用节流，只允许一定时间内点击一次。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 标记</span></span><br><span class="line">  <span class="keyword">let</span> canRun = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	  <span class="keyword">if</span>(!canRun) &#123;</span><br><span class="line">  	  <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    canRun = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 定时器</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    	fn.call(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      canRun = <span class="literal">true</span>;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="编程题整理"><a href="#编程题整理" class="headerlink" title="编程题整理"></a>编程题整理</h1><h2 id="复数乘法"><a href="#复数乘法" class="headerlink" title="复数乘法"></a>复数乘法</h2><blockquote>
<p>输入两个表示复数的字符串，输出它们相乘的结果的字符串</p>
<p>复数字符串用a+bi表示(a, b 为整数, i为虚数单位，i2=1)</p>
</blockquote>
<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两个表示复数的字符串</span><br></pre></td></tr></table></figure>

<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两个数相乘的结果的字符串</span><br></pre></td></tr></table></figure>

<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1+2i</span><br><span class="line">2+1</span><br></pre></td></tr></table></figure>

<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0+5i</span><br></pre></td></tr></table></figure>

<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1+2i)(2+i) &#x3D; (2 + i + 4i + 2i * i) &#x3D; 0 + 5i</span><br></pre></td></tr></table></figure>

<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1+-2i</span><br><span class="line">3+4i</span><br></pre></td></tr></table></figure>

<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11+-2i</span><br></pre></td></tr></table></figure>

<h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1+-2i)(3+4i) &#x3D; (3 + 4i - 6i - 8i * i) &#x3D; 11+-2i</span><br></pre></td></tr></table></figure>

<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pluralMultiply</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [key1, value1] = num1.toString().split(<span class="string">'+'</span>);</span><br><span class="line">  <span class="keyword">let</span> [key2, value2] = num2.toString().split(<span class="string">'+'</span>);</span><br><span class="line">  value1 = value1.replace(<span class="string">'i'</span>, <span class="string">''</span>);</span><br><span class="line">  value2 = value2.replace(<span class="string">'i'</span>, <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;(+key1 * +key2) - (+value1 * +value2)&#125;</span>+<span class="subst">$&#123;(+key1 * +value2) + (+key2 * +value1)&#125;</span>i`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> t = <span class="number">1</span>,num1,num2;</span><br><span class="line"><span class="keyword">while</span> (line = readline()) &#123;</span><br><span class="line">    <span class="keyword">if</span>(t === <span class="number">1</span>)&#123;</span><br><span class="line">        num1 = line;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        num2 = line;</span><br><span class="line">    &#125;</span><br><span class="line">    t++;</span><br><span class="line">&#125;</span><br><span class="line">print(pluralMultiply(num1,num2));</span><br></pre></td></tr></table></figure>

<h2 id="一年中的第几天"><a href="#一年中的第几天" class="headerlink" title="一年中的第几天"></a>一年中的第几天</h2><blockquote>
<p>输入一个”YYYY-MM-dd”格式的日期字符串，输出该天是当年的第几天（1 月 1 日是每年的第 1 天） </p>
</blockquote>
<h3 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个&quot;YYYY-MM-dd&quot;格式的表示日期的字符串</span><br></pre></td></tr></table></figure>

<h3 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">该天是当年的第几天</span><br></pre></td></tr></table></figure>

<h3 id="示例1-1"><a href="#示例1-1" class="headerlink" title="示例1"></a>示例1</h3><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-01-09</span><br></pre></td></tr></table></figure>

<h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure>

<h3 id="示例2-1"><a href="#示例2-1" class="headerlink" title="示例2"></a>示例2</h3><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2004-03-01</span><br></pre></td></tr></table></figure>

<h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">61</span><br></pre></td></tr></table></figure>

<h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2004年为闰年，所以是第31+29+1&#x3D;61天</span><br></pre></td></tr></table></figure>

<h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDay</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>];</span><br><span class="line">  <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br><span class="line">  <span class="keyword">const</span> month = d.getMonth();</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; month; i++) &#123;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> year = d.getFullYear();</span><br><span class="line">      <span class="keyword">if</span> (year % <span class="number">100</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (year % <span class="number">400</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          sum++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (year % <span class="number">4</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        sum++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line">  sum += d.getDate();</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(line = readline())&#123;</span><br><span class="line">    print(getDay(line))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="k个一组翻转链表"><a href="#k个一组翻转链表" class="headerlink" title="k个一组翻转链表"></a>k个一组翻转链表</h2><p>给你一个链表，每 k 个节点一组进行翻转，请返回翻转后的链表。</p>
<p>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。 </p>
<p>给定这个链表：1-&gt;2-&gt;3-&gt;4-&gt;5<br>当 k = 2 时，应当返回: 2-&gt;1-&gt;4-&gt;3-&gt;5<br>当 k = 3 时，应当返回: 3-&gt;2-&gt;1-&gt;4-&gt;5 </p>
<h3 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a><strong>输入描述:</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行：依次输入链表中的各个元素，以&quot;#&quot;结束第二行：每组数量k</span><br></pre></td></tr></table></figure>

<h3 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">处理后的链表中的各个元素，以&quot;-&gt;&quot;连接</span><br></pre></td></tr></table></figure>

<h3 id="示例1-2"><a href="#示例1-2" class="headerlink" title="示例1"></a>示例1</h3><h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 3 4 5 #</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2-&gt;1-&gt;4-&gt;3-&gt;5</span><br></pre></td></tr></table></figure>

<h3 id="示例2-2"><a href="#示例2-2" class="headerlink" title="示例2"></a>示例2</h3><h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 3 4 5 #</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3-&gt;2-&gt;1-&gt;4-&gt;5</span><br></pre></td></tr></table></figure>

<h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayReverseHandler</span>(<span class="params">arr, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> t = [];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>, result = [];</span><br><span class="line">  <span class="keyword">const</span> pushResult = <span class="function">(<span class="params">temp</span>) =&gt;</span> &#123;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp.length) &#123;</span><br><span class="line">      result.push(temp.pop());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    count++;</span><br><span class="line">    t.push(item);</span><br><span class="line">    <span class="keyword">if</span> (item === <span class="string">'#'</span>) &#123;</span><br><span class="line">      t.pop()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count === +num) &#123;</span><br><span class="line">      pushResult(t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  result = result.concat(t);</span><br><span class="line">  <span class="keyword">return</span> result.join(<span class="string">'-&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> t = <span class="number">1</span>,arr,num;</span><br><span class="line"><span class="keyword">while</span>(line = readline()) &#123;</span><br><span class="line">    <span class="keyword">if</span>(t++ === <span class="number">1</span>)&#123;</span><br><span class="line">        arr = line.split(<span class="string">" "</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        num = line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print(arrayReverseHandler(arr,num))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>牛客</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客-bilibili2020校招卷（一）</title>
    <url>/2019/11/25/2045299701/</url>
    <content><![CDATA[<h1 id="错题整理"><a href="#错题整理" class="headerlink" title="错题整理"></a>错题整理</h1><h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><p>块级元素与行内元素的区别：</p>
<ul>
<li>格式：默认情况下，块级元素会新起一行。</li>
<li>内容模型：一般块级元素可以包含行内元素和其他块级元素。这种结构上的包含继承区别可以使块级元素创建比行内元素更”大型“的结构。</li>
</ul>
<h2 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h2><ul>
<li><p>content-box ： 默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。 </p>
</li>
<li><p>border-box ： width 和 height 属性包括内容，内边距和边框，但不包括外边距。 </p>
</li>
<li><p>inherit ： 从父元素继承 box-sizing 属性的值。 （子元素不会默认继承父元素的值）</p>
</li>
</ul>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><table>
<thead>
<tr>
<th>运算</th>
<th>示例</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td>按位与</td>
<td>a &amp; b</td>
<td align="left">对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。</td>
</tr>
<tr>
<td>按位或</td>
<td>a | b</td>
<td align="left">对于每一个比特位，当两个操作数相应的比特位至少有一个1时，结果为1，否则为0。</td>
</tr>
<tr>
<td>按位异或</td>
<td>a ^ b</td>
<td align="left">对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。</td>
</tr>
<tr>
<td>按位非</td>
<td>~ a</td>
<td align="left">反转操作数的比特位，即0变成1，1变成0。</td>
</tr>
<tr>
<td>左移</td>
<td>a &lt;&lt; b</td>
<td align="left">将 a 的二进制形式向左移 b (&lt; 32) 比特位，右边用0填充。</td>
</tr>
<tr>
<td>有符号右移</td>
<td>a &gt;&gt; b</td>
<td align="left">将 a 的二进制表示向右移<code>b</code>(&lt; 32) 位，丢弃被移出的位。</td>
</tr>
<tr>
<td>无符号右移</td>
<td>a &gt;&gt;&gt; b</td>
<td align="left">将 a 的二进制表示向右移<code>b</code>(&lt; 32) 位，丢弃被移出的位，并使用 0 在左侧填充。</td>
</tr>
</tbody></table>
<h3 id="按位逻辑操作符"><a href="#按位逻辑操作符" class="headerlink" title="按位逻辑操作符"></a>按位逻辑操作符</h3><h3 id="与"><a href="#与" class="headerlink" title="与"></a>与</h3><blockquote>
<p>可用于判断奇偶性</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> &amp; <span class="number">1</span> <span class="comment">// 1</span></span><br><span class="line"><span class="number">4</span> &amp; <span class="number">1</span> <span class="comment">// 0</span></span><br><span class="line"><span class="number">-5</span> &amp; <span class="number">1</span> <span class="comment">// 1</span></span><br><span class="line"><span class="number">-4</span> &amp; <span class="number">1</span> <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4><blockquote>
<p>可用于取整（舍尾）</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">11.8</span> | <span class="number">0</span> <span class="comment">// 11</span></span><br><span class="line"><span class="number">-4.3</span> | <span class="number">0</span> <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h4 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h4><blockquote>
<p>不同则为1</p>
</blockquote>
<h4 id="非"><a href="#非" class="headerlink" title="非"></a>非</h4><blockquote>
<p>对每一个比特位执行<strong>非（NOT）操作</strong>。 </p>
<p>对任一数值 x 进行按位非操作的结果为 -(x + 1)。例如，~5 结果为 -6。 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是否在字符串中</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'rawr'</span>;</span><br><span class="line"><span class="keyword">var</span> searchFor = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是 if (-1*str.indexOf('a') &lt;= 0) 条件判断的另一种方法</span></span><br><span class="line"><span class="keyword">if</span> (~str.indexOf(searchFor)) &#123;</span><br><span class="line">  <span class="comment">// searchFor 包含在字符串中</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// searchFor 不包含在字符串中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="按位移动操作符"><a href="#按位移动操作符" class="headerlink" title="按位移动操作符"></a>按位移动操作符</h3><h4 id="lt-lt-左移"><a href="#lt-lt-左移" class="headerlink" title="&lt;&lt; (左移)"></a>&lt;&lt; (左移)</h4><blockquote>
<p> 该操作符会将第一个操作数向左移动指定的位数。向左被移出的位被丢弃，右侧用 0 补充。 </p>
</blockquote>
<blockquote>
<p>在数字 <strong>x</strong> 上左移 <strong>y</strong> 比特得到 <strong>x * Math.pow(2,y)</strong>. </p>
</blockquote>
<h4 id="gt-gt-有符号右移"><a href="#gt-gt-有符号右移" class="headerlink" title="&gt;&gt; (有符号右移)"></a>&gt;&gt; (有符号右移)</h4><blockquote>
<p>该操作符会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，拷贝最左侧的位以填充左侧。 </p>
</blockquote>
<h4 id="gt-gt-gt-无符号右移"><a href="#gt-gt-gt-无符号右移" class="headerlink" title="&gt;&gt;&gt; (无符号右移)"></a>&gt;&gt;&gt; (无符号右移)</h4><blockquote>
<p>该操作符会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，左侧用0填充。因为符号位变成了 0，所以结果总是非负的。（译注：即便右移 0 个比特，结果也是非负的。） </p>
</blockquote>
<h2 id="1-lt-2-lt-3-3-lt-2-lt-1"><a href="#1-lt-2-lt-3-3-lt-2-lt-1" class="headerlink" title="[1 &lt; 2 &lt; 3, 3 &lt; 2 &lt; 1]"></a>[1 &lt; 2 &lt; 3, 3 &lt; 2 &lt; 1]</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="literal">true</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure>



<blockquote>
<p>在js中 0 == false和1 == true是正确的 </p>
<p>因此在分析3&lt;2&lt;1时，我们可以将其分为两步，首先是3&lt;2返回是false，也就等价于0。<br>所以0&lt;1结果自然是true了。 </p>
</blockquote>
<h2 id="‘1’-‘2’-‘3’-map-parseInt"><a href="#‘1’-‘2’-‘3’-map-parseInt" class="headerlink" title="[‘1’, ‘2’, ‘3’].map(parseInt)"></a>[‘1’, ‘2’, ‘3’].map(parseInt)</h2><blockquote>
<p>map((item, index, thisArr) =&gt; ( newArr ))</p>
<p>parseInt(string, radix)</p>
</blockquote>
<p>map给parseInt传递了三个参数:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseInt(item, index, thisArr)</span><br></pre></td></tr></table></figure>

<p>其中第三个参数会被 parseInt 忽略，因此会依次执行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">'1'</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// radix 为 0，默认以十进制解析字符串，返回 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'2'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// radix 为 1，不在 2 ~ 36 之间，返回 NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'3'</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// radix 为 2， 字符串却为 3，超出二进制的表示范围，因此要解析的字符串和基数矛盾，返回 NaN</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>综上，最后返回的数组为 [1, NaN, NaN]</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">1</span>/<span class="number">0</span>,<span class="number">19</span>) <span class="comment">//18</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="literal">false</span>,<span class="number">16</span>) <span class="comment">//250</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">parseInt</span>,<span class="number">16</span>) <span class="comment">//15</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'0x10'</span>) <span class="comment">//16</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>,<span class="number">2</span>) <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p><img src="http://img.chensenran.top/1574652430474.jpg" alt="转义字符"></p>
<h1 id="编程题整理"><a href="#编程题整理" class="headerlink" title="编程题整理"></a>编程题整理</h1><h3 id="找出有序数组中和为sum的两个数"><a href="#找出有序数组中和为sum的两个数" class="headerlink" title="找出有序数组中和为sum的两个数"></a>找出有序数组中和为sum的两个数</h3><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p> 第一行：数组长度第二行：数组各项的值第三行：sum</p>
</blockquote>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>若存在，输出和为sum的两个数，以空格分隔；若不存在，输出notfound</p>
</blockquote>
<h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 3 4 6 8</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 6</span><br></pre></td></tr></table></figure>

<h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><h5 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 3 4 6 8</span><br><span class="line">13</span><br></pre></td></tr></table></figure>

<h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">notfound</span><br></pre></td></tr></table></figure>

<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>使用双指针，因为是有序数组，所以从左右两侧逼近。</p>
<h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findSumOfTowItem</span>(<span class="params">len,arr,sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">const</span> sumOfTow = +arr[left] + +arr[right];</span><br><span class="line">        <span class="keyword">if</span>(sumOfTow == sum)&#123;</span><br><span class="line">            <span class="keyword">return</span> arr[left] + <span class="string">" "</span> + arr[right];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sumOfTow &lt; sum) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"notfound"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> t = <span class="number">1</span>,len,arr,sum;</span><br><span class="line"><span class="keyword">while</span> (line = readline()) &#123;</span><br><span class="line">    <span class="keyword">var</span> temp = line.split(<span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">if</span> (t === <span class="number">1</span>) &#123;</span><br><span class="line">        len = temp;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t===<span class="number">2</span>)&#123;</span><br><span class="line">        arr = temp;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        sum = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    t++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">print(findSumOfTowItem(len,arr,sum));</span><br></pre></td></tr></table></figure>

<h3 id="括号闭合"><a href="#括号闭合" class="headerlink" title="括号闭合"></a>括号闭合</h3><blockquote>
<p>判断由”()[]{}”6种括号组成的字符串是否合法</p>
<ol>
<li>所有括号必须闭合</li>
<li>左括号必须在正确的位置闭合</li>
</ol>
</blockquote>
<h4 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h4><p>由6种符号组成的字符串</p>
<h4 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h4><p>合法则输出”true”，不合法输出”false”</p>
<h4 id="示例1-1"><a href="#示例1-1" class="headerlink" title="示例1"></a>示例1</h4><h5 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(]</span><br></pre></td></tr></table></figure>

<h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure>

<h4 id="示例2-1"><a href="#示例2-1" class="headerlink" title="示例2"></a>示例2</h4><h5 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;[][()()]&#125;</span><br></pre></td></tr></table></figure>

<h5 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure>

<h4 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h4><h5 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;([)]&#125;</span><br></pre></td></tr></table></figure>

<h5 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure>

<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>使用栈进行逐一匹配。</p>
<h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> t = [];</span><br><span class="line">  <span class="keyword">const</span> pushItem = <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    t.push(item);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> popItem = <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> type = t.pop();</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> item === <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">'['</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> item === <span class="string">']'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">'('</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> item === <span class="string">')'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> actions = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">'('</span>, pushItem],</span><br><span class="line">    [<span class="string">'&#123;'</span>, pushItem],</span><br><span class="line">    [<span class="string">'['</span>, pushItem],</span><br><span class="line">    [<span class="string">')'</span>, popItem],</span><br><span class="line">    [<span class="string">'&#125;'</span>, popItem],</span><br><span class="line">    [<span class="string">']'</span>, popItem]</span><br><span class="line">  ])</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> action = [...actions].filter(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> key === arr[i]);</span><br><span class="line">    <span class="keyword">const</span> [key, value] = action[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> flag = value.call(<span class="keyword">this</span>, arr[i]);</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (line = readline()) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = line.split(<span class="string">""</span>);</span><br><span class="line">    print(check(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="上楼梯"><a href="#上楼梯" class="headerlink" title="上楼梯"></a>上楼梯</h3><p> 有n级台阶，每一步可以走1级或2级，问一共有多少种走法 </p>
<h4 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h4><p>台阶的级数n</p>
<h4 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h4><p>走法数量</p>
<h4 id="示例1-2"><a href="#示例1-2" class="headerlink" title="示例1"></a>示例1</h4><h5 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h5 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">走法为1+1或2</span><br></pre></td></tr></table></figure>

<h4 id="示例2-2"><a href="#示例2-2" class="headerlink" title="示例2"></a>示例2</h4><h4 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h5 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h5 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">走法为1+1+1或1+2或2+1</span><br></pre></td></tr></table></figure>

<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>动态规划。从第三级台阶开始，次数等于前两级台阶和。</p>
<h4 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stepTypeHandler</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(+num).fill(<span class="number">1</span>);</span><br><span class="line">  arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr[num - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (line = readline()) &#123;</span><br><span class="line">    print(stepTypeHandler(line));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>牛客</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础</title>
    <url>/2019/11/27/3782454218/</url>
    <content><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><blockquote>
<p>HTML即超文本标记语言，HTML5的规范由两个组织制定（WHATWG, W3C)</p>
<p><strong>HTML5</strong>不再基于SGML</p>
</blockquote>
<h2 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h2><table>
<thead>
<tr>
<th>元素</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>DOCTYPE</td>
<td>文档类型说明，有助于确定浏览器的渲染模式</td>
</tr>
<tr>
<td>html</td>
<td>根元素，HTML部分的开始</td>
</tr>
<tr>
<td>head</td>
<td>包含文档的元数据</td>
</tr>
<tr>
<td>body</td>
<td>包含文档的内容</td>
</tr>
</tbody></table>
<h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><p><strong>HTML5</strong> 是定义 HTML 标准的最新的版本。 该术语通过两个不同的概念来表现：</p>
<ul>
<li>它是一个新版本的<strong>HTML</strong>语言，具有新的元素，属性和行为，</li>
<li>它有更大的<strong>技术</strong>集，允许构建更多样化和更强大的网站和应用程序。这个集合有时称为HTML5和它的朋友们，不过大多数时候仅缩写为一个词 HTML5。</li>
</ul>
<p>HTML5技术的资源，根据功能分类：</p>
<ul>
<li><em>语义</em>：允许您更精确地描述您的内容。</li>
<li><em>连接性</em>：允许您以新颖的方式与服务器通信。</li>
<li><em>离线和存储</em>：允许网页在本地将数据存储在客户端，并更有效地进行离线操作。</li>
<li><em>多媒体</em>：使视频和音频成为开放网络中的一流公民。</li>
<li><em>2D / 3D图形和效果</em>：允许更多种演示选项。</li>
<li><em>性能和集成</em>：提供更高的速度优化和更好地使用计算机硬件。</li>
<li><em>设备访问</em>：允许使用各种输入和输出设备。</li>
<li><em>样式</em>：让作者编写更复杂的主题。</li>
</ul>
<h3 id="Web-APP、Native-APP、Hybrid-APP"><a href="#Web-APP、Native-APP、Hybrid-APP" class="headerlink" title="Web APP、Native APP、Hybrid APP"></a>Web APP、Native APP、Hybrid APP</h3><p><img src="http://img.chensenran.top/1574824456365.png" alt=""></p>
<h2 id="浏览器渲染模式"><a href="#浏览器渲染模式" class="headerlink" title="浏览器渲染模式"></a>浏览器渲染模式</h2><ul>
<li>怪异模式</li>
<li>接近标准模式</li>
<li>标准模式</li>
</ul>
<h2 id="XHTML与HTML区别"><a href="#XHTML与HTML区别" class="headerlink" title="XHTML与HTML区别"></a>XHTML与HTML区别</h2><p>在XHTML中：</p>
<ol>
<li>元素必须合理嵌套</li>
<li>元素名区分大小写</li>
<li>所有元素都要有结束标签</li>
<li>可混用XML应用</li>
<li>注释标签 <!-- -->内容会被忽略</li>
<li>CDATA正常解析</li>
<li>脚本获取ＨＴＭＬ的元素名会返回大写，XHTML为小写</li>
<li>元素名必须引号包裹</li>
<li>特殊字符必须转义</li>
</ol>
<h2 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h2><p>HTML5元素按照功能分类：</p>
<ul>
<li>有元数据</li>
<li>文本元素</li>
<li>内容分组</li>
<li>划分内容</li>
<li>嵌入内容</li>
</ul>
<p>语义化的优势</p>
<ul>
<li>使HTML文档结构清晰、布局合理、主体突出、可读性更强</li>
<li>无障碍阅读</li>
<li>改善搜索引擎优化（SEO）</li>
</ul>
]]></content>
      <categories>
        <category>前端面试宝典</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
